"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/formax-ui";
exports.ids = ["vendor-chunks/formax-ui"];
exports.modules = {

/***/ "(ssr)/./node_modules/formax-ui/dist/index.es.js":
/*!*************************************************!*\
  !*** ./node_modules/formax-ui/dist/index.es.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Checkbox: () => (/* binding */ Checkbox),\n/* harmony export */   DatePicker: () => (/* binding */ DatePicker),\n/* harmony export */   FormError: () => (/* binding */ FormError),\n/* harmony export */   FormProvider: () => (/* binding */ FormProvider),\n/* harmony export */   MultiStepForm: () => (/* binding */ MultiStepForm),\n/* harmony export */   RadioGroup: () => (/* binding */ RadioGroup),\n/* harmony export */   Select: () => (/* binding */ Select),\n/* harmony export */   SubmitButton: () => (/* binding */ SubmitButton),\n/* harmony export */   SwitchToggle: () => (/* binding */ SwitchToggle),\n/* harmony export */   TextInput: () => (/* binding */ TextInput),\n/* harmony export */   Textarea: () => (/* binding */ Textarea)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol, Iterator */ function __rest(s1, e1) {\n    var t1 = {};\n    for(var p1 in s1)if (Object.prototype.hasOwnProperty.call(s1, p1) && e1.indexOf(p1) < 0) t1[p1] = s1[p1];\n    if (s1 != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i1 = 0, p1 = Object.getOwnPropertySymbols(s1); i1 < p1.length; i1++){\n        if (e1.indexOf(p1[i1]) < 0 && Object.prototype.propertyIsEnumerable.call(s1, p1[i1])) t1[p1[i1]] = s1[p1[i1]];\n    }\n    return t1;\n}\nfunction __awaiter(thisArg1, _arguments1, P1, generator1) {\n    function adopt1(value1) {\n        return value1 instanceof P1 ? value1 : new P1(function(resolve1) {\n            resolve1(value1);\n        });\n    }\n    return new (P1 || (P1 = Promise))(function(resolve1, reject1) {\n        function fulfilled1(value1) {\n            try {\n                step1(generator1.next(value1));\n            } catch (e1) {\n                reject1(e1);\n            }\n        }\n        function rejected1(value1) {\n            try {\n                step1(generator1[\"throw\"](value1));\n            } catch (e1) {\n                reject1(e1);\n            }\n        }\n        function step1(result1) {\n            result1.done ? resolve1(result1.value) : adopt1(result1.value).then(fulfilled1, rejected1);\n        }\n        step1((generator1 = generator1.apply(thisArg1, _arguments1 || [])).next());\n    });\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function(error1, suppressed1, message1) {\n    var e1 = new Error(message1);\n    return e1.name = \"SuppressedError\", e1.error = error1, e1.suppressed = suppressed1, e1;\n};\n/**\n * @license lucide-react v0.303.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ var defaultAttributes = {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n};\n/**\n * @license lucide-react v0.303.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const toKebabCase = (string1)=>string1.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase().trim();\nconst createLucideIcon = (iconName1, iconNode1)=>{\n    const Component1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(({ color: color1 = \"currentColor\", size: size1 = 24, strokeWidth: strokeWidth1 = 2, absoluteStrokeWidth: absoluteStrokeWidth1, className: className1 = \"\", children: children1, ...rest1 }, ref1)=>/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"svg\", {\n            ref: ref1,\n            ...defaultAttributes,\n            width: size1,\n            height: size1,\n            stroke: color1,\n            strokeWidth: absoluteStrokeWidth1 ? Number(strokeWidth1) * 24 / Number(size1) : strokeWidth1,\n            className: [\n                \"lucide\",\n                `lucide-${toKebabCase(iconName1)}`,\n                className1\n            ].join(\" \"),\n            ...rest1\n        }, [\n            ...iconNode1.map(([tag1, attrs1])=>/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(tag1, attrs1)),\n            ...Array.isArray(children1) ? children1 : [\n                children1\n            ]\n        ]));\n    Component1.displayName = `${iconName1}`;\n    return Component1;\n};\n/**\n * @license lucide-react v0.303.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const AlertCircle = createLucideIcon(\"AlertCircle\", [\n    [\n        \"circle\",\n        {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"10\",\n            key: \"1mglay\"\n        }\n    ],\n    [\n        \"line\",\n        {\n            x1: \"12\",\n            x2: \"12\",\n            y1: \"8\",\n            y2: \"12\",\n            key: \"1pkeuh\"\n        }\n    ],\n    [\n        \"line\",\n        {\n            x1: \"12\",\n            x2: \"12.01\",\n            y1: \"16\",\n            y2: \"16\",\n            key: \"4dfq90\"\n        }\n    ]\n]);\n/**\n * @license lucide-react v0.303.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const Calendar = createLucideIcon(\"Calendar\", [\n    [\n        \"rect\",\n        {\n            width: \"18\",\n            height: \"18\",\n            x: \"3\",\n            y: \"4\",\n            rx: \"2\",\n            ry: \"2\",\n            key: \"eu3xkr\"\n        }\n    ],\n    [\n        \"line\",\n        {\n            x1: \"16\",\n            x2: \"16\",\n            y1: \"2\",\n            y2: \"6\",\n            key: \"m3sa8f\"\n        }\n    ],\n    [\n        \"line\",\n        {\n            x1: \"8\",\n            x2: \"8\",\n            y1: \"2\",\n            y2: \"6\",\n            key: \"18kwsl\"\n        }\n    ],\n    [\n        \"line\",\n        {\n            x1: \"3\",\n            x2: \"21\",\n            y1: \"10\",\n            y2: \"10\",\n            key: \"xt86sb\"\n        }\n    ]\n]);\n/**\n * @license lucide-react v0.303.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const Check = createLucideIcon(\"Check\", [\n    [\n        \"path\",\n        {\n            d: \"M20 6 9 17l-5-5\",\n            key: \"1gmf2c\"\n        }\n    ]\n]);\n/**\n * @license lucide-react v0.303.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const ChevronDown = createLucideIcon(\"ChevronDown\", [\n    [\n        \"path\",\n        {\n            d: \"m6 9 6 6 6-6\",\n            key: \"qrunsl\"\n        }\n    ]\n]);\n/**\n * @license lucide-react v0.303.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const ChevronLeft = createLucideIcon(\"ChevronLeft\", [\n    [\n        \"path\",\n        {\n            d: \"m15 18-6-6 6-6\",\n            key: \"1wnfg3\"\n        }\n    ]\n]);\n/**\n * @license lucide-react v0.303.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const ChevronRight = createLucideIcon(\"ChevronRight\", [\n    [\n        \"path\",\n        {\n            d: \"m9 18 6-6-6-6\",\n            key: \"mthhwq\"\n        }\n    ]\n]);\n/**\n * @license lucide-react v0.303.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const Loader2 = createLucideIcon(\"Loader2\", [\n    [\n        \"path\",\n        {\n            d: \"M21 12a9 9 0 1 1-6.219-8.56\",\n            key: \"13zald\"\n        }\n    ]\n]);\nfunction r$1(e1) {\n    var t1, f1, n1 = \"\";\n    if (\"string\" == typeof e1 || \"number\" == typeof e1) n1 += e1;\n    else if (\"object\" == typeof e1) if (Array.isArray(e1)) {\n        var o1 = e1.length;\n        for(t1 = 0; t1 < o1; t1++)e1[t1] && (f1 = r$1(e1[t1])) && (n1 && (n1 += \" \"), n1 += f1);\n    } else for(f1 in e1)e1[f1] && (n1 && (n1 += \" \"), n1 += f1);\n    return n1;\n}\nfunction clsx() {\n    for(var e1, t1, f1 = 0, n1 = \"\", o1 = arguments.length; f1 < o1; f1++)(e1 = arguments[f1]) && (t1 = r$1(e1)) && (n1 && (n1 += \" \"), n1 += t1);\n    return n1;\n}\nfunction cn(...inputs1) {\n    return clsx(inputs1);\n}\nconst Checkbox = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((_a1, ref1)=>{\n    var { label: label1, name: name1, error: error1, required: required1, disabled: disabled1, className: className1, id: id1, helpText: helpText1, register: register1 } = _a1, rest1 = __rest(_a1, [\n        \"label\",\n        \"name\",\n        \"error\",\n        \"required\",\n        \"disabled\",\n        \"className\",\n        \"id\",\n        \"helpText\",\n        \"register\"\n    ]);\n    const checkboxId1 = id1 || name1;\n    const hasError1 = !!error1;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: cn(\"formax-checkbox-wrapper\", className1),\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: \"flex items-start\",\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                        className: \"flex items-center h-5\",\n                        children: [\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", Object.assign({\n                                ref: ref1,\n                                type: \"checkbox\",\n                                id: checkboxId1,\n                                name: name1,\n                                disabled: disabled1,\n                                \"aria-invalid\": hasError1,\n                                \"aria-describedby\": hasError1 ? `${checkboxId1}-error` : helpText1 ? `${checkboxId1}-help` : undefined,\n                                className: cn(\"sr-only peer\")\n                            }, register1 ? register1 : {}, rest1)),\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                className: cn(\"w-4 h-4 border-2 rounded flex items-center justify-center transition-all duration-200\", \"peer-checked:bg-formax-600 peer-checked:border-formax-600\", \"peer-focus:ring-2 peer-focus:ring-formax-500 peer-focus:ring-offset-2\", {\n                                    \"border-gray-300 bg-white\": !hasError1,\n                                    \"border-red-500\": hasError1,\n                                    \"opacity-50 cursor-not-allowed\": disabled1\n                                }),\n                                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Check, {\n                                    className: cn(\"w-3 h-3 text-white transition-opacity duration-200\", \"opacity-0 peer-checked:opacity-100\")\n                                })\n                            })\n                        ]\n                    }),\n                    label1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        className: \"ml-3 text-sm\",\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"label\", {\n                            htmlFor: checkboxId1,\n                            className: cn(\"font-medium text-gray-700\", {\n                                \"cursor-not-allowed opacity-50\": disabled1\n                            }),\n                            children: [\n                                label1,\n                                required1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                                    className: \"text-red-500 ml-1\",\n                                    children: \"*\"\n                                })\n                            ]\n                        })\n                    })\n                ]\n            }),\n            error1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                id: `${checkboxId1}-error`,\n                className: \"formax-error mt-2\",\n                children: error1\n            }),\n            helpText1 && !error1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                id: `${checkboxId1}-help`,\n                className: \"formax-help mt-2\",\n                children: helpText1\n            })\n        ]\n    });\n});\nCheckbox.displayName = \"Checkbox\";\nfunction getDefaultExportFromCjs(x1) {\n    return x1 && x1.__esModule && Object.prototype.hasOwnProperty.call(x1, \"default\") ? x1[\"default\"] : x1;\n}\nvar classnames = {\n    exports: {}\n};\n/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/ (function(module1) {\n    /* global define */ (function() {\n        var hasOwn1 = {}.hasOwnProperty;\n        function classNames1() {\n            var classes1 = \"\";\n            for(var i1 = 0; i1 < arguments.length; i1++){\n                var arg1 = arguments[i1];\n                if (arg1) {\n                    classes1 = appendClass1(classes1, parseValue1(arg1));\n                }\n            }\n            return classes1;\n        }\n        function parseValue1(arg1) {\n            if (typeof arg1 === \"string\" || typeof arg1 === \"number\") {\n                return arg1;\n            }\n            if (typeof arg1 !== \"object\") {\n                return \"\";\n            }\n            if (Array.isArray(arg1)) {\n                return classNames1.apply(null, arg1);\n            }\n            if (arg1.toString !== Object.prototype.toString && !arg1.toString.toString().includes(\"[native code]\")) {\n                return arg1.toString();\n            }\n            var classes1 = \"\";\n            for(var key1 in arg1){\n                if (hasOwn1.call(arg1, key1) && arg1[key1]) {\n                    classes1 = appendClass1(classes1, key1);\n                }\n            }\n            return classes1;\n        }\n        function appendClass1(value1, newClass1) {\n            if (!newClass1) {\n                return value1;\n            }\n            if (value1) {\n                return value1 + \" \" + newClass1;\n            }\n            return value1 + newClass1;\n        }\n        if (module1.exports) {\n            classNames1.default = classNames1;\n            module1.exports = classNames1;\n        } else {\n            window.classNames = classNames1;\n        }\n    })();\n})(classnames);\nvar classnamesExports = classnames.exports;\nvar r = /*@__PURE__*/ getDefaultExportFromCjs(classnamesExports);\nfunction _typeof(o1) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o1) {\n        return typeof o1;\n    } : function(o1) {\n        return o1 && \"function\" == typeof Symbol && o1.constructor === Symbol && o1 !== Symbol.prototype ? \"symbol\" : typeof o1;\n    }, _typeof(o1);\n}\nfunction requiredArgs(required1, args1) {\n    if (args1.length < required1) {\n        throw new TypeError(required1 + \" argument\" + (required1 > 1 ? \"s\" : \"\") + \" required, but only \" + args1.length + \" present\");\n    }\n}\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param {*} value - the value to check\n * @returns {boolean} true if the given value is a date\n * @throws {TypeError} 1 arguments required\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */ function isDate(value1) {\n    requiredArgs(1, arguments);\n    return value1 instanceof Date || _typeof(value1) === \"object\" && Object.prototype.toString.call(value1) === \"[object Date]\";\n}\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */ function toDate(argument1) {\n    requiredArgs(1, arguments);\n    var argStr1 = Object.prototype.toString.call(argument1);\n    // Clone the date\n    if (argument1 instanceof Date || _typeof(argument1) === \"object\" && argStr1 === \"[object Date]\") {\n        // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n        return new Date(argument1.getTime());\n    } else if (typeof argument1 === \"number\" || argStr1 === \"[object Number]\") {\n        return new Date(argument1);\n    } else {\n        if ((typeof argument1 === \"string\" || argStr1 === \"[object String]\") && typeof console !== \"undefined\") {\n            // eslint-disable-next-line no-console\n            console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments\");\n            // eslint-disable-next-line no-console\n            console.warn(new Error().stack);\n        }\n        return new Date(NaN);\n    }\n}\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */ function isValid(dirtyDate1) {\n    requiredArgs(1, arguments);\n    if (!isDate(dirtyDate1) && typeof dirtyDate1 !== \"number\") {\n        return false;\n    }\n    var date1 = toDate(dirtyDate1);\n    return !isNaN(Number(date1));\n}\nfunction toInteger(dirtyNumber1) {\n    if (dirtyNumber1 === null || dirtyNumber1 === true || dirtyNumber1 === false) {\n        return NaN;\n    }\n    var number1 = Number(dirtyNumber1);\n    if (isNaN(number1)) {\n        return number1;\n    }\n    return number1 < 0 ? Math.ceil(number1) : Math.floor(number1);\n}\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */ function addMilliseconds(dirtyDate1, dirtyAmount1) {\n    requiredArgs(2, arguments);\n    var timestamp1 = toDate(dirtyDate1).getTime();\n    var amount1 = toInteger(dirtyAmount1);\n    return new Date(timestamp1 + amount1);\n}\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */ function subMilliseconds(dirtyDate1, dirtyAmount1) {\n    requiredArgs(2, arguments);\n    var amount1 = toInteger(dirtyAmount1);\n    return addMilliseconds(dirtyDate1, -amount1);\n}\nvar MILLISECONDS_IN_DAY$1 = 86400000;\nfunction getUTCDayOfYear(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var date1 = toDate(dirtyDate1);\n    var timestamp1 = date1.getTime();\n    date1.setUTCMonth(0, 1);\n    date1.setUTCHours(0, 0, 0, 0);\n    var startOfYearTimestamp1 = date1.getTime();\n    var difference1 = timestamp1 - startOfYearTimestamp1;\n    return Math.floor(difference1 / MILLISECONDS_IN_DAY$1) + 1;\n}\nfunction startOfUTCISOWeek(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var weekStartsOn1 = 1;\n    var date1 = toDate(dirtyDate1);\n    var day1 = date1.getUTCDay();\n    var diff1 = (day1 < weekStartsOn1 ? 7 : 0) + day1 - weekStartsOn1;\n    date1.setUTCDate(date1.getUTCDate() - diff1);\n    date1.setUTCHours(0, 0, 0, 0);\n    return date1;\n}\nfunction getUTCISOWeekYear(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var date1 = toDate(dirtyDate1);\n    var year1 = date1.getUTCFullYear();\n    var fourthOfJanuaryOfNextYear1 = new Date(0);\n    fourthOfJanuaryOfNextYear1.setUTCFullYear(year1 + 1, 0, 4);\n    fourthOfJanuaryOfNextYear1.setUTCHours(0, 0, 0, 0);\n    var startOfNextYear1 = startOfUTCISOWeek(fourthOfJanuaryOfNextYear1);\n    var fourthOfJanuaryOfThisYear1 = new Date(0);\n    fourthOfJanuaryOfThisYear1.setUTCFullYear(year1, 0, 4);\n    fourthOfJanuaryOfThisYear1.setUTCHours(0, 0, 0, 0);\n    var startOfThisYear1 = startOfUTCISOWeek(fourthOfJanuaryOfThisYear1);\n    if (date1.getTime() >= startOfNextYear1.getTime()) {\n        return year1 + 1;\n    } else if (date1.getTime() >= startOfThisYear1.getTime()) {\n        return year1;\n    } else {\n        return year1 - 1;\n    }\n}\nfunction startOfUTCISOWeekYear(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var year1 = getUTCISOWeekYear(dirtyDate1);\n    var fourthOfJanuary1 = new Date(0);\n    fourthOfJanuary1.setUTCFullYear(year1, 0, 4);\n    fourthOfJanuary1.setUTCHours(0, 0, 0, 0);\n    var date1 = startOfUTCISOWeek(fourthOfJanuary1);\n    return date1;\n}\nvar MILLISECONDS_IN_WEEK$2 = 604800000;\nfunction getUTCISOWeek(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var date1 = toDate(dirtyDate1);\n    var diff1 = startOfUTCISOWeek(date1).getTime() - startOfUTCISOWeekYear(date1).getTime();\n    // Round the number of days to the nearest integer\n    // because the number of milliseconds in a week is not constant\n    // (e.g. it's different in the week of the daylight saving time clock shift)\n    return Math.round(diff1 / MILLISECONDS_IN_WEEK$2) + 1;\n}\nvar defaultOptions = {};\nfunction getDefaultOptions() {\n    return defaultOptions;\n}\nfunction startOfUTCWeek(dirtyDate1, options1) {\n    var _ref1, _ref21, _ref31, _options$weekStartsOn1, _options$locale1, _options$locale$optio1, _defaultOptions$local1, _defaultOptions$local21;\n    requiredArgs(1, arguments);\n    var defaultOptions1 = getDefaultOptions();\n    var weekStartsOn1 = toInteger((_ref1 = (_ref21 = (_ref31 = (_options$weekStartsOn1 = options1 === null || options1 === void 0 ? void 0 : options1.weekStartsOn) !== null && _options$weekStartsOn1 !== void 0 ? _options$weekStartsOn1 : options1 === null || options1 === void 0 ? void 0 : (_options$locale1 = options1.locale) === null || _options$locale1 === void 0 ? void 0 : (_options$locale$optio1 = _options$locale1.options) === null || _options$locale$optio1 === void 0 ? void 0 : _options$locale$optio1.weekStartsOn) !== null && _ref31 !== void 0 ? _ref31 : defaultOptions1.weekStartsOn) !== null && _ref21 !== void 0 ? _ref21 : (_defaultOptions$local1 = defaultOptions1.locale) === null || _defaultOptions$local1 === void 0 ? void 0 : (_defaultOptions$local21 = _defaultOptions$local1.options) === null || _defaultOptions$local21 === void 0 ? void 0 : _defaultOptions$local21.weekStartsOn) !== null && _ref1 !== void 0 ? _ref1 : 0);\n    // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n    if (!(weekStartsOn1 >= 0 && weekStartsOn1 <= 6)) {\n        throw new RangeError(\"weekStartsOn must be between 0 and 6 inclusively\");\n    }\n    var date1 = toDate(dirtyDate1);\n    var day1 = date1.getUTCDay();\n    var diff1 = (day1 < weekStartsOn1 ? 7 : 0) + day1 - weekStartsOn1;\n    date1.setUTCDate(date1.getUTCDate() - diff1);\n    date1.setUTCHours(0, 0, 0, 0);\n    return date1;\n}\nfunction getUTCWeekYear(dirtyDate1, options1) {\n    var _ref1, _ref21, _ref31, _options$firstWeekCon1, _options$locale1, _options$locale$optio1, _defaultOptions$local1, _defaultOptions$local21;\n    requiredArgs(1, arguments);\n    var date1 = toDate(dirtyDate1);\n    var year1 = date1.getUTCFullYear();\n    var defaultOptions1 = getDefaultOptions();\n    var firstWeekContainsDate1 = toInteger((_ref1 = (_ref21 = (_ref31 = (_options$firstWeekCon1 = options1 === null || options1 === void 0 ? void 0 : options1.firstWeekContainsDate) !== null && _options$firstWeekCon1 !== void 0 ? _options$firstWeekCon1 : options1 === null || options1 === void 0 ? void 0 : (_options$locale1 = options1.locale) === null || _options$locale1 === void 0 ? void 0 : (_options$locale$optio1 = _options$locale1.options) === null || _options$locale$optio1 === void 0 ? void 0 : _options$locale$optio1.firstWeekContainsDate) !== null && _ref31 !== void 0 ? _ref31 : defaultOptions1.firstWeekContainsDate) !== null && _ref21 !== void 0 ? _ref21 : (_defaultOptions$local1 = defaultOptions1.locale) === null || _defaultOptions$local1 === void 0 ? void 0 : (_defaultOptions$local21 = _defaultOptions$local1.options) === null || _defaultOptions$local21 === void 0 ? void 0 : _defaultOptions$local21.firstWeekContainsDate) !== null && _ref1 !== void 0 ? _ref1 : 1);\n    // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n    if (!(firstWeekContainsDate1 >= 1 && firstWeekContainsDate1 <= 7)) {\n        throw new RangeError(\"firstWeekContainsDate must be between 1 and 7 inclusively\");\n    }\n    var firstWeekOfNextYear1 = new Date(0);\n    firstWeekOfNextYear1.setUTCFullYear(year1 + 1, 0, firstWeekContainsDate1);\n    firstWeekOfNextYear1.setUTCHours(0, 0, 0, 0);\n    var startOfNextYear1 = startOfUTCWeek(firstWeekOfNextYear1, options1);\n    var firstWeekOfThisYear1 = new Date(0);\n    firstWeekOfThisYear1.setUTCFullYear(year1, 0, firstWeekContainsDate1);\n    firstWeekOfThisYear1.setUTCHours(0, 0, 0, 0);\n    var startOfThisYear1 = startOfUTCWeek(firstWeekOfThisYear1, options1);\n    if (date1.getTime() >= startOfNextYear1.getTime()) {\n        return year1 + 1;\n    } else if (date1.getTime() >= startOfThisYear1.getTime()) {\n        return year1;\n    } else {\n        return year1 - 1;\n    }\n}\nfunction startOfUTCWeekYear(dirtyDate1, options1) {\n    var _ref1, _ref21, _ref31, _options$firstWeekCon1, _options$locale1, _options$locale$optio1, _defaultOptions$local1, _defaultOptions$local21;\n    requiredArgs(1, arguments);\n    var defaultOptions1 = getDefaultOptions();\n    var firstWeekContainsDate1 = toInteger((_ref1 = (_ref21 = (_ref31 = (_options$firstWeekCon1 = options1 === null || options1 === void 0 ? void 0 : options1.firstWeekContainsDate) !== null && _options$firstWeekCon1 !== void 0 ? _options$firstWeekCon1 : options1 === null || options1 === void 0 ? void 0 : (_options$locale1 = options1.locale) === null || _options$locale1 === void 0 ? void 0 : (_options$locale$optio1 = _options$locale1.options) === null || _options$locale$optio1 === void 0 ? void 0 : _options$locale$optio1.firstWeekContainsDate) !== null && _ref31 !== void 0 ? _ref31 : defaultOptions1.firstWeekContainsDate) !== null && _ref21 !== void 0 ? _ref21 : (_defaultOptions$local1 = defaultOptions1.locale) === null || _defaultOptions$local1 === void 0 ? void 0 : (_defaultOptions$local21 = _defaultOptions$local1.options) === null || _defaultOptions$local21 === void 0 ? void 0 : _defaultOptions$local21.firstWeekContainsDate) !== null && _ref1 !== void 0 ? _ref1 : 1);\n    var year1 = getUTCWeekYear(dirtyDate1, options1);\n    var firstWeek1 = new Date(0);\n    firstWeek1.setUTCFullYear(year1, 0, firstWeekContainsDate1);\n    firstWeek1.setUTCHours(0, 0, 0, 0);\n    var date1 = startOfUTCWeek(firstWeek1, options1);\n    return date1;\n}\nvar MILLISECONDS_IN_WEEK$1 = 604800000;\nfunction getUTCWeek(dirtyDate1, options1) {\n    requiredArgs(1, arguments);\n    var date1 = toDate(dirtyDate1);\n    var diff1 = startOfUTCWeek(date1, options1).getTime() - startOfUTCWeekYear(date1, options1).getTime();\n    // Round the number of days to the nearest integer\n    // because the number of milliseconds in a week is not constant\n    // (e.g. it's different in the week of the daylight saving time clock shift)\n    return Math.round(diff1 / MILLISECONDS_IN_WEEK$1) + 1;\n}\nfunction addLeadingZeros(number1, targetLength1) {\n    var sign1 = number1 < 0 ? \"-\" : \"\";\n    var output1 = Math.abs(number1).toString();\n    while(output1.length < targetLength1){\n        output1 = \"0\" + output1;\n    }\n    return sign1 + output1;\n}\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */ var formatters$1 = {\n    // Year\n    y: function y1(date1, token1) {\n        // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n        // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n        // |----------|-------|----|-------|-------|-------|\n        // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n        // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n        // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n        // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n        // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n        var signedYear1 = date1.getUTCFullYear();\n        // Returns 1 for 1 BC (which is year 0 in JavaScript)\n        var year1 = signedYear1 > 0 ? signedYear1 : 1 - signedYear1;\n        return addLeadingZeros(token1 === \"yy\" ? year1 % 100 : year1, token1.length);\n    },\n    // Month\n    M: function M1(date1, token1) {\n        var month1 = date1.getUTCMonth();\n        return token1 === \"M\" ? String(month1 + 1) : addLeadingZeros(month1 + 1, 2);\n    },\n    // Day of the month\n    d: function d1(date1, token1) {\n        return addLeadingZeros(date1.getUTCDate(), token1.length);\n    },\n    // AM or PM\n    a: function a1(date1, token1) {\n        var dayPeriodEnumValue1 = date1.getUTCHours() / 12 >= 1 ? \"pm\" : \"am\";\n        switch(token1){\n            case \"a\":\n            case \"aa\":\n                return dayPeriodEnumValue1.toUpperCase();\n            case \"aaa\":\n                return dayPeriodEnumValue1;\n            case \"aaaaa\":\n                return dayPeriodEnumValue1[0];\n            case \"aaaa\":\n            default:\n                return dayPeriodEnumValue1 === \"am\" ? \"a.m.\" : \"p.m.\";\n        }\n    },\n    // Hour [1-12]\n    h: function h1(date1, token1) {\n        return addLeadingZeros(date1.getUTCHours() % 12 || 12, token1.length);\n    },\n    // Hour [0-23]\n    H: function H1(date1, token1) {\n        return addLeadingZeros(date1.getUTCHours(), token1.length);\n    },\n    // Minute\n    m: function m1(date1, token1) {\n        return addLeadingZeros(date1.getUTCMinutes(), token1.length);\n    },\n    // Second\n    s: function s1(date1, token1) {\n        return addLeadingZeros(date1.getUTCSeconds(), token1.length);\n    },\n    // Fraction of second\n    S: function S1(date1, token1) {\n        var numberOfDigits1 = token1.length;\n        var milliseconds1 = date1.getUTCMilliseconds();\n        var fractionalSeconds1 = Math.floor(milliseconds1 * Math.pow(10, numberOfDigits1 - 3));\n        return addLeadingZeros(fractionalSeconds1, token1.length);\n    }\n};\nvar dayPeriodEnum = {\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\"\n};\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */ var formatters = {\n    // Era\n    G: function G1(date1, token1, localize1) {\n        var era1 = date1.getUTCFullYear() > 0 ? 1 : 0;\n        switch(token1){\n            // AD, BC\n            case \"G\":\n            case \"GG\":\n            case \"GGG\":\n                return localize1.era(era1, {\n                    width: \"abbreviated\"\n                });\n            // A, B\n            case \"GGGGG\":\n                return localize1.era(era1, {\n                    width: \"narrow\"\n                });\n            // Anno Domini, Before Christ\n            case \"GGGG\":\n            default:\n                return localize1.era(era1, {\n                    width: \"wide\"\n                });\n        }\n    },\n    // Year\n    y: function y1(date1, token1, localize1) {\n        // Ordinal number\n        if (token1 === \"yo\") {\n            var signedYear1 = date1.getUTCFullYear();\n            // Returns 1 for 1 BC (which is year 0 in JavaScript)\n            var year1 = signedYear1 > 0 ? signedYear1 : 1 - signedYear1;\n            return localize1.ordinalNumber(year1, {\n                unit: \"year\"\n            });\n        }\n        return formatters$1.y(date1, token1);\n    },\n    // Local week-numbering year\n    Y: function Y1(date1, token1, localize1, options1) {\n        var signedWeekYear1 = getUTCWeekYear(date1, options1);\n        // Returns 1 for 1 BC (which is year 0 in JavaScript)\n        var weekYear1 = signedWeekYear1 > 0 ? signedWeekYear1 : 1 - signedWeekYear1;\n        // Two digit year\n        if (token1 === \"YY\") {\n            var twoDigitYear1 = weekYear1 % 100;\n            return addLeadingZeros(twoDigitYear1, 2);\n        }\n        // Ordinal number\n        if (token1 === \"Yo\") {\n            return localize1.ordinalNumber(weekYear1, {\n                unit: \"year\"\n            });\n        }\n        // Padding\n        return addLeadingZeros(weekYear1, token1.length);\n    },\n    // ISO week-numbering year\n    R: function R1(date1, token1) {\n        var isoWeekYear1 = getUTCISOWeekYear(date1);\n        // Padding\n        return addLeadingZeros(isoWeekYear1, token1.length);\n    },\n    // Extended year. This is a single number designating the year of this calendar system.\n    // The main difference between `y` and `u` localizers are B.C. years:\n    // | Year | `y` | `u` |\n    // |------|-----|-----|\n    // | AC 1 |   1 |   1 |\n    // | BC 1 |   1 |   0 |\n    // | BC 2 |   2 |  -1 |\n    // Also `yy` always returns the last two digits of a year,\n    // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n    u: function u1(date1, token1) {\n        var year1 = date1.getUTCFullYear();\n        return addLeadingZeros(year1, token1.length);\n    },\n    // Quarter\n    Q: function Q1(date1, token1, localize1) {\n        var quarter1 = Math.ceil((date1.getUTCMonth() + 1) / 3);\n        switch(token1){\n            // 1, 2, 3, 4\n            case \"Q\":\n                return String(quarter1);\n            // 01, 02, 03, 04\n            case \"QQ\":\n                return addLeadingZeros(quarter1, 2);\n            // 1st, 2nd, 3rd, 4th\n            case \"Qo\":\n                return localize1.ordinalNumber(quarter1, {\n                    unit: \"quarter\"\n                });\n            // Q1, Q2, Q3, Q4\n            case \"QQQ\":\n                return localize1.quarter(quarter1, {\n                    width: \"abbreviated\",\n                    context: \"formatting\"\n                });\n            // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n            case \"QQQQQ\":\n                return localize1.quarter(quarter1, {\n                    width: \"narrow\",\n                    context: \"formatting\"\n                });\n            // 1st quarter, 2nd quarter, ...\n            case \"QQQQ\":\n            default:\n                return localize1.quarter(quarter1, {\n                    width: \"wide\",\n                    context: \"formatting\"\n                });\n        }\n    },\n    // Stand-alone quarter\n    q: function q1(date1, token1, localize1) {\n        var quarter1 = Math.ceil((date1.getUTCMonth() + 1) / 3);\n        switch(token1){\n            // 1, 2, 3, 4\n            case \"q\":\n                return String(quarter1);\n            // 01, 02, 03, 04\n            case \"qq\":\n                return addLeadingZeros(quarter1, 2);\n            // 1st, 2nd, 3rd, 4th\n            case \"qo\":\n                return localize1.ordinalNumber(quarter1, {\n                    unit: \"quarter\"\n                });\n            // Q1, Q2, Q3, Q4\n            case \"qqq\":\n                return localize1.quarter(quarter1, {\n                    width: \"abbreviated\",\n                    context: \"standalone\"\n                });\n            // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n            case \"qqqqq\":\n                return localize1.quarter(quarter1, {\n                    width: \"narrow\",\n                    context: \"standalone\"\n                });\n            // 1st quarter, 2nd quarter, ...\n            case \"qqqq\":\n            default:\n                return localize1.quarter(quarter1, {\n                    width: \"wide\",\n                    context: \"standalone\"\n                });\n        }\n    },\n    // Month\n    M: function M1(date1, token1, localize1) {\n        var month1 = date1.getUTCMonth();\n        switch(token1){\n            case \"M\":\n            case \"MM\":\n                return formatters$1.M(date1, token1);\n            // 1st, 2nd, ..., 12th\n            case \"Mo\":\n                return localize1.ordinalNumber(month1 + 1, {\n                    unit: \"month\"\n                });\n            // Jan, Feb, ..., Dec\n            case \"MMM\":\n                return localize1.month(month1, {\n                    width: \"abbreviated\",\n                    context: \"formatting\"\n                });\n            // J, F, ..., D\n            case \"MMMMM\":\n                return localize1.month(month1, {\n                    width: \"narrow\",\n                    context: \"formatting\"\n                });\n            // January, February, ..., December\n            case \"MMMM\":\n            default:\n                return localize1.month(month1, {\n                    width: \"wide\",\n                    context: \"formatting\"\n                });\n        }\n    },\n    // Stand-alone month\n    L: function L1(date1, token1, localize1) {\n        var month1 = date1.getUTCMonth();\n        switch(token1){\n            // 1, 2, ..., 12\n            case \"L\":\n                return String(month1 + 1);\n            // 01, 02, ..., 12\n            case \"LL\":\n                return addLeadingZeros(month1 + 1, 2);\n            // 1st, 2nd, ..., 12th\n            case \"Lo\":\n                return localize1.ordinalNumber(month1 + 1, {\n                    unit: \"month\"\n                });\n            // Jan, Feb, ..., Dec\n            case \"LLL\":\n                return localize1.month(month1, {\n                    width: \"abbreviated\",\n                    context: \"standalone\"\n                });\n            // J, F, ..., D\n            case \"LLLLL\":\n                return localize1.month(month1, {\n                    width: \"narrow\",\n                    context: \"standalone\"\n                });\n            // January, February, ..., December\n            case \"LLLL\":\n            default:\n                return localize1.month(month1, {\n                    width: \"wide\",\n                    context: \"standalone\"\n                });\n        }\n    },\n    // Local week of year\n    w: function w1(date1, token1, localize1, options1) {\n        var week1 = getUTCWeek(date1, options1);\n        if (token1 === \"wo\") {\n            return localize1.ordinalNumber(week1, {\n                unit: \"week\"\n            });\n        }\n        return addLeadingZeros(week1, token1.length);\n    },\n    // ISO week of year\n    I: function I1(date1, token1, localize1) {\n        var isoWeek1 = getUTCISOWeek(date1);\n        if (token1 === \"Io\") {\n            return localize1.ordinalNumber(isoWeek1, {\n                unit: \"week\"\n            });\n        }\n        return addLeadingZeros(isoWeek1, token1.length);\n    },\n    // Day of the month\n    d: function d1(date1, token1, localize1) {\n        if (token1 === \"do\") {\n            return localize1.ordinalNumber(date1.getUTCDate(), {\n                unit: \"date\"\n            });\n        }\n        return formatters$1.d(date1, token1);\n    },\n    // Day of year\n    D: function D1(date1, token1, localize1) {\n        var dayOfYear1 = getUTCDayOfYear(date1);\n        if (token1 === \"Do\") {\n            return localize1.ordinalNumber(dayOfYear1, {\n                unit: \"dayOfYear\"\n            });\n        }\n        return addLeadingZeros(dayOfYear1, token1.length);\n    },\n    // Day of week\n    E: function E1(date1, token1, localize1) {\n        var dayOfWeek1 = date1.getUTCDay();\n        switch(token1){\n            // Tue\n            case \"E\":\n            case \"EE\":\n            case \"EEE\":\n                return localize1.day(dayOfWeek1, {\n                    width: \"abbreviated\",\n                    context: \"formatting\"\n                });\n            // T\n            case \"EEEEE\":\n                return localize1.day(dayOfWeek1, {\n                    width: \"narrow\",\n                    context: \"formatting\"\n                });\n            // Tu\n            case \"EEEEEE\":\n                return localize1.day(dayOfWeek1, {\n                    width: \"short\",\n                    context: \"formatting\"\n                });\n            // Tuesday\n            case \"EEEE\":\n            default:\n                return localize1.day(dayOfWeek1, {\n                    width: \"wide\",\n                    context: \"formatting\"\n                });\n        }\n    },\n    // Local day of week\n    e: function e1(date1, token1, localize1, options1) {\n        var dayOfWeek1 = date1.getUTCDay();\n        var localDayOfWeek1 = (dayOfWeek1 - options1.weekStartsOn + 8) % 7 || 7;\n        switch(token1){\n            // Numerical value (Nth day of week with current locale or weekStartsOn)\n            case \"e\":\n                return String(localDayOfWeek1);\n            // Padded numerical value\n            case \"ee\":\n                return addLeadingZeros(localDayOfWeek1, 2);\n            // 1st, 2nd, ..., 7th\n            case \"eo\":\n                return localize1.ordinalNumber(localDayOfWeek1, {\n                    unit: \"day\"\n                });\n            case \"eee\":\n                return localize1.day(dayOfWeek1, {\n                    width: \"abbreviated\",\n                    context: \"formatting\"\n                });\n            // T\n            case \"eeeee\":\n                return localize1.day(dayOfWeek1, {\n                    width: \"narrow\",\n                    context: \"formatting\"\n                });\n            // Tu\n            case \"eeeeee\":\n                return localize1.day(dayOfWeek1, {\n                    width: \"short\",\n                    context: \"formatting\"\n                });\n            // Tuesday\n            case \"eeee\":\n            default:\n                return localize1.day(dayOfWeek1, {\n                    width: \"wide\",\n                    context: \"formatting\"\n                });\n        }\n    },\n    // Stand-alone local day of week\n    c: function c1(date1, token1, localize1, options1) {\n        var dayOfWeek1 = date1.getUTCDay();\n        var localDayOfWeek1 = (dayOfWeek1 - options1.weekStartsOn + 8) % 7 || 7;\n        switch(token1){\n            // Numerical value (same as in `e`)\n            case \"c\":\n                return String(localDayOfWeek1);\n            // Padded numerical value\n            case \"cc\":\n                return addLeadingZeros(localDayOfWeek1, token1.length);\n            // 1st, 2nd, ..., 7th\n            case \"co\":\n                return localize1.ordinalNumber(localDayOfWeek1, {\n                    unit: \"day\"\n                });\n            case \"ccc\":\n                return localize1.day(dayOfWeek1, {\n                    width: \"abbreviated\",\n                    context: \"standalone\"\n                });\n            // T\n            case \"ccccc\":\n                return localize1.day(dayOfWeek1, {\n                    width: \"narrow\",\n                    context: \"standalone\"\n                });\n            // Tu\n            case \"cccccc\":\n                return localize1.day(dayOfWeek1, {\n                    width: \"short\",\n                    context: \"standalone\"\n                });\n            // Tuesday\n            case \"cccc\":\n            default:\n                return localize1.day(dayOfWeek1, {\n                    width: \"wide\",\n                    context: \"standalone\"\n                });\n        }\n    },\n    // ISO day of week\n    i: function i1(date1, token1, localize1) {\n        var dayOfWeek1 = date1.getUTCDay();\n        var isoDayOfWeek1 = dayOfWeek1 === 0 ? 7 : dayOfWeek1;\n        switch(token1){\n            // 2\n            case \"i\":\n                return String(isoDayOfWeek1);\n            // 02\n            case \"ii\":\n                return addLeadingZeros(isoDayOfWeek1, token1.length);\n            // 2nd\n            case \"io\":\n                return localize1.ordinalNumber(isoDayOfWeek1, {\n                    unit: \"day\"\n                });\n            // Tue\n            case \"iii\":\n                return localize1.day(dayOfWeek1, {\n                    width: \"abbreviated\",\n                    context: \"formatting\"\n                });\n            // T\n            case \"iiiii\":\n                return localize1.day(dayOfWeek1, {\n                    width: \"narrow\",\n                    context: \"formatting\"\n                });\n            // Tu\n            case \"iiiiii\":\n                return localize1.day(dayOfWeek1, {\n                    width: \"short\",\n                    context: \"formatting\"\n                });\n            // Tuesday\n            case \"iiii\":\n            default:\n                return localize1.day(dayOfWeek1, {\n                    width: \"wide\",\n                    context: \"formatting\"\n                });\n        }\n    },\n    // AM or PM\n    a: function a1(date1, token1, localize1) {\n        var hours1 = date1.getUTCHours();\n        var dayPeriodEnumValue1 = hours1 / 12 >= 1 ? \"pm\" : \"am\";\n        switch(token1){\n            case \"a\":\n            case \"aa\":\n                return localize1.dayPeriod(dayPeriodEnumValue1, {\n                    width: \"abbreviated\",\n                    context: \"formatting\"\n                });\n            case \"aaa\":\n                return localize1.dayPeriod(dayPeriodEnumValue1, {\n                    width: \"abbreviated\",\n                    context: \"formatting\"\n                }).toLowerCase();\n            case \"aaaaa\":\n                return localize1.dayPeriod(dayPeriodEnumValue1, {\n                    width: \"narrow\",\n                    context: \"formatting\"\n                });\n            case \"aaaa\":\n            default:\n                return localize1.dayPeriod(dayPeriodEnumValue1, {\n                    width: \"wide\",\n                    context: \"formatting\"\n                });\n        }\n    },\n    // AM, PM, midnight, noon\n    b: function b1(date1, token1, localize1) {\n        var hours1 = date1.getUTCHours();\n        var dayPeriodEnumValue1;\n        if (hours1 === 12) {\n            dayPeriodEnumValue1 = dayPeriodEnum.noon;\n        } else if (hours1 === 0) {\n            dayPeriodEnumValue1 = dayPeriodEnum.midnight;\n        } else {\n            dayPeriodEnumValue1 = hours1 / 12 >= 1 ? \"pm\" : \"am\";\n        }\n        switch(token1){\n            case \"b\":\n            case \"bb\":\n                return localize1.dayPeriod(dayPeriodEnumValue1, {\n                    width: \"abbreviated\",\n                    context: \"formatting\"\n                });\n            case \"bbb\":\n                return localize1.dayPeriod(dayPeriodEnumValue1, {\n                    width: \"abbreviated\",\n                    context: \"formatting\"\n                }).toLowerCase();\n            case \"bbbbb\":\n                return localize1.dayPeriod(dayPeriodEnumValue1, {\n                    width: \"narrow\",\n                    context: \"formatting\"\n                });\n            case \"bbbb\":\n            default:\n                return localize1.dayPeriod(dayPeriodEnumValue1, {\n                    width: \"wide\",\n                    context: \"formatting\"\n                });\n        }\n    },\n    // in the morning, in the afternoon, in the evening, at night\n    B: function B1(date1, token1, localize1) {\n        var hours1 = date1.getUTCHours();\n        var dayPeriodEnumValue1;\n        if (hours1 >= 17) {\n            dayPeriodEnumValue1 = dayPeriodEnum.evening;\n        } else if (hours1 >= 12) {\n            dayPeriodEnumValue1 = dayPeriodEnum.afternoon;\n        } else if (hours1 >= 4) {\n            dayPeriodEnumValue1 = dayPeriodEnum.morning;\n        } else {\n            dayPeriodEnumValue1 = dayPeriodEnum.night;\n        }\n        switch(token1){\n            case \"B\":\n            case \"BB\":\n            case \"BBB\":\n                return localize1.dayPeriod(dayPeriodEnumValue1, {\n                    width: \"abbreviated\",\n                    context: \"formatting\"\n                });\n            case \"BBBBB\":\n                return localize1.dayPeriod(dayPeriodEnumValue1, {\n                    width: \"narrow\",\n                    context: \"formatting\"\n                });\n            case \"BBBB\":\n            default:\n                return localize1.dayPeriod(dayPeriodEnumValue1, {\n                    width: \"wide\",\n                    context: \"formatting\"\n                });\n        }\n    },\n    // Hour [1-12]\n    h: function h1(date1, token1, localize1) {\n        if (token1 === \"ho\") {\n            var hours1 = date1.getUTCHours() % 12;\n            if (hours1 === 0) hours1 = 12;\n            return localize1.ordinalNumber(hours1, {\n                unit: \"hour\"\n            });\n        }\n        return formatters$1.h(date1, token1);\n    },\n    // Hour [0-23]\n    H: function H1(date1, token1, localize1) {\n        if (token1 === \"Ho\") {\n            return localize1.ordinalNumber(date1.getUTCHours(), {\n                unit: \"hour\"\n            });\n        }\n        return formatters$1.H(date1, token1);\n    },\n    // Hour [0-11]\n    K: function K1(date1, token1, localize1) {\n        var hours1 = date1.getUTCHours() % 12;\n        if (token1 === \"Ko\") {\n            return localize1.ordinalNumber(hours1, {\n                unit: \"hour\"\n            });\n        }\n        return addLeadingZeros(hours1, token1.length);\n    },\n    // Hour [1-24]\n    k: function k1(date1, token1, localize1) {\n        var hours1 = date1.getUTCHours();\n        if (hours1 === 0) hours1 = 24;\n        if (token1 === \"ko\") {\n            return localize1.ordinalNumber(hours1, {\n                unit: \"hour\"\n            });\n        }\n        return addLeadingZeros(hours1, token1.length);\n    },\n    // Minute\n    m: function m1(date1, token1, localize1) {\n        if (token1 === \"mo\") {\n            return localize1.ordinalNumber(date1.getUTCMinutes(), {\n                unit: \"minute\"\n            });\n        }\n        return formatters$1.m(date1, token1);\n    },\n    // Second\n    s: function s1(date1, token1, localize1) {\n        if (token1 === \"so\") {\n            return localize1.ordinalNumber(date1.getUTCSeconds(), {\n                unit: \"second\"\n            });\n        }\n        return formatters$1.s(date1, token1);\n    },\n    // Fraction of second\n    S: function S1(date1, token1) {\n        return formatters$1.S(date1, token1);\n    },\n    // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n    X: function X1(date1, token1, _localize1, options1) {\n        var originalDate1 = options1._originalDate || date1;\n        var timezoneOffset1 = originalDate1.getTimezoneOffset();\n        if (timezoneOffset1 === 0) {\n            return \"Z\";\n        }\n        switch(token1){\n            // Hours and optional minutes\n            case \"X\":\n                return formatTimezoneWithOptionalMinutes(timezoneOffset1);\n            // Hours, minutes and optional seconds without `:` delimiter\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n            // so this token always has the same output as `XX`\n            case \"XXXX\":\n            case \"XX\":\n                // Hours and minutes without `:` delimiter\n                return formatTimezone(timezoneOffset1);\n            // Hours, minutes and optional seconds with `:` delimiter\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n            // so this token always has the same output as `XXX`\n            case \"XXXXX\":\n            case \"XXX\":\n            default:\n                return formatTimezone(timezoneOffset1, \":\");\n        }\n    },\n    // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n    x: function x1(date1, token1, _localize1, options1) {\n        var originalDate1 = options1._originalDate || date1;\n        var timezoneOffset1 = originalDate1.getTimezoneOffset();\n        switch(token1){\n            // Hours and optional minutes\n            case \"x\":\n                return formatTimezoneWithOptionalMinutes(timezoneOffset1);\n            // Hours, minutes and optional seconds without `:` delimiter\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n            // so this token always has the same output as `xx`\n            case \"xxxx\":\n            case \"xx\":\n                // Hours and minutes without `:` delimiter\n                return formatTimezone(timezoneOffset1);\n            // Hours, minutes and optional seconds with `:` delimiter\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n            // so this token always has the same output as `xxx`\n            case \"xxxxx\":\n            case \"xxx\":\n            default:\n                return formatTimezone(timezoneOffset1, \":\");\n        }\n    },\n    // Timezone (GMT)\n    O: function O1(date1, token1, _localize1, options1) {\n        var originalDate1 = options1._originalDate || date1;\n        var timezoneOffset1 = originalDate1.getTimezoneOffset();\n        switch(token1){\n            // Short\n            case \"O\":\n            case \"OO\":\n            case \"OOO\":\n                return \"GMT\" + formatTimezoneShort(timezoneOffset1, \":\");\n            // Long\n            case \"OOOO\":\n            default:\n                return \"GMT\" + formatTimezone(timezoneOffset1, \":\");\n        }\n    },\n    // Timezone (specific non-location)\n    z: function z1(date1, token1, _localize1, options1) {\n        var originalDate1 = options1._originalDate || date1;\n        var timezoneOffset1 = originalDate1.getTimezoneOffset();\n        switch(token1){\n            // Short\n            case \"z\":\n            case \"zz\":\n            case \"zzz\":\n                return \"GMT\" + formatTimezoneShort(timezoneOffset1, \":\");\n            // Long\n            case \"zzzz\":\n            default:\n                return \"GMT\" + formatTimezone(timezoneOffset1, \":\");\n        }\n    },\n    // Seconds timestamp\n    t: function t1(date1, token1, _localize1, options1) {\n        var originalDate1 = options1._originalDate || date1;\n        var timestamp1 = Math.floor(originalDate1.getTime() / 1000);\n        return addLeadingZeros(timestamp1, token1.length);\n    },\n    // Milliseconds timestamp\n    T: function T1(date1, token1, _localize1, options1) {\n        var originalDate1 = options1._originalDate || date1;\n        var timestamp1 = originalDate1.getTime();\n        return addLeadingZeros(timestamp1, token1.length);\n    }\n};\nfunction formatTimezoneShort(offset1, dirtyDelimiter1) {\n    var sign1 = offset1 > 0 ? \"-\" : \"+\";\n    var absOffset1 = Math.abs(offset1);\n    var hours1 = Math.floor(absOffset1 / 60);\n    var minutes1 = absOffset1 % 60;\n    if (minutes1 === 0) {\n        return sign1 + String(hours1);\n    }\n    var delimiter1 = dirtyDelimiter1;\n    return sign1 + String(hours1) + delimiter1 + addLeadingZeros(minutes1, 2);\n}\nfunction formatTimezoneWithOptionalMinutes(offset1, dirtyDelimiter1) {\n    if (offset1 % 60 === 0) {\n        var sign1 = offset1 > 0 ? \"-\" : \"+\";\n        return sign1 + addLeadingZeros(Math.abs(offset1) / 60, 2);\n    }\n    return formatTimezone(offset1, dirtyDelimiter1);\n}\nfunction formatTimezone(offset1, dirtyDelimiter1) {\n    var delimiter1 = dirtyDelimiter1 || \"\";\n    var sign1 = offset1 > 0 ? \"-\" : \"+\";\n    var absOffset1 = Math.abs(offset1);\n    var hours1 = addLeadingZeros(Math.floor(absOffset1 / 60), 2);\n    var minutes1 = addLeadingZeros(absOffset1 % 60, 2);\n    return sign1 + hours1 + delimiter1 + minutes1;\n}\nvar dateLongFormatter = function dateLongFormatter1(pattern1, formatLong1) {\n    switch(pattern1){\n        case \"P\":\n            return formatLong1.date({\n                width: \"short\"\n            });\n        case \"PP\":\n            return formatLong1.date({\n                width: \"medium\"\n            });\n        case \"PPP\":\n            return formatLong1.date({\n                width: \"long\"\n            });\n        case \"PPPP\":\n        default:\n            return formatLong1.date({\n                width: \"full\"\n            });\n    }\n};\nvar timeLongFormatter = function timeLongFormatter1(pattern1, formatLong1) {\n    switch(pattern1){\n        case \"p\":\n            return formatLong1.time({\n                width: \"short\"\n            });\n        case \"pp\":\n            return formatLong1.time({\n                width: \"medium\"\n            });\n        case \"ppp\":\n            return formatLong1.time({\n                width: \"long\"\n            });\n        case \"pppp\":\n        default:\n            return formatLong1.time({\n                width: \"full\"\n            });\n    }\n};\nvar dateTimeLongFormatter = function dateTimeLongFormatter1(pattern1, formatLong1) {\n    var matchResult1 = pattern1.match(/(P+)(p+)?/) || [];\n    var datePattern1 = matchResult1[1];\n    var timePattern1 = matchResult1[2];\n    if (!timePattern1) {\n        return dateLongFormatter(pattern1, formatLong1);\n    }\n    var dateTimeFormat1;\n    switch(datePattern1){\n        case \"P\":\n            dateTimeFormat1 = formatLong1.dateTime({\n                width: \"short\"\n            });\n            break;\n        case \"PP\":\n            dateTimeFormat1 = formatLong1.dateTime({\n                width: \"medium\"\n            });\n            break;\n        case \"PPP\":\n            dateTimeFormat1 = formatLong1.dateTime({\n                width: \"long\"\n            });\n            break;\n        case \"PPPP\":\n        default:\n            dateTimeFormat1 = formatLong1.dateTime({\n                width: \"full\"\n            });\n            break;\n    }\n    return dateTimeFormat1.replace(\"{{date}}\", dateLongFormatter(datePattern1, formatLong1)).replace(\"{{time}}\", timeLongFormatter(timePattern1, formatLong1));\n};\nvar longFormatters = {\n    p: timeLongFormatter,\n    P: dateTimeLongFormatter\n};\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */ function getTimezoneOffsetInMilliseconds(date1) {\n    var utcDate1 = new Date(Date.UTC(date1.getFullYear(), date1.getMonth(), date1.getDate(), date1.getHours(), date1.getMinutes(), date1.getSeconds(), date1.getMilliseconds()));\n    utcDate1.setUTCFullYear(date1.getFullYear());\n    return date1.getTime() - utcDate1.getTime();\n}\nvar protectedDayOfYearTokens = [\n    \"D\",\n    \"DD\"\n];\nvar protectedWeekYearTokens = [\n    \"YY\",\n    \"YYYY\"\n];\nfunction isProtectedDayOfYearToken(token1) {\n    return protectedDayOfYearTokens.indexOf(token1) !== -1;\n}\nfunction isProtectedWeekYearToken(token1) {\n    return protectedWeekYearTokens.indexOf(token1) !== -1;\n}\nfunction throwProtectedError(token1, format1, input1) {\n    if (token1 === \"YYYY\") {\n        throw new RangeError(\"Use `yyyy` instead of `YYYY` (in `\".concat(format1, \"`) for formatting years to the input `\").concat(input1, \"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\"));\n    } else if (token1 === \"YY\") {\n        throw new RangeError(\"Use `yy` instead of `YY` (in `\".concat(format1, \"`) for formatting years to the input `\").concat(input1, \"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\"));\n    } else if (token1 === \"D\") {\n        throw new RangeError(\"Use `d` instead of `D` (in `\".concat(format1, \"`) for formatting days of the month to the input `\").concat(input1, \"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\"));\n    } else if (token1 === \"DD\") {\n        throw new RangeError(\"Use `dd` instead of `DD` (in `\".concat(format1, \"`) for formatting days of the month to the input `\").concat(input1, \"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\"));\n    }\n}\nvar formatDistanceLocale = {\n    lessThanXSeconds: {\n        one: \"less than a second\",\n        other: \"less than {{count}} seconds\"\n    },\n    xSeconds: {\n        one: \"1 second\",\n        other: \"{{count}} seconds\"\n    },\n    halfAMinute: \"half a minute\",\n    lessThanXMinutes: {\n        one: \"less than a minute\",\n        other: \"less than {{count}} minutes\"\n    },\n    xMinutes: {\n        one: \"1 minute\",\n        other: \"{{count}} minutes\"\n    },\n    aboutXHours: {\n        one: \"about 1 hour\",\n        other: \"about {{count}} hours\"\n    },\n    xHours: {\n        one: \"1 hour\",\n        other: \"{{count}} hours\"\n    },\n    xDays: {\n        one: \"1 day\",\n        other: \"{{count}} days\"\n    },\n    aboutXWeeks: {\n        one: \"about 1 week\",\n        other: \"about {{count}} weeks\"\n    },\n    xWeeks: {\n        one: \"1 week\",\n        other: \"{{count}} weeks\"\n    },\n    aboutXMonths: {\n        one: \"about 1 month\",\n        other: \"about {{count}} months\"\n    },\n    xMonths: {\n        one: \"1 month\",\n        other: \"{{count}} months\"\n    },\n    aboutXYears: {\n        one: \"about 1 year\",\n        other: \"about {{count}} years\"\n    },\n    xYears: {\n        one: \"1 year\",\n        other: \"{{count}} years\"\n    },\n    overXYears: {\n        one: \"over 1 year\",\n        other: \"over {{count}} years\"\n    },\n    almostXYears: {\n        one: \"almost 1 year\",\n        other: \"almost {{count}} years\"\n    }\n};\nvar formatDistance = function formatDistance1(token1, count1, options1) {\n    var result1;\n    var tokenValue1 = formatDistanceLocale[token1];\n    if (typeof tokenValue1 === \"string\") {\n        result1 = tokenValue1;\n    } else if (count1 === 1) {\n        result1 = tokenValue1.one;\n    } else {\n        result1 = tokenValue1.other.replace(\"{{count}}\", count1.toString());\n    }\n    if (options1 !== null && options1 !== void 0 && options1.addSuffix) {\n        if (options1.comparison && options1.comparison > 0) {\n            return \"in \" + result1;\n        } else {\n            return result1 + \" ago\";\n        }\n    }\n    return result1;\n};\nfunction buildFormatLongFn(args1) {\n    return function() {\n        var options1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        // TODO: Remove String()\n        var width1 = options1.width ? String(options1.width) : args1.defaultWidth;\n        var format1 = args1.formats[width1] || args1.formats[args1.defaultWidth];\n        return format1;\n    };\n}\nvar dateFormats = {\n    full: \"EEEE, MMMM do, y\",\n    long: \"MMMM do, y\",\n    medium: \"MMM d, y\",\n    short: \"MM/dd/yyyy\"\n};\nvar timeFormats = {\n    full: \"h:mm:ss a zzzz\",\n    long: \"h:mm:ss a z\",\n    medium: \"h:mm:ss a\",\n    short: \"h:mm a\"\n};\nvar dateTimeFormats = {\n    full: \"{{date}} 'at' {{time}}\",\n    long: \"{{date}} 'at' {{time}}\",\n    medium: \"{{date}}, {{time}}\",\n    short: \"{{date}}, {{time}}\"\n};\nvar formatLong = {\n    date: buildFormatLongFn({\n        formats: dateFormats,\n        defaultWidth: \"full\"\n    }),\n    time: buildFormatLongFn({\n        formats: timeFormats,\n        defaultWidth: \"full\"\n    }),\n    dateTime: buildFormatLongFn({\n        formats: dateTimeFormats,\n        defaultWidth: \"full\"\n    })\n};\nvar formatRelativeLocale = {\n    lastWeek: \"'last' eeee 'at' p\",\n    yesterday: \"'yesterday at' p\",\n    today: \"'today at' p\",\n    tomorrow: \"'tomorrow at' p\",\n    nextWeek: \"eeee 'at' p\",\n    other: \"P\"\n};\nvar formatRelative = function formatRelative1(token1, _date1, _baseDate1, _options1) {\n    return formatRelativeLocale[token1];\n};\nfunction buildLocalizeFn(args1) {\n    return function(dirtyIndex1, options1) {\n        var context1 = options1 !== null && options1 !== void 0 && options1.context ? String(options1.context) : \"standalone\";\n        var valuesArray1;\n        if (context1 === \"formatting\" && args1.formattingValues) {\n            var defaultWidth1 = args1.defaultFormattingWidth || args1.defaultWidth;\n            var width1 = options1 !== null && options1 !== void 0 && options1.width ? String(options1.width) : defaultWidth1;\n            valuesArray1 = args1.formattingValues[width1] || args1.formattingValues[defaultWidth1];\n        } else {\n            var _defaultWidth1 = args1.defaultWidth;\n            var _width1 = options1 !== null && options1 !== void 0 && options1.width ? String(options1.width) : args1.defaultWidth;\n            valuesArray1 = args1.values[_width1] || args1.values[_defaultWidth1];\n        }\n        var index1 = args1.argumentCallback ? args1.argumentCallback(dirtyIndex1) : dirtyIndex1;\n        // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n        return valuesArray1[index1];\n    };\n}\nvar eraValues = {\n    narrow: [\n        \"B\",\n        \"A\"\n    ],\n    abbreviated: [\n        \"BC\",\n        \"AD\"\n    ],\n    wide: [\n        \"Before Christ\",\n        \"Anno Domini\"\n    ]\n};\nvar quarterValues = {\n    narrow: [\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\"\n    ],\n    abbreviated: [\n        \"Q1\",\n        \"Q2\",\n        \"Q3\",\n        \"Q4\"\n    ],\n    wide: [\n        \"1st quarter\",\n        \"2nd quarter\",\n        \"3rd quarter\",\n        \"4th quarter\"\n    ]\n};\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nvar monthValues = {\n    narrow: [\n        \"J\",\n        \"F\",\n        \"M\",\n        \"A\",\n        \"M\",\n        \"J\",\n        \"J\",\n        \"A\",\n        \"S\",\n        \"O\",\n        \"N\",\n        \"D\"\n    ],\n    abbreviated: [\n        \"Jan\",\n        \"Feb\",\n        \"Mar\",\n        \"Apr\",\n        \"May\",\n        \"Jun\",\n        \"Jul\",\n        \"Aug\",\n        \"Sep\",\n        \"Oct\",\n        \"Nov\",\n        \"Dec\"\n    ],\n    wide: [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\"\n    ]\n};\nvar dayValues = {\n    narrow: [\n        \"S\",\n        \"M\",\n        \"T\",\n        \"W\",\n        \"T\",\n        \"F\",\n        \"S\"\n    ],\n    short: [\n        \"Su\",\n        \"Mo\",\n        \"Tu\",\n        \"We\",\n        \"Th\",\n        \"Fr\",\n        \"Sa\"\n    ],\n    abbreviated: [\n        \"Sun\",\n        \"Mon\",\n        \"Tue\",\n        \"Wed\",\n        \"Thu\",\n        \"Fri\",\n        \"Sat\"\n    ],\n    wide: [\n        \"Sunday\",\n        \"Monday\",\n        \"Tuesday\",\n        \"Wednesday\",\n        \"Thursday\",\n        \"Friday\",\n        \"Saturday\"\n    ]\n};\nvar dayPeriodValues = {\n    narrow: {\n        am: \"a\",\n        pm: \"p\",\n        midnight: \"mi\",\n        noon: \"n\",\n        morning: \"morning\",\n        afternoon: \"afternoon\",\n        evening: \"evening\",\n        night: \"night\"\n    },\n    abbreviated: {\n        am: \"AM\",\n        pm: \"PM\",\n        midnight: \"midnight\",\n        noon: \"noon\",\n        morning: \"morning\",\n        afternoon: \"afternoon\",\n        evening: \"evening\",\n        night: \"night\"\n    },\n    wide: {\n        am: \"a.m.\",\n        pm: \"p.m.\",\n        midnight: \"midnight\",\n        noon: \"noon\",\n        morning: \"morning\",\n        afternoon: \"afternoon\",\n        evening: \"evening\",\n        night: \"night\"\n    }\n};\nvar formattingDayPeriodValues = {\n    narrow: {\n        am: \"a\",\n        pm: \"p\",\n        midnight: \"mi\",\n        noon: \"n\",\n        morning: \"in the morning\",\n        afternoon: \"in the afternoon\",\n        evening: \"in the evening\",\n        night: \"at night\"\n    },\n    abbreviated: {\n        am: \"AM\",\n        pm: \"PM\",\n        midnight: \"midnight\",\n        noon: \"noon\",\n        morning: \"in the morning\",\n        afternoon: \"in the afternoon\",\n        evening: \"in the evening\",\n        night: \"at night\"\n    },\n    wide: {\n        am: \"a.m.\",\n        pm: \"p.m.\",\n        midnight: \"midnight\",\n        noon: \"noon\",\n        morning: \"in the morning\",\n        afternoon: \"in the afternoon\",\n        evening: \"in the evening\",\n        night: \"at night\"\n    }\n};\nvar ordinalNumber = function ordinalNumber1(dirtyNumber1, _options1) {\n    var number1 = Number(dirtyNumber1);\n    // If ordinal numbers depend on context, for example,\n    // if they are different for different grammatical genders,\n    // use `options.unit`.\n    //\n    // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n    // 'day', 'hour', 'minute', 'second'.\n    var rem1001 = number1 % 100;\n    if (rem1001 > 20 || rem1001 < 10) {\n        switch(rem1001 % 10){\n            case 1:\n                return number1 + \"st\";\n            case 2:\n                return number1 + \"nd\";\n            case 3:\n                return number1 + \"rd\";\n        }\n    }\n    return number1 + \"th\";\n};\nvar localize = {\n    ordinalNumber: ordinalNumber,\n    era: buildLocalizeFn({\n        values: eraValues,\n        defaultWidth: \"wide\"\n    }),\n    quarter: buildLocalizeFn({\n        values: quarterValues,\n        defaultWidth: \"wide\",\n        argumentCallback: function argumentCallback1(quarter1) {\n            return quarter1 - 1;\n        }\n    }),\n    month: buildLocalizeFn({\n        values: monthValues,\n        defaultWidth: \"wide\"\n    }),\n    day: buildLocalizeFn({\n        values: dayValues,\n        defaultWidth: \"wide\"\n    }),\n    dayPeriod: buildLocalizeFn({\n        values: dayPeriodValues,\n        defaultWidth: \"wide\",\n        formattingValues: formattingDayPeriodValues,\n        defaultFormattingWidth: \"wide\"\n    })\n};\nfunction buildMatchFn(args1) {\n    return function(string1) {\n        var options1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var width1 = options1.width;\n        var matchPattern1 = width1 && args1.matchPatterns[width1] || args1.matchPatterns[args1.defaultMatchWidth];\n        var matchResult1 = string1.match(matchPattern1);\n        if (!matchResult1) {\n            return null;\n        }\n        var matchedString1 = matchResult1[0];\n        var parsePatterns1 = width1 && args1.parsePatterns[width1] || args1.parsePatterns[args1.defaultParseWidth];\n        var key1 = Array.isArray(parsePatterns1) ? findIndex(parsePatterns1, function(pattern1) {\n            return pattern1.test(matchedString1);\n        }) : findKey(parsePatterns1, function(pattern1) {\n            return pattern1.test(matchedString1);\n        });\n        var value1;\n        value1 = args1.valueCallback ? args1.valueCallback(key1) : key1;\n        value1 = options1.valueCallback ? options1.valueCallback(value1) : value1;\n        var rest1 = string1.slice(matchedString1.length);\n        return {\n            value: value1,\n            rest: rest1\n        };\n    };\n}\nfunction findKey(object1, predicate1) {\n    for(var key1 in object1){\n        if (object1.hasOwnProperty(key1) && predicate1(object1[key1])) {\n            return key1;\n        }\n    }\n    return undefined;\n}\nfunction findIndex(array1, predicate1) {\n    for(var key1 = 0; key1 < array1.length; key1++){\n        if (predicate1(array1[key1])) {\n            return key1;\n        }\n    }\n    return undefined;\n}\nfunction buildMatchPatternFn(args1) {\n    return function(string1) {\n        var options1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var matchResult1 = string1.match(args1.matchPattern);\n        if (!matchResult1) return null;\n        var matchedString1 = matchResult1[0];\n        var parseResult1 = string1.match(args1.parsePattern);\n        if (!parseResult1) return null;\n        var value1 = args1.valueCallback ? args1.valueCallback(parseResult1[0]) : parseResult1[0];\n        value1 = options1.valueCallback ? options1.valueCallback(value1) : value1;\n        var rest1 = string1.slice(matchedString1.length);\n        return {\n            value: value1,\n            rest: rest1\n        };\n    };\n}\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n    narrow: /^(b|a)/i,\n    abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n    wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n    any: [\n        /^b/i,\n        /^(a|c)/i\n    ]\n};\nvar matchQuarterPatterns = {\n    narrow: /^[1234]/i,\n    abbreviated: /^q[1234]/i,\n    wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n    any: [\n        /1/i,\n        /2/i,\n        /3/i,\n        /4/i\n    ]\n};\nvar matchMonthPatterns = {\n    narrow: /^[jfmasond]/i,\n    abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n    wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n    narrow: [\n        /^j/i,\n        /^f/i,\n        /^m/i,\n        /^a/i,\n        /^m/i,\n        /^j/i,\n        /^j/i,\n        /^a/i,\n        /^s/i,\n        /^o/i,\n        /^n/i,\n        /^d/i\n    ],\n    any: [\n        /^ja/i,\n        /^f/i,\n        /^mar/i,\n        /^ap/i,\n        /^may/i,\n        /^jun/i,\n        /^jul/i,\n        /^au/i,\n        /^s/i,\n        /^o/i,\n        /^n/i,\n        /^d/i\n    ]\n};\nvar matchDayPatterns = {\n    narrow: /^[smtwf]/i,\n    short: /^(su|mo|tu|we|th|fr|sa)/i,\n    abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n    wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n    narrow: [\n        /^s/i,\n        /^m/i,\n        /^t/i,\n        /^w/i,\n        /^t/i,\n        /^f/i,\n        /^s/i\n    ],\n    any: [\n        /^su/i,\n        /^m/i,\n        /^tu/i,\n        /^w/i,\n        /^th/i,\n        /^f/i,\n        /^sa/i\n    ]\n};\nvar matchDayPeriodPatterns = {\n    narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n    any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n    any: {\n        am: /^a/i,\n        pm: /^p/i,\n        midnight: /^mi/i,\n        noon: /^no/i,\n        morning: /morning/i,\n        afternoon: /afternoon/i,\n        evening: /evening/i,\n        night: /night/i\n    }\n};\nvar match = {\n    ordinalNumber: buildMatchPatternFn({\n        matchPattern: matchOrdinalNumberPattern,\n        parsePattern: parseOrdinalNumberPattern,\n        valueCallback: function valueCallback1(value1) {\n            return parseInt(value1, 10);\n        }\n    }),\n    era: buildMatchFn({\n        matchPatterns: matchEraPatterns,\n        defaultMatchWidth: \"wide\",\n        parsePatterns: parseEraPatterns,\n        defaultParseWidth: \"any\"\n    }),\n    quarter: buildMatchFn({\n        matchPatterns: matchQuarterPatterns,\n        defaultMatchWidth: \"wide\",\n        parsePatterns: parseQuarterPatterns,\n        defaultParseWidth: \"any\",\n        valueCallback: function valueCallback1(index1) {\n            return index1 + 1;\n        }\n    }),\n    month: buildMatchFn({\n        matchPatterns: matchMonthPatterns,\n        defaultMatchWidth: \"wide\",\n        parsePatterns: parseMonthPatterns,\n        defaultParseWidth: \"any\"\n    }),\n    day: buildMatchFn({\n        matchPatterns: matchDayPatterns,\n        defaultMatchWidth: \"wide\",\n        parsePatterns: parseDayPatterns,\n        defaultParseWidth: \"any\"\n    }),\n    dayPeriod: buildMatchFn({\n        matchPatterns: matchDayPeriodPatterns,\n        defaultMatchWidth: \"any\",\n        parsePatterns: parseDayPeriodPatterns,\n        defaultParseWidth: \"any\"\n    })\n};\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */ var locale = {\n    code: \"en-US\",\n    formatDistance: formatDistance,\n    formatLong: formatLong,\n    formatRelative: formatRelative,\n    localize: localize,\n    match: match,\n    options: {\n        weekStartsOn: 0 /* Sunday */ ,\n        firstWeekContainsDate: 1\n    }\n};\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nvar formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nvar longFormattingTokensRegExp$1 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp$1 = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp$1 = /''/g;\nvar unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */ function format(dirtyDate1, dirtyFormatStr1, options1) {\n    var _ref1, _options$locale1, _ref21, _ref31, _ref41, _options$firstWeekCon1, _options$locale21, _options$locale2$opti1, _defaultOptions$local1, _defaultOptions$local21, _ref51, _ref61, _ref71, _options$weekStartsOn1, _options$locale31, _options$locale3$opti1, _defaultOptions$local31, _defaultOptions$local41;\n    requiredArgs(2, arguments);\n    var formatStr1 = String(dirtyFormatStr1);\n    var defaultOptions1 = getDefaultOptions();\n    var locale$11 = (_ref1 = (_options$locale1 = options1 === null || options1 === void 0 ? void 0 : options1.locale) !== null && _options$locale1 !== void 0 ? _options$locale1 : defaultOptions1.locale) !== null && _ref1 !== void 0 ? _ref1 : locale;\n    var firstWeekContainsDate1 = toInteger((_ref21 = (_ref31 = (_ref41 = (_options$firstWeekCon1 = options1 === null || options1 === void 0 ? void 0 : options1.firstWeekContainsDate) !== null && _options$firstWeekCon1 !== void 0 ? _options$firstWeekCon1 : options1 === null || options1 === void 0 ? void 0 : (_options$locale21 = options1.locale) === null || _options$locale21 === void 0 ? void 0 : (_options$locale2$opti1 = _options$locale21.options) === null || _options$locale2$opti1 === void 0 ? void 0 : _options$locale2$opti1.firstWeekContainsDate) !== null && _ref41 !== void 0 ? _ref41 : defaultOptions1.firstWeekContainsDate) !== null && _ref31 !== void 0 ? _ref31 : (_defaultOptions$local1 = defaultOptions1.locale) === null || _defaultOptions$local1 === void 0 ? void 0 : (_defaultOptions$local21 = _defaultOptions$local1.options) === null || _defaultOptions$local21 === void 0 ? void 0 : _defaultOptions$local21.firstWeekContainsDate) !== null && _ref21 !== void 0 ? _ref21 : 1);\n    // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n    if (!(firstWeekContainsDate1 >= 1 && firstWeekContainsDate1 <= 7)) {\n        throw new RangeError(\"firstWeekContainsDate must be between 1 and 7 inclusively\");\n    }\n    var weekStartsOn1 = toInteger((_ref51 = (_ref61 = (_ref71 = (_options$weekStartsOn1 = options1 === null || options1 === void 0 ? void 0 : options1.weekStartsOn) !== null && _options$weekStartsOn1 !== void 0 ? _options$weekStartsOn1 : options1 === null || options1 === void 0 ? void 0 : (_options$locale31 = options1.locale) === null || _options$locale31 === void 0 ? void 0 : (_options$locale3$opti1 = _options$locale31.options) === null || _options$locale3$opti1 === void 0 ? void 0 : _options$locale3$opti1.weekStartsOn) !== null && _ref71 !== void 0 ? _ref71 : defaultOptions1.weekStartsOn) !== null && _ref61 !== void 0 ? _ref61 : (_defaultOptions$local31 = defaultOptions1.locale) === null || _defaultOptions$local31 === void 0 ? void 0 : (_defaultOptions$local41 = _defaultOptions$local31.options) === null || _defaultOptions$local41 === void 0 ? void 0 : _defaultOptions$local41.weekStartsOn) !== null && _ref51 !== void 0 ? _ref51 : 0);\n    // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n    if (!(weekStartsOn1 >= 0 && weekStartsOn1 <= 6)) {\n        throw new RangeError(\"weekStartsOn must be between 0 and 6 inclusively\");\n    }\n    if (!locale$11.localize) {\n        throw new RangeError(\"locale must contain localize property\");\n    }\n    if (!locale$11.formatLong) {\n        throw new RangeError(\"locale must contain formatLong property\");\n    }\n    var originalDate1 = toDate(dirtyDate1);\n    if (!isValid(originalDate1)) {\n        throw new RangeError(\"Invalid time value\");\n    }\n    // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n    // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n    // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n    var timezoneOffset1 = getTimezoneOffsetInMilliseconds(originalDate1);\n    var utcDate1 = subMilliseconds(originalDate1, timezoneOffset1);\n    var formatterOptions1 = {\n        firstWeekContainsDate: firstWeekContainsDate1,\n        weekStartsOn: weekStartsOn1,\n        locale: locale$11,\n        _originalDate: originalDate1\n    };\n    var result1 = formatStr1.match(longFormattingTokensRegExp$1).map(function(substring1) {\n        var firstCharacter1 = substring1[0];\n        if (firstCharacter1 === \"p\" || firstCharacter1 === \"P\") {\n            var longFormatter1 = longFormatters[firstCharacter1];\n            return longFormatter1(substring1, locale$11.formatLong);\n        }\n        return substring1;\n    }).join(\"\").match(formattingTokensRegExp$1).map(function(substring1) {\n        // Replace two single quote characters with one single quote character\n        if (substring1 === \"''\") {\n            return \"'\";\n        }\n        var firstCharacter1 = substring1[0];\n        if (firstCharacter1 === \"'\") {\n            return cleanEscapedString$1(substring1);\n        }\n        var formatter1 = formatters[firstCharacter1];\n        if (formatter1) {\n            if (!(options1 !== null && options1 !== void 0 && options1.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring1)) {\n                throwProtectedError(substring1, dirtyFormatStr1, String(dirtyDate1));\n            }\n            if (!(options1 !== null && options1 !== void 0 && options1.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring1)) {\n                throwProtectedError(substring1, dirtyFormatStr1, String(dirtyDate1));\n            }\n            return formatter1(utcDate1, substring1, locale$11.localize, formatterOptions1);\n        }\n        if (firstCharacter1.match(unescapedLatinCharacterRegExp$1)) {\n            throw new RangeError(\"Format string contains an unescaped latin alphabet character `\" + firstCharacter1 + \"`\");\n        }\n        return substring1;\n    }).join(\"\");\n    return result1;\n}\nfunction cleanEscapedString$1(input1) {\n    var matched1 = input1.match(escapedStringRegExp$1);\n    if (!matched1) {\n        return input1;\n    }\n    return matched1[1].replace(doubleQuoteRegExp$1, \"'\");\n}\nvar MILLISECONDS_IN_MINUTE = 60000;\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the minutes added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */ function addMinutes(dirtyDate1, dirtyAmount1) {\n    requiredArgs(2, arguments);\n    var amount1 = toInteger(dirtyAmount1);\n    return addMilliseconds(dirtyDate1, amount1 * MILLISECONDS_IN_MINUTE);\n}\nvar MILLISECONDS_IN_HOUR = 3600000;\n/**\n * @name addHours\n * @category Hour Helpers\n * @summary Add the specified number of hours to the given date.\n *\n * @description\n * Add the specified number of hours to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of hours to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the hours added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 2 hours to 10 July 2014 23:00:00:\n * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)\n * //=> Fri Jul 11 2014 01:00:00\n */ function addHours(dirtyDate1, dirtyAmount1) {\n    requiredArgs(2, arguments);\n    var amount1 = toInteger(dirtyAmount1);\n    return addMilliseconds(dirtyDate1, amount1 * MILLISECONDS_IN_HOUR);\n}\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */ function addDays(dirtyDate1, dirtyAmount1) {\n    requiredArgs(2, arguments);\n    var date1 = toDate(dirtyDate1);\n    var amount1 = toInteger(dirtyAmount1);\n    if (isNaN(amount1)) {\n        return new Date(NaN);\n    }\n    if (!amount1) {\n        // If 0 days, no-op to avoid changing times in the hour before end of DST\n        return date1;\n    }\n    date1.setDate(date1.getDate() + amount1);\n    return date1;\n}\n/**\n * @name addWeeks\n * @category Week Helpers\n * @summary Add the specified number of weeks to the given date.\n *\n * @description\n * Add the specified number of week to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the weeks added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 4 weeks to 1 September 2014:\n * const result = addWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Sep 29 2014 00:00:00\n */ function addWeeks(dirtyDate1, dirtyAmount1) {\n    requiredArgs(2, arguments);\n    var amount1 = toInteger(dirtyAmount1);\n    var days1 = amount1 * 7;\n    return addDays(dirtyDate1, days1);\n}\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */ function addMonths(dirtyDate1, dirtyAmount1) {\n    requiredArgs(2, arguments);\n    var date1 = toDate(dirtyDate1);\n    var amount1 = toInteger(dirtyAmount1);\n    if (isNaN(amount1)) {\n        return new Date(NaN);\n    }\n    if (!amount1) {\n        // If 0 months, no-op to avoid changing times in the hour before end of DST\n        return date1;\n    }\n    var dayOfMonth1 = date1.getDate();\n    // The JS Date object supports date math by accepting out-of-bounds values for\n    // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n    // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n    // want except that dates will wrap around the end of a month, meaning that\n    // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n    // we'll default to the end of the desired month by adding 1 to the desired\n    // month and using a date of 0 to back up one day to the end of the desired\n    // month.\n    var endOfDesiredMonth1 = new Date(date1.getTime());\n    endOfDesiredMonth1.setMonth(date1.getMonth() + amount1 + 1, 0);\n    var daysInMonth1 = endOfDesiredMonth1.getDate();\n    if (dayOfMonth1 >= daysInMonth1) {\n        // If we're already at the end of the month, then this is the correct date\n        // and we're done.\n        return endOfDesiredMonth1;\n    } else {\n        // Otherwise, we now know that setting the original day-of-month value won't\n        // cause an overflow, so set the desired day-of-month. Note that we can't\n        // just set the date of `endOfDesiredMonth` because that object may have had\n        // its time changed in the unusual case where where a DST transition was on\n        // the last day of the month and its local time was in the hour skipped or\n        // repeated next to a DST transition.  So we use `date` instead which is\n        // guaranteed to still have the original time.\n        date1.setFullYear(endOfDesiredMonth1.getFullYear(), endOfDesiredMonth1.getMonth(), dayOfMonth1);\n        return date1;\n    }\n}\n/**\n * @name addQuarters\n * @category Quarter Helpers\n * @summary Add the specified number of year quarters to the given date.\n *\n * @description\n * Add the specified number of year quarters to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of quarters to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the quarters added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 1 quarter to 1 September 2014:\n * const result = addQuarters(new Date(2014, 8, 1), 1)\n * //=> Mon Dec 01 2014 00:00:00\n */ function addQuarters(dirtyDate1, dirtyAmount1) {\n    requiredArgs(2, arguments);\n    var amount1 = toInteger(dirtyAmount1);\n    var months1 = amount1 * 3;\n    return addMonths(dirtyDate1, months1);\n}\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * const result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */ function addYears(dirtyDate1, dirtyAmount1) {\n    requiredArgs(2, arguments);\n    var amount1 = toInteger(dirtyAmount1);\n    return addMonths(dirtyDate1, amount1 * 12);\n}\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * const result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */ function subDays(dirtyDate1, dirtyAmount1) {\n    requiredArgs(2, arguments);\n    var amount1 = toInteger(dirtyAmount1);\n    return addDays(dirtyDate1, -amount1);\n}\n/**\n * @name subWeeks\n * @category Week Helpers\n * @summary Subtract the specified number of weeks from the given date.\n *\n * @description\n * Subtract the specified number of weeks from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the weeks subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 4 weeks from 1 September 2014:\n * const result = subWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Aug 04 2014 00:00:00\n */ function subWeeks(dirtyDate1, dirtyAmount1) {\n    requiredArgs(2, arguments);\n    var amount1 = toInteger(dirtyAmount1);\n    return addWeeks(dirtyDate1, -amount1);\n}\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * const result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */ function subMonths(dirtyDate1, dirtyAmount1) {\n    requiredArgs(2, arguments);\n    var amount1 = toInteger(dirtyAmount1);\n    return addMonths(dirtyDate1, -amount1);\n}\n/**\n * @name subQuarters\n * @category Quarter Helpers\n * @summary Subtract the specified number of year quarters from the given date.\n *\n * @description\n * Subtract the specified number of year quarters from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of quarters to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the quarters subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 3 quarters from 1 September 2014:\n * const result = subQuarters(new Date(2014, 8, 1), 3)\n * //=> Sun Dec 01 2013 00:00:00\n */ function subQuarters(dirtyDate1, dirtyAmount1) {\n    requiredArgs(2, arguments);\n    var amount1 = toInteger(dirtyAmount1);\n    return addQuarters(dirtyDate1, -amount1);\n}\n/**\n * @name subYears\n * @category Year Helpers\n * @summary Subtract the specified number of years from the given date.\n *\n * @description\n * Subtract the specified number of years from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 years from 1 September 2014:\n * const result = subYears(new Date(2014, 8, 1), 5)\n * //=> Tue Sep 01 2009 00:00:00\n */ function subYears(dirtyDate1, dirtyAmount1) {\n    requiredArgs(2, arguments);\n    var amount1 = toInteger(dirtyAmount1);\n    return addYears(dirtyDate1, -amount1);\n}\n/**\n * @name getSeconds\n * @category Second Helpers\n * @summary Get the seconds of the given date.\n *\n * @description\n * Get the seconds of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the seconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the seconds of 29 February 2012 11:45:05.123:\n * const result = getSeconds(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 5\n */ function getSeconds(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var date1 = toDate(dirtyDate1);\n    var seconds1 = date1.getSeconds();\n    return seconds1;\n}\n/**\n * @name getMinutes\n * @category Minute Helpers\n * @summary Get the minutes of the given date.\n *\n * @description\n * Get the minutes of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the minutes\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the minutes of 29 February 2012 11:45:05:\n * const result = getMinutes(new Date(2012, 1, 29, 11, 45, 5))\n * //=> 45\n */ function getMinutes(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var date1 = toDate(dirtyDate1);\n    var minutes1 = date1.getMinutes();\n    return minutes1;\n}\n/**\n * @name getHours\n * @category Hour Helpers\n * @summary Get the hours of the given date.\n *\n * @description\n * Get the hours of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the hours\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the hours of 29 February 2012 11:45:00:\n * const result = getHours(new Date(2012, 1, 29, 11, 45))\n * //=> 11\n */ function getHours(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var date1 = toDate(dirtyDate1);\n    var hours1 = date1.getHours();\n    return hours1;\n}\n/**\n * @name getDay\n * @category Weekday Helpers\n * @summary Get the day of the week of the given date.\n *\n * @description\n * Get the day of the week of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {0|1|2|3|4|5|6} the day of week, 0 represents Sunday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the week is 29 February 2012?\n * const result = getDay(new Date(2012, 1, 29))\n * //=> 3\n */ function getDay(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var date1 = toDate(dirtyDate1);\n    var day1 = date1.getDay();\n    return day1;\n}\n/**\n * @name getDate\n * @category Day Helpers\n * @summary Get the day of the month of the given date.\n *\n * @description\n * Get the day of the month of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the day of month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the month is 29 February 2012?\n * const result = getDate(new Date(2012, 1, 29))\n * //=> 29\n */ function getDate(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var date1 = toDate(dirtyDate1);\n    var dayOfMonth1 = date1.getDate();\n    return dayOfMonth1;\n}\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */ function startOfWeek(dirtyDate1, options1) {\n    var _ref1, _ref21, _ref31, _options$weekStartsOn1, _options$locale1, _options$locale$optio1, _defaultOptions$local1, _defaultOptions$local21;\n    requiredArgs(1, arguments);\n    var defaultOptions1 = getDefaultOptions();\n    var weekStartsOn1 = toInteger((_ref1 = (_ref21 = (_ref31 = (_options$weekStartsOn1 = options1 === null || options1 === void 0 ? void 0 : options1.weekStartsOn) !== null && _options$weekStartsOn1 !== void 0 ? _options$weekStartsOn1 : options1 === null || options1 === void 0 ? void 0 : (_options$locale1 = options1.locale) === null || _options$locale1 === void 0 ? void 0 : (_options$locale$optio1 = _options$locale1.options) === null || _options$locale$optio1 === void 0 ? void 0 : _options$locale$optio1.weekStartsOn) !== null && _ref31 !== void 0 ? _ref31 : defaultOptions1.weekStartsOn) !== null && _ref21 !== void 0 ? _ref21 : (_defaultOptions$local1 = defaultOptions1.locale) === null || _defaultOptions$local1 === void 0 ? void 0 : (_defaultOptions$local21 = _defaultOptions$local1.options) === null || _defaultOptions$local21 === void 0 ? void 0 : _defaultOptions$local21.weekStartsOn) !== null && _ref1 !== void 0 ? _ref1 : 0);\n    // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n    if (!(weekStartsOn1 >= 0 && weekStartsOn1 <= 6)) {\n        throw new RangeError(\"weekStartsOn must be between 0 and 6 inclusively\");\n    }\n    var date1 = toDate(dirtyDate1);\n    var day1 = date1.getDay();\n    var diff1 = (day1 < weekStartsOn1 ? 7 : 0) + day1 - weekStartsOn1;\n    date1.setDate(date1.getDate() - diff1);\n    date1.setHours(0, 0, 0, 0);\n    return date1;\n}\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */ function startOfISOWeek(dirtyDate1) {\n    requiredArgs(1, arguments);\n    return startOfWeek(dirtyDate1, {\n        weekStartsOn: 1\n    });\n}\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the ISO week-numbering year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */ function getISOWeekYear(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var date1 = toDate(dirtyDate1);\n    var year1 = date1.getFullYear();\n    var fourthOfJanuaryOfNextYear1 = new Date(0);\n    fourthOfJanuaryOfNextYear1.setFullYear(year1 + 1, 0, 4);\n    fourthOfJanuaryOfNextYear1.setHours(0, 0, 0, 0);\n    var startOfNextYear1 = startOfISOWeek(fourthOfJanuaryOfNextYear1);\n    var fourthOfJanuaryOfThisYear1 = new Date(0);\n    fourthOfJanuaryOfThisYear1.setFullYear(year1, 0, 4);\n    fourthOfJanuaryOfThisYear1.setHours(0, 0, 0, 0);\n    var startOfThisYear1 = startOfISOWeek(fourthOfJanuaryOfThisYear1);\n    if (date1.getTime() >= startOfNextYear1.getTime()) {\n        return year1 + 1;\n    } else if (date1.getTime() >= startOfThisYear1.getTime()) {\n        return year1;\n    } else {\n        return year1 - 1;\n    }\n}\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an ISO week-numbering year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */ function startOfISOWeekYear(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var year1 = getISOWeekYear(dirtyDate1);\n    var fourthOfJanuary1 = new Date(0);\n    fourthOfJanuary1.setFullYear(year1, 0, 4);\n    fourthOfJanuary1.setHours(0, 0, 0, 0);\n    var date1 = startOfISOWeek(fourthOfJanuary1);\n    return date1;\n}\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */ function getISOWeek(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var date1 = toDate(dirtyDate1);\n    var diff1 = startOfISOWeek(date1).getTime() - startOfISOWeekYear(date1).getTime();\n    // Round the number of days to the nearest integer\n    // because the number of milliseconds in a week is not constant\n    // (e.g. it's different in the week of the daylight saving time clock shift)\n    return Math.round(diff1 / MILLISECONDS_IN_WEEK) + 1;\n}\n/**\n * @name getMonth\n * @category Month Helpers\n * @summary Get the month of the given date.\n *\n * @description\n * Get the month of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which month is 29 February 2012?\n * const result = getMonth(new Date(2012, 1, 29))\n * //=> 1\n */ function getMonth(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var date1 = toDate(dirtyDate1);\n    var month1 = date1.getMonth();\n    return month1;\n}\n/**\n * @name getQuarter\n * @category Quarter Helpers\n * @summary Get the year quarter of the given date.\n *\n * @description\n * Get the year quarter of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which quarter is 2 July 2014?\n * const result = getQuarter(new Date(2014, 6, 2))\n * //=> 3\n */ function getQuarter(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var date1 = toDate(dirtyDate1);\n    var quarter1 = Math.floor(date1.getMonth() / 3) + 1;\n    return quarter1;\n}\n/**\n * @name getYear\n * @category Year Helpers\n * @summary Get the year of the given date.\n *\n * @description\n * Get the year of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which year is 2 July 2014?\n * const result = getYear(new Date(2014, 6, 2))\n * //=> 2014\n */ function getYear(dirtyDate1) {\n    requiredArgs(1, arguments);\n    return toDate(dirtyDate1).getFullYear();\n}\n/**\n * @name getTime\n * @category Timestamp Helpers\n * @summary Get the milliseconds timestamp of the given date.\n *\n * @description\n * Get the milliseconds timestamp of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05.123:\n * const result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 1330515905123\n */ function getTime(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var date1 = toDate(dirtyDate1);\n    var timestamp1 = date1.getTime();\n    return timestamp1;\n}\n/**\n * @name setSeconds\n * @category Second Helpers\n * @summary Set the seconds to the given date.\n *\n * @description\n * Set the seconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} seconds - the seconds of the new date\n * @returns {Date} the new date with the seconds set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 45 seconds to 1 September 2014 11:30:40:\n * const result = setSeconds(new Date(2014, 8, 1, 11, 30, 40), 45)\n * //=> Mon Sep 01 2014 11:30:45\n */ function setSeconds(dirtyDate1, dirtySeconds1) {\n    requiredArgs(2, arguments);\n    var date1 = toDate(dirtyDate1);\n    var seconds1 = toInteger(dirtySeconds1);\n    date1.setSeconds(seconds1);\n    return date1;\n}\n/**\n * @name setMinutes\n * @category Minute Helpers\n * @summary Set the minutes to the given date.\n *\n * @description\n * Set the minutes to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} minutes - the minutes of the new date\n * @returns {Date} the new date with the minutes set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 45 minutes to 1 September 2014 11:30:40:\n * const result = setMinutes(new Date(2014, 8, 1, 11, 30, 40), 45)\n * //=> Mon Sep 01 2014 11:45:40\n */ function setMinutes(dirtyDate1, dirtyMinutes1) {\n    requiredArgs(2, arguments);\n    var date1 = toDate(dirtyDate1);\n    var minutes1 = toInteger(dirtyMinutes1);\n    date1.setMinutes(minutes1);\n    return date1;\n}\n/**\n * @name setHours\n * @category Hour Helpers\n * @summary Set the hours to the given date.\n *\n * @description\n * Set the hours to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} hours - the hours of the new date\n * @returns {Date} the new date with the hours set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 4 hours to 1 September 2014 11:30:00:\n * const result = setHours(new Date(2014, 8, 1, 11, 30), 4)\n * //=> Mon Sep 01 2014 04:30:00\n */ function setHours(dirtyDate1, dirtyHours1) {\n    requiredArgs(2, arguments);\n    var date1 = toDate(dirtyDate1);\n    var hours1 = toInteger(dirtyHours1);\n    date1.setHours(hours1);\n    return date1;\n}\n/**\n * @name getDaysInMonth\n * @category Month Helpers\n * @summary Get the number of days in a month of the given date.\n *\n * @description\n * Get the number of days in a month of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of days in a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many days are in February 2000?\n * const result = getDaysInMonth(new Date(2000, 1))\n * //=> 29\n */ function getDaysInMonth(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var date1 = toDate(dirtyDate1);\n    var year1 = date1.getFullYear();\n    var monthIndex1 = date1.getMonth();\n    var lastDayOfMonth1 = new Date(0);\n    lastDayOfMonth1.setFullYear(year1, monthIndex1 + 1, 0);\n    lastDayOfMonth1.setHours(0, 0, 0, 0);\n    return lastDayOfMonth1.getDate();\n}\n/**\n * @name setMonth\n * @category Month Helpers\n * @summary Set the month to the given date.\n *\n * @description\n * Set the month to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} month - the month of the new date\n * @returns {Date} the new date with the month set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set February to 1 September 2014:\n * const result = setMonth(new Date(2014, 8, 1), 1)\n * //=> Sat Feb 01 2014 00:00:00\n */ function setMonth(dirtyDate1, dirtyMonth1) {\n    requiredArgs(2, arguments);\n    var date1 = toDate(dirtyDate1);\n    var month1 = toInteger(dirtyMonth1);\n    var year1 = date1.getFullYear();\n    var day1 = date1.getDate();\n    var dateWithDesiredMonth1 = new Date(0);\n    dateWithDesiredMonth1.setFullYear(year1, month1, 15);\n    dateWithDesiredMonth1.setHours(0, 0, 0, 0);\n    var daysInMonth1 = getDaysInMonth(dateWithDesiredMonth1);\n    // Set the last day of the new month\n    // if the original date was the last day of the longer month\n    date1.setMonth(month1, Math.min(day1, daysInMonth1));\n    return date1;\n}\n/**\n * @name setQuarter\n * @category Quarter Helpers\n * @summary Set the year quarter to the given date.\n *\n * @description\n * Set the year quarter to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} quarter - the quarter of the new date\n * @returns {Date} the new date with the quarter set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set the 2nd quarter to 2 July 2014:\n * const result = setQuarter(new Date(2014, 6, 2), 2)\n * //=> Wed Apr 02 2014 00:00:00\n */ function setQuarter(dirtyDate1, dirtyQuarter1) {\n    requiredArgs(2, arguments);\n    var date1 = toDate(dirtyDate1);\n    var quarter1 = toInteger(dirtyQuarter1);\n    var oldQuarter1 = Math.floor(date1.getMonth() / 3) + 1;\n    var diff1 = quarter1 - oldQuarter1;\n    return setMonth(date1, date1.getMonth() + diff1 * 3);\n}\n/**\n * @name setYear\n * @category Year Helpers\n * @summary Set the year to the given date.\n *\n * @description\n * Set the year to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} year - the year of the new date\n * @returns {Date} the new date with the year set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set year 2013 to 1 September 2014:\n * const result = setYear(new Date(2014, 8, 1), 2013)\n * //=> Sun Sep 01 2013 00:00:00\n */ function setYear(dirtyDate1, dirtyYear1) {\n    requiredArgs(2, arguments);\n    var date1 = toDate(dirtyDate1);\n    var year1 = toInteger(dirtyYear1);\n    // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n    if (isNaN(date1.getTime())) {\n        return new Date(NaN);\n    }\n    date1.setFullYear(year1);\n    return date1;\n}\n/**\n * @name min\n * @category Common Helpers\n * @summary Returns the earliest of the given dates.\n *\n * @description\n * Returns the earliest of the given dates.\n *\n * @param {Date[]|Number[]} datesArray - the dates to compare\n * @returns {Date} - the earliest of the dates\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which of these dates is the earliest?\n * const result = min([\n *   new Date(1989, 6, 10),\n *   new Date(1987, 1, 11),\n *   new Date(1995, 6, 2),\n *   new Date(1990, 0, 1)\n * ])\n * //=> Wed Feb 11 1987 00:00:00\n */ function min$1(dirtyDatesArray1) {\n    requiredArgs(1, arguments);\n    var datesArray1;\n    // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n    if (dirtyDatesArray1 && typeof dirtyDatesArray1.forEach === \"function\") {\n        datesArray1 = dirtyDatesArray1;\n    // If `dirtyDatesArray` is Array-like Object, convert to Array.\n    } else if (_typeof(dirtyDatesArray1) === \"object\" && dirtyDatesArray1 !== null) {\n        datesArray1 = Array.prototype.slice.call(dirtyDatesArray1);\n    } else {\n        // `dirtyDatesArray` is non-iterable, return Invalid Date\n        return new Date(NaN);\n    }\n    var result1;\n    datesArray1.forEach(function(dirtyDate1) {\n        var currentDate1 = toDate(dirtyDate1);\n        if (result1 === undefined || result1 > currentDate1 || isNaN(currentDate1.getDate())) {\n            result1 = currentDate1;\n        }\n    });\n    return result1 || new Date(NaN);\n}\n/**\n * @name max\n * @category Common Helpers\n * @summary Return the latest of the given dates.\n *\n * @description\n * Return the latest of the given dates.\n *\n * @param {Date[]|Number[]} datesArray - the dates to compare\n * @returns {Date} the latest of the dates\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which of these dates is the latest?\n * const result = max([\n *   new Date(1989, 6, 10),\n *   new Date(1987, 1, 11),\n *   new Date(1995, 6, 2),\n *   new Date(1990, 0, 1)\n * ])\n * //=> Sun Jul 02 1995 00:00:00\n */ function max$1(dirtyDatesArray1) {\n    requiredArgs(1, arguments);\n    var datesArray1;\n    // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n    if (dirtyDatesArray1 && typeof dirtyDatesArray1.forEach === \"function\") {\n        datesArray1 = dirtyDatesArray1;\n    // If `dirtyDatesArray` is Array-like Object, convert to Array.\n    } else if (_typeof(dirtyDatesArray1) === \"object\" && dirtyDatesArray1 !== null) {\n        datesArray1 = Array.prototype.slice.call(dirtyDatesArray1);\n    } else {\n        // `dirtyDatesArray` is non-iterable, return Invalid Date\n        return new Date(NaN);\n    }\n    var result1;\n    datesArray1.forEach(function(dirtyDate1) {\n        var currentDate1 = toDate(dirtyDate1);\n        if (result1 === undefined || result1 < currentDate1 || isNaN(Number(currentDate1))) {\n            result1 = currentDate1;\n        }\n    });\n    return result1 || new Date(NaN);\n}\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */ function startOfDay(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var date1 = toDate(dirtyDate1);\n    date1.setHours(0, 0, 0, 0);\n    return date1;\n}\nvar MILLISECONDS_IN_DAY = 86400000;\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */ function differenceInCalendarDays(dirtyDateLeft1, dirtyDateRight1) {\n    requiredArgs(2, arguments);\n    var startOfDayLeft1 = startOfDay(dirtyDateLeft1);\n    var startOfDayRight1 = startOfDay(dirtyDateRight1);\n    var timestampLeft1 = startOfDayLeft1.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft1);\n    var timestampRight1 = startOfDayRight1.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight1);\n    // Round the number of days to the nearest integer\n    // because the number of milliseconds in a day is not constant\n    // (e.g. it's different in the day of the daylight saving time clock shift)\n    return Math.round((timestampLeft1 - timestampRight1) / MILLISECONDS_IN_DAY);\n}\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */ function differenceInCalendarMonths(dirtyDateLeft1, dirtyDateRight1) {\n    requiredArgs(2, arguments);\n    var dateLeft1 = toDate(dirtyDateLeft1);\n    var dateRight1 = toDate(dirtyDateRight1);\n    var yearDiff1 = dateLeft1.getFullYear() - dateRight1.getFullYear();\n    var monthDiff1 = dateLeft1.getMonth() - dateRight1.getMonth();\n    return yearDiff1 * 12 + monthDiff1;\n}\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * )\n * //=> 2\n */ function differenceInCalendarYears(dirtyDateLeft1, dirtyDateRight1) {\n    requiredArgs(2, arguments);\n    var dateLeft1 = toDate(dirtyDateLeft1);\n    var dateRight1 = toDate(dirtyDateRight1);\n    return dateLeft1.getFullYear() - dateRight1.getFullYear();\n}\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */ function startOfMonth(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var date1 = toDate(dirtyDate1);\n    date1.setDate(1);\n    date1.setHours(0, 0, 0, 0);\n    return date1;\n}\n/**\n * @name startOfQuarter\n * @category Quarter Helpers\n * @summary Return the start of a year quarter for the given date.\n *\n * @description\n * Return the start of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a quarter for 2 September 2014 11:55:00:\n * const result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Jul 01 2014 00:00:00\n */ function startOfQuarter(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var date1 = toDate(dirtyDate1);\n    var currentMonth1 = date1.getMonth();\n    var month1 = currentMonth1 - currentMonth1 % 3;\n    date1.setMonth(month1, 1);\n    date1.setHours(0, 0, 0, 0);\n    return date1;\n}\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */ function startOfYear(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var cleanDate1 = toDate(dirtyDate1);\n    var date1 = new Date(0);\n    date1.setFullYear(cleanDate1.getFullYear(), 0, 1);\n    date1.setHours(0, 0, 0, 0);\n    return date1;\n}\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */ function endOfDay(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var date1 = toDate(dirtyDate1);\n    date1.setHours(23, 59, 59, 999);\n    return date1;\n}\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */ function endOfMonth(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var date1 = toDate(dirtyDate1);\n    var month1 = date1.getMonth();\n    date1.setFullYear(date1.getFullYear(), month1 + 1, 0);\n    date1.setHours(23, 59, 59, 999);\n    return date1;\n}\n/**\n * @name endOfYear\n * @category Year Helpers\n * @summary Return the end of a year for the given date.\n *\n * @description\n * Return the end of a year for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a year for 2 September 2014 11:55:00:\n * const result = endOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Dec 31 2014 23:59:59.999\n */ function endOfYear(dirtyDate1) {\n    requiredArgs(1, arguments);\n    var date1 = toDate(dirtyDate1);\n    var year1 = date1.getFullYear();\n    date1.setFullYear(year1 + 1, 0, 0);\n    date1.setHours(23, 59, 59, 999);\n    return date1;\n}\n/**\n * @name isEqual\n * @category Common Helpers\n * @summary Are the given dates equal?\n *\n * @description\n * Are the given dates equal?\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Boolean} the dates are equal\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?\n * const result = isEqual(\n *   new Date(2014, 6, 2, 6, 30, 45, 0),\n *   new Date(2014, 6, 2, 6, 30, 45, 500)\n * )\n * //=> false\n */ function isEqual$1(dirtyLeftDate1, dirtyRightDate1) {\n    requiredArgs(2, arguments);\n    var dateLeft1 = toDate(dirtyLeftDate1);\n    var dateRight1 = toDate(dirtyRightDate1);\n    return dateLeft1.getTime() === dateRight1.getTime();\n}\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day (and year and month)?\n *\n * @description\n * Are the given dates in the same day (and year and month)?\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day (and year and month)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n *\n * @example\n * // Are 4 September and 4 October in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))\n * //=> false\n *\n * @example\n * // Are 4 September, 2014 and 4 September, 2015 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))\n * //=> false\n */ function isSameDay(dirtyDateLeft1, dirtyDateRight1) {\n    requiredArgs(2, arguments);\n    var dateLeftStartOfDay1 = startOfDay(dirtyDateLeft1);\n    var dateRightStartOfDay1 = startOfDay(dirtyDateRight1);\n    return dateLeftStartOfDay1.getTime() === dateRightStartOfDay1.getTime();\n}\n/**\n * @name isSameMonth\n * @category Month Helpers\n * @summary Are the given dates in the same month (and year)?\n *\n * @description\n * Are the given dates in the same month (and year)?\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same month (and year)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 September 2014 and 25 September 2014 in the same month?\n * const result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))\n * //=> true\n *\n * @example\n * // Are 2 September 2014 and 25 September 2015 in the same month?\n * const result = isSameMonth(new Date(2014, 8, 2), new Date(2015, 8, 25))\n * //=> false\n */ function isSameMonth(dirtyDateLeft1, dirtyDateRight1) {\n    requiredArgs(2, arguments);\n    var dateLeft1 = toDate(dirtyDateLeft1);\n    var dateRight1 = toDate(dirtyDateRight1);\n    return dateLeft1.getFullYear() === dateRight1.getFullYear() && dateLeft1.getMonth() === dateRight1.getMonth();\n}\n/**\n * @name isSameYear\n * @category Year Helpers\n * @summary Are the given dates in the same year?\n *\n * @description\n * Are the given dates in the same year?\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same year\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 September 2014 and 25 September 2014 in the same year?\n * const result = isSameYear(new Date(2014, 8, 2), new Date(2014, 8, 25))\n * //=> true\n */ function isSameYear(dirtyDateLeft1, dirtyDateRight1) {\n    requiredArgs(2, arguments);\n    var dateLeft1 = toDate(dirtyDateLeft1);\n    var dateRight1 = toDate(dirtyDateRight1);\n    return dateLeft1.getFullYear() === dateRight1.getFullYear();\n}\n/**\n * @name isSameQuarter\n * @category Quarter Helpers\n * @summary Are the given dates in the same quarter (and year)?\n *\n * @description\n * Are the given dates in the same quarter (and year)?\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same quarter (and year)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 1 January 2014 and 8 March 2014 in the same quarter?\n * const result = isSameQuarter(new Date(2014, 0, 1), new Date(2014, 2, 8))\n * //=> true\n *\n * @example\n * // Are 1 January 2014 and 1 January 2015 in the same quarter?\n * const result = isSameQuarter(new Date(2014, 0, 1), new Date(2015, 0, 1))\n * //=> false\n */ function isSameQuarter(dirtyDateLeft1, dirtyDateRight1) {\n    requiredArgs(2, arguments);\n    var dateLeftStartOfQuarter1 = startOfQuarter(dirtyDateLeft1);\n    var dateRightStartOfQuarter1 = startOfQuarter(dirtyDateRight1);\n    return dateLeftStartOfQuarter1.getTime() === dateRightStartOfQuarter1.getTime();\n}\n/**\n * @name isAfter\n * @category Common Helpers\n * @summary Is the first date after the second one?\n *\n * @description\n * Is the first date after the second one?\n *\n * @param {Date|Number} date - the date that should be after the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is after the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 after 11 February 1987?\n * const result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> true\n */ function isAfter(dirtyDate1, dirtyDateToCompare1) {\n    requiredArgs(2, arguments);\n    var date1 = toDate(dirtyDate1);\n    var dateToCompare1 = toDate(dirtyDateToCompare1);\n    return date1.getTime() > dateToCompare1.getTime();\n}\n/**\n * @name isBefore\n * @category Common Helpers\n * @summary Is the first date before the second one?\n *\n * @description\n * Is the first date before the second one?\n *\n * @param {Date|Number} date - the date that should be before the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is before the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 before 11 February 1987?\n * const result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> false\n */ function isBefore(dirtyDate1, dirtyDateToCompare1) {\n    requiredArgs(2, arguments);\n    var date1 = toDate(dirtyDate1);\n    var dateToCompare1 = toDate(dirtyDateToCompare1);\n    return date1.getTime() < dateToCompare1.getTime();\n}\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * @param {Date|Number} date - the date to check\n * @param {Interval} interval - the interval to check\n * @returns {Boolean} the date is within the interval\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> false\n *\n * @example\n * // For date equal to interval start:\n * isWithinInterval(date, { start, end: date }) // => true\n *\n * @example\n * // For date equal to interval end:\n * isWithinInterval(date, { start: date, end }) // => true\n */ function isWithinInterval(dirtyDate1, interval1) {\n    requiredArgs(2, arguments);\n    var time1 = toDate(dirtyDate1).getTime();\n    var startTime1 = toDate(interval1.start).getTime();\n    var endTime1 = toDate(interval1.end).getTime();\n    // Throw an exception if start date is after end date or if any date is `Invalid Date`\n    if (!(startTime1 <= endTime1)) {\n        throw new RangeError(\"Invalid interval\");\n    }\n    return time1 >= startTime1 && time1 <= endTime1;\n}\nfunction _arrayLikeToArray(r1, a1) {\n    (null == a1 || a1 > r1.length) && (a1 = r1.length);\n    for(var e1 = 0, n1 = Array(a1); e1 < a1; e1++)n1[e1] = r1[e1];\n    return n1;\n}\nfunction _unsupportedIterableToArray(r1, a1) {\n    if (r1) {\n        if (\"string\" == typeof r1) return _arrayLikeToArray(r1, a1);\n        var t1 = ({}).toString.call(r1).slice(8, -1);\n        return \"Object\" === t1 && r1.constructor && (t1 = r1.constructor.name), \"Map\" === t1 || \"Set\" === t1 ? Array.from(r1) : \"Arguments\" === t1 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t1) ? _arrayLikeToArray(r1, a1) : void 0;\n    }\n}\nfunction _createForOfIteratorHelper(r1, e1) {\n    var t1 = \"undefined\" != typeof Symbol && r1[Symbol.iterator] || r1[\"@@iterator\"];\n    if (!t1) {\n        if (Array.isArray(r1) || (t1 = _unsupportedIterableToArray(r1)) || e1) {\n            t1 && (r1 = t1);\n            var _n1 = 0, F1 = function F1() {};\n            return {\n                s: F1,\n                n: function n1() {\n                    return _n1 >= r1.length ? {\n                        done: true\n                    } : {\n                        done: false,\n                        value: r1[_n1++]\n                    };\n                },\n                e: function e1(r1) {\n                    throw r1;\n                },\n                f: F1\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var o1, a1 = true, u1 = false;\n    return {\n        s: function s1() {\n            t1 = t1.call(r1);\n        },\n        n: function n1() {\n            var r1 = t1.next();\n            return a1 = r1.done, r1;\n        },\n        e: function e1(r1) {\n            u1 = true, o1 = r1;\n        },\n        f: function f1() {\n            try {\n                a1 || null == t1[\"return\"] || t1[\"return\"]();\n            } finally{\n                if (u1) throw o1;\n            }\n        }\n    };\n}\nfunction assign(target1, object1) {\n    if (target1 == null) {\n        throw new TypeError(\"assign requires that input parameter not be null or undefined\");\n    }\n    for(var property1 in object1){\n        if (Object.prototype.hasOwnProperty.call(object1, property1)) {\n            target1[property1] = object1[property1];\n        }\n    }\n    return target1;\n}\nfunction _assertThisInitialized$1(e1) {\n    if (void 0 === e1) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return e1;\n}\nfunction _setPrototypeOf$1(t1, e1) {\n    return _setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t1, e1) {\n        return t1.__proto__ = e1, t1;\n    }, _setPrototypeOf$1(t1, e1);\n}\nfunction _inherits(t1, e1) {\n    if (\"function\" != typeof e1 && null !== e1) throw new TypeError(\"Super expression must either be null or a function\");\n    t1.prototype = Object.create(e1 && e1.prototype, {\n        constructor: {\n            value: t1,\n            writable: true,\n            configurable: true\n        }\n    }), Object.defineProperty(t1, \"prototype\", {\n        writable: false\n    }), e1 && _setPrototypeOf$1(t1, e1);\n}\nfunction _getPrototypeOf(t1) {\n    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t1) {\n        return t1.__proto__ || Object.getPrototypeOf(t1);\n    }, _getPrototypeOf(t1);\n}\nfunction _isNativeReflectConstruct() {\n    try {\n        var t1 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n    } catch (t1) {}\n    return (_isNativeReflectConstruct = function _isNativeReflectConstruct1() {\n        return !!t1;\n    })();\n}\nfunction _possibleConstructorReturn(t1, e1) {\n    if (e1 && (\"object\" == _typeof(e1) || \"function\" == typeof e1)) return e1;\n    if (void 0 !== e1) throw new TypeError(\"Derived constructors may only return object or undefined\");\n    return _assertThisInitialized$1(t1);\n}\nfunction _createSuper(t1) {\n    var r1 = _isNativeReflectConstruct();\n    return function() {\n        var e1, o1 = _getPrototypeOf(t1);\n        if (r1) {\n            var s1 = _getPrototypeOf(this).constructor;\n            e1 = Reflect.construct(o1, arguments, s1);\n        } else e1 = o1.apply(this, arguments);\n        return _possibleConstructorReturn(this, e1);\n    };\n}\nfunction _classCallCheck(a1, n1) {\n    if (!(a1 instanceof n1)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction toPrimitive(t1, r1) {\n    if (\"object\" != _typeof(t1) || !t1) return t1;\n    var e1 = t1[Symbol.toPrimitive];\n    if (void 0 !== e1) {\n        var i1 = e1.call(t1, r1);\n        if (\"object\" != _typeof(i1)) return i1;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r1 ? String : Number)(t1);\n}\nfunction toPropertyKey(t1) {\n    var i1 = toPrimitive(t1, \"string\");\n    return \"symbol\" == _typeof(i1) ? i1 : i1 + \"\";\n}\nfunction _defineProperties(e1, r1) {\n    for(var t1 = 0; t1 < r1.length; t1++){\n        var o1 = r1[t1];\n        o1.enumerable = o1.enumerable || false, o1.configurable = true, \"value\" in o1 && (o1.writable = true), Object.defineProperty(e1, toPropertyKey(o1.key), o1);\n    }\n}\nfunction _createClass(e1, r1, t1) {\n    return r1 && _defineProperties(e1.prototype, r1), Object.defineProperty(e1, \"prototype\", {\n        writable: false\n    }), e1;\n}\nfunction _defineProperty(e1, r1, t1) {\n    return (r1 = toPropertyKey(r1)) in e1 ? Object.defineProperty(e1, r1, {\n        value: t1,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    }) : e1[r1] = t1, e1;\n}\nvar TIMEZONE_UNIT_PRIORITY = 10;\nvar Setter = /*#__PURE__*/ function() {\n    function Setter1() {\n        _classCallCheck(this, Setter1);\n        _defineProperty(this, \"priority\", void 0);\n        _defineProperty(this, \"subPriority\", 0);\n    }\n    _createClass(Setter1, [\n        {\n            key: \"validate\",\n            value: function validate1(_utcDate1, _options1) {\n                return true;\n            }\n        }\n    ]);\n    return Setter1;\n}();\nvar ValueSetter = /*#__PURE__*/ function(_Setter1) {\n    _inherits(ValueSetter1, _Setter1);\n    var _super1 = _createSuper(ValueSetter1);\n    function ValueSetter1(value1, validateValue1, setValue1, priority1, subPriority1) {\n        var _this1;\n        _classCallCheck(this, ValueSetter1);\n        _this1 = _super1.call(this);\n        _this1.value = value1;\n        _this1.validateValue = validateValue1;\n        _this1.setValue = setValue1;\n        _this1.priority = priority1;\n        if (subPriority1) {\n            _this1.subPriority = subPriority1;\n        }\n        return _this1;\n    }\n    _createClass(ValueSetter1, [\n        {\n            key: \"validate\",\n            value: function validate1(utcDate1, options1) {\n                return this.validateValue(utcDate1, this.value, options1);\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(utcDate1, flags1, options1) {\n                return this.setValue(utcDate1, flags1, this.value, options1);\n            }\n        }\n    ]);\n    return ValueSetter1;\n}(Setter);\nvar DateToSystemTimezoneSetter = /*#__PURE__*/ function(_Setter21) {\n    _inherits(DateToSystemTimezoneSetter1, _Setter21);\n    var _super21 = _createSuper(DateToSystemTimezoneSetter1);\n    function DateToSystemTimezoneSetter1() {\n        var _this21;\n        _classCallCheck(this, DateToSystemTimezoneSetter1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this21 = _super21.call.apply(_super21, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this21), \"priority\", TIMEZONE_UNIT_PRIORITY);\n        _defineProperty(_assertThisInitialized$1(_this21), \"subPriority\", -1);\n        return _this21;\n    }\n    _createClass(DateToSystemTimezoneSetter1, [\n        {\n            key: \"set\",\n            value: function set1(date1, flags1) {\n                if (flags1.timestampIsSet) {\n                    return date1;\n                }\n                var convertedDate1 = new Date(0);\n                convertedDate1.setFullYear(date1.getUTCFullYear(), date1.getUTCMonth(), date1.getUTCDate());\n                convertedDate1.setHours(date1.getUTCHours(), date1.getUTCMinutes(), date1.getUTCSeconds(), date1.getUTCMilliseconds());\n                return convertedDate1;\n            }\n        }\n    ]);\n    return DateToSystemTimezoneSetter1;\n}(Setter);\nvar Parser = /*#__PURE__*/ function() {\n    function Parser1() {\n        _classCallCheck(this, Parser1);\n        _defineProperty(this, \"incompatibleTokens\", void 0);\n        _defineProperty(this, \"priority\", void 0);\n        _defineProperty(this, \"subPriority\", void 0);\n    }\n    _createClass(Parser1, [\n        {\n            key: \"run\",\n            value: function run1(dateString1, token1, match1, options1) {\n                var result1 = this.parse(dateString1, token1, match1, options1);\n                if (!result1) {\n                    return null;\n                }\n                return {\n                    setter: new ValueSetter(result1.value, this.validate, this.set, this.priority, this.subPriority),\n                    rest: result1.rest\n                };\n            }\n        },\n        {\n            key: \"validate\",\n            value: function validate1(_utcDate1, _value1, _options1) {\n                return true;\n            }\n        }\n    ]);\n    return Parser1;\n}();\nvar EraParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(EraParser1, _Parser1);\n    var _super1 = _createSuper(EraParser1);\n    function EraParser1() {\n        var _this1;\n        _classCallCheck(this, EraParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 140);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"R\",\n            \"u\",\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(EraParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1) {\n                switch(token1){\n                    // AD, BC\n                    case \"G\":\n                    case \"GG\":\n                    case \"GGG\":\n                        return match1.era(dateString1, {\n                            width: \"abbreviated\"\n                        }) || match1.era(dateString1, {\n                            width: \"narrow\"\n                        });\n                    // A, B\n                    case \"GGGGG\":\n                        return match1.era(dateString1, {\n                            width: \"narrow\"\n                        });\n                    // Anno Domini, Before Christ\n                    case \"GGGG\":\n                    default:\n                        return match1.era(dateString1, {\n                            width: \"wide\"\n                        }) || match1.era(dateString1, {\n                            width: \"abbreviated\"\n                        }) || match1.era(dateString1, {\n                            width: \"narrow\"\n                        });\n                }\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, flags1, value1) {\n                flags1.era = value1;\n                date1.setUTCFullYear(value1, 0, 1);\n                date1.setUTCHours(0, 0, 0, 0);\n                return date1;\n            }\n        }\n    ]);\n    return EraParser1;\n}(Parser);\n/**\n * Days in 1 week.\n *\n * @name daysInWeek\n * @constant\n * @type {number}\n * @default\n */ /**\n * Milliseconds in 1 minute\n *\n * @name millisecondsInMinute\n * @constant\n * @type {number}\n * @default\n */ var millisecondsInMinute = 60000;\n/**\n * Milliseconds in 1 hour\n *\n * @name millisecondsInHour\n * @constant\n * @type {number}\n * @default\n */ var millisecondsInHour = 3600000;\n/**\n * Milliseconds in 1 second\n *\n * @name millisecondsInSecond\n * @constant\n * @type {number}\n * @default\n */ var millisecondsInSecond = 1000;\nvar numericPatterns = {\n    month: /^(1[0-2]|0?\\d)/,\n    // 0 to 12\n    date: /^(3[0-1]|[0-2]?\\d)/,\n    // 0 to 31\n    dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/,\n    // 0 to 366\n    week: /^(5[0-3]|[0-4]?\\d)/,\n    // 0 to 53\n    hour23h: /^(2[0-3]|[0-1]?\\d)/,\n    // 0 to 23\n    hour24h: /^(2[0-4]|[0-1]?\\d)/,\n    // 0 to 24\n    hour11h: /^(1[0-1]|0?\\d)/,\n    // 0 to 11\n    hour12h: /^(1[0-2]|0?\\d)/,\n    // 0 to 12\n    minute: /^[0-5]?\\d/,\n    // 0 to 59\n    second: /^[0-5]?\\d/,\n    // 0 to 59\n    singleDigit: /^\\d/,\n    // 0 to 9\n    twoDigits: /^\\d{1,2}/,\n    // 0 to 99\n    threeDigits: /^\\d{1,3}/,\n    // 0 to 999\n    fourDigits: /^\\d{1,4}/,\n    // 0 to 9999\n    anyDigitsSigned: /^-?\\d+/,\n    singleDigitSigned: /^-?\\d/,\n    // 0 to 9, -0 to -9\n    twoDigitsSigned: /^-?\\d{1,2}/,\n    // 0 to 99, -0 to -99\n    threeDigitsSigned: /^-?\\d{1,3}/,\n    // 0 to 999, -0 to -999\n    fourDigitsSigned: /^-?\\d{1,4}/ // 0 to 9999, -0 to -9999\n};\nvar timezonePatterns = {\n    basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n    basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n    basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n    extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n    extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/\n};\nfunction mapValue(parseFnResult1, mapFn1) {\n    if (!parseFnResult1) {\n        return parseFnResult1;\n    }\n    return {\n        value: mapFn1(parseFnResult1.value),\n        rest: parseFnResult1.rest\n    };\n}\nfunction parseNumericPattern(pattern1, dateString1) {\n    var matchResult1 = dateString1.match(pattern1);\n    if (!matchResult1) {\n        return null;\n    }\n    return {\n        value: parseInt(matchResult1[0], 10),\n        rest: dateString1.slice(matchResult1[0].length)\n    };\n}\nfunction parseTimezonePattern(pattern1, dateString1) {\n    var matchResult1 = dateString1.match(pattern1);\n    if (!matchResult1) {\n        return null;\n    }\n    // Input is 'Z'\n    if (matchResult1[0] === \"Z\") {\n        return {\n            value: 0,\n            rest: dateString1.slice(1)\n        };\n    }\n    var sign1 = matchResult1[1] === \"+\" ? 1 : -1;\n    var hours1 = matchResult1[2] ? parseInt(matchResult1[2], 10) : 0;\n    var minutes1 = matchResult1[3] ? parseInt(matchResult1[3], 10) : 0;\n    var seconds1 = matchResult1[5] ? parseInt(matchResult1[5], 10) : 0;\n    return {\n        value: sign1 * (hours1 * millisecondsInHour + minutes1 * millisecondsInMinute + seconds1 * millisecondsInSecond),\n        rest: dateString1.slice(matchResult1[0].length)\n    };\n}\nfunction parseAnyDigitsSigned(dateString1) {\n    return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString1);\n}\nfunction parseNDigits(n1, dateString1) {\n    switch(n1){\n        case 1:\n            return parseNumericPattern(numericPatterns.singleDigit, dateString1);\n        case 2:\n            return parseNumericPattern(numericPatterns.twoDigits, dateString1);\n        case 3:\n            return parseNumericPattern(numericPatterns.threeDigits, dateString1);\n        case 4:\n            return parseNumericPattern(numericPatterns.fourDigits, dateString1);\n        default:\n            return parseNumericPattern(new RegExp(\"^\\\\d{1,\" + n1 + \"}\"), dateString1);\n    }\n}\nfunction parseNDigitsSigned(n1, dateString1) {\n    switch(n1){\n        case 1:\n            return parseNumericPattern(numericPatterns.singleDigitSigned, dateString1);\n        case 2:\n            return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString1);\n        case 3:\n            return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString1);\n        case 4:\n            return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString1);\n        default:\n            return parseNumericPattern(new RegExp(\"^-?\\\\d{1,\" + n1 + \"}\"), dateString1);\n    }\n}\nfunction dayPeriodEnumToHours(dayPeriod1) {\n    switch(dayPeriod1){\n        case \"morning\":\n            return 4;\n        case \"evening\":\n            return 17;\n        case \"pm\":\n        case \"noon\":\n        case \"afternoon\":\n            return 12;\n        case \"am\":\n        case \"midnight\":\n        case \"night\":\n        default:\n            return 0;\n    }\n}\nfunction normalizeTwoDigitYear(twoDigitYear1, currentYear1) {\n    var isCommonEra1 = currentYear1 > 0;\n    // Absolute number of the current year:\n    // 1 -> 1 AC\n    // 0 -> 1 BC\n    // -1 -> 2 BC\n    var absCurrentYear1 = isCommonEra1 ? currentYear1 : 1 - currentYear1;\n    var result1;\n    if (absCurrentYear1 <= 50) {\n        result1 = twoDigitYear1 || 100;\n    } else {\n        var rangeEnd1 = absCurrentYear1 + 50;\n        var rangeEndCentury1 = Math.floor(rangeEnd1 / 100) * 100;\n        var isPreviousCentury1 = twoDigitYear1 >= rangeEnd1 % 100;\n        result1 = twoDigitYear1 + rangeEndCentury1 - (isPreviousCentury1 ? 100 : 0);\n    }\n    return isCommonEra1 ? result1 : 1 - result1;\n}\nfunction isLeapYearIndex$1(year1) {\n    return year1 % 400 === 0 || year1 % 4 === 0 && year1 % 100 !== 0;\n}\n// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\nvar YearParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(YearParser1, _Parser1);\n    var _super1 = _createSuper(YearParser1);\n    function YearParser1() {\n        var _this1;\n        _classCallCheck(this, YearParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 130);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"Y\",\n            \"R\",\n            \"u\",\n            \"w\",\n            \"I\",\n            \"i\",\n            \"e\",\n            \"c\",\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(YearParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1) {\n                var valueCallback1 = function valueCallback1(year1) {\n                    return {\n                        year: year1,\n                        isTwoDigitYear: token1 === \"yy\"\n                    };\n                };\n                switch(token1){\n                    case \"y\":\n                        return mapValue(parseNDigits(4, dateString1), valueCallback1);\n                    case \"yo\":\n                        return mapValue(match1.ordinalNumber(dateString1, {\n                            unit: \"year\"\n                        }), valueCallback1);\n                    default:\n                        return mapValue(parseNDigits(token1.length, dateString1), valueCallback1);\n                }\n            }\n        },\n        {\n            key: \"validate\",\n            value: function validate1(_date1, value1) {\n                return value1.isTwoDigitYear || value1.year > 0;\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, flags1, value1) {\n                var currentYear1 = date1.getUTCFullYear();\n                if (value1.isTwoDigitYear) {\n                    var normalizedTwoDigitYear1 = normalizeTwoDigitYear(value1.year, currentYear1);\n                    date1.setUTCFullYear(normalizedTwoDigitYear1, 0, 1);\n                    date1.setUTCHours(0, 0, 0, 0);\n                    return date1;\n                }\n                var year1 = !(\"era\" in flags1) || flags1.era === 1 ? value1.year : 1 - value1.year;\n                date1.setUTCFullYear(year1, 0, 1);\n                date1.setUTCHours(0, 0, 0, 0);\n                return date1;\n            }\n        }\n    ]);\n    return YearParser1;\n}(Parser);\n// Local week-numbering year\nvar LocalWeekYearParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(LocalWeekYearParser1, _Parser1);\n    var _super1 = _createSuper(LocalWeekYearParser1);\n    function LocalWeekYearParser1() {\n        var _this1;\n        _classCallCheck(this, LocalWeekYearParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 130);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"y\",\n            \"R\",\n            \"u\",\n            \"Q\",\n            \"q\",\n            \"M\",\n            \"L\",\n            \"I\",\n            \"d\",\n            \"D\",\n            \"i\",\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(LocalWeekYearParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1) {\n                var valueCallback1 = function valueCallback1(year1) {\n                    return {\n                        year: year1,\n                        isTwoDigitYear: token1 === \"YY\"\n                    };\n                };\n                switch(token1){\n                    case \"Y\":\n                        return mapValue(parseNDigits(4, dateString1), valueCallback1);\n                    case \"Yo\":\n                        return mapValue(match1.ordinalNumber(dateString1, {\n                            unit: \"year\"\n                        }), valueCallback1);\n                    default:\n                        return mapValue(parseNDigits(token1.length, dateString1), valueCallback1);\n                }\n            }\n        },\n        {\n            key: \"validate\",\n            value: function validate1(_date1, value1) {\n                return value1.isTwoDigitYear || value1.year > 0;\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, flags1, value1, options1) {\n                var currentYear1 = getUTCWeekYear(date1, options1);\n                if (value1.isTwoDigitYear) {\n                    var normalizedTwoDigitYear1 = normalizeTwoDigitYear(value1.year, currentYear1);\n                    date1.setUTCFullYear(normalizedTwoDigitYear1, 0, options1.firstWeekContainsDate);\n                    date1.setUTCHours(0, 0, 0, 0);\n                    return startOfUTCWeek(date1, options1);\n                }\n                var year1 = !(\"era\" in flags1) || flags1.era === 1 ? value1.year : 1 - value1.year;\n                date1.setUTCFullYear(year1, 0, options1.firstWeekContainsDate);\n                date1.setUTCHours(0, 0, 0, 0);\n                return startOfUTCWeek(date1, options1);\n            }\n        }\n    ]);\n    return LocalWeekYearParser1;\n}(Parser);\nvar ISOWeekYearParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(ISOWeekYearParser1, _Parser1);\n    var _super1 = _createSuper(ISOWeekYearParser1);\n    function ISOWeekYearParser1() {\n        var _this1;\n        _classCallCheck(this, ISOWeekYearParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 130);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"G\",\n            \"y\",\n            \"Y\",\n            \"u\",\n            \"Q\",\n            \"q\",\n            \"M\",\n            \"L\",\n            \"w\",\n            \"d\",\n            \"D\",\n            \"e\",\n            \"c\",\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(ISOWeekYearParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1) {\n                if (token1 === \"R\") {\n                    return parseNDigitsSigned(4, dateString1);\n                }\n                return parseNDigitsSigned(token1.length, dateString1);\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(_date1, _flags1, value1) {\n                var firstWeekOfYear1 = new Date(0);\n                firstWeekOfYear1.setUTCFullYear(value1, 0, 4);\n                firstWeekOfYear1.setUTCHours(0, 0, 0, 0);\n                return startOfUTCISOWeek(firstWeekOfYear1);\n            }\n        }\n    ]);\n    return ISOWeekYearParser1;\n}(Parser);\nvar ExtendedYearParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(ExtendedYearParser1, _Parser1);\n    var _super1 = _createSuper(ExtendedYearParser1);\n    function ExtendedYearParser1() {\n        var _this1;\n        _classCallCheck(this, ExtendedYearParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 130);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"G\",\n            \"y\",\n            \"Y\",\n            \"R\",\n            \"w\",\n            \"I\",\n            \"i\",\n            \"e\",\n            \"c\",\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(ExtendedYearParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1) {\n                if (token1 === \"u\") {\n                    return parseNDigitsSigned(4, dateString1);\n                }\n                return parseNDigitsSigned(token1.length, dateString1);\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, _flags1, value1) {\n                date1.setUTCFullYear(value1, 0, 1);\n                date1.setUTCHours(0, 0, 0, 0);\n                return date1;\n            }\n        }\n    ]);\n    return ExtendedYearParser1;\n}(Parser);\nvar QuarterParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(QuarterParser1, _Parser1);\n    var _super1 = _createSuper(QuarterParser1);\n    function QuarterParser1() {\n        var _this1;\n        _classCallCheck(this, QuarterParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 120);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"Y\",\n            \"R\",\n            \"q\",\n            \"M\",\n            \"L\",\n            \"w\",\n            \"I\",\n            \"d\",\n            \"D\",\n            \"i\",\n            \"e\",\n            \"c\",\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(QuarterParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1) {\n                switch(token1){\n                    // 1, 2, 3, 4\n                    case \"Q\":\n                    case \"QQ\":\n                        // 01, 02, 03, 04\n                        return parseNDigits(token1.length, dateString1);\n                    // 1st, 2nd, 3rd, 4th\n                    case \"Qo\":\n                        return match1.ordinalNumber(dateString1, {\n                            unit: \"quarter\"\n                        });\n                    // Q1, Q2, Q3, Q4\n                    case \"QQQ\":\n                        return match1.quarter(dateString1, {\n                            width: \"abbreviated\",\n                            context: \"formatting\"\n                        }) || match1.quarter(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        });\n                    // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n                    case \"QQQQQ\":\n                        return match1.quarter(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        });\n                    // 1st quarter, 2nd quarter, ...\n                    case \"QQQQ\":\n                    default:\n                        return match1.quarter(dateString1, {\n                            width: \"wide\",\n                            context: \"formatting\"\n                        }) || match1.quarter(dateString1, {\n                            width: \"abbreviated\",\n                            context: \"formatting\"\n                        }) || match1.quarter(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        });\n                }\n            }\n        },\n        {\n            key: \"validate\",\n            value: function validate1(_date1, value1) {\n                return value1 >= 1 && value1 <= 4;\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, _flags1, value1) {\n                date1.setUTCMonth((value1 - 1) * 3, 1);\n                date1.setUTCHours(0, 0, 0, 0);\n                return date1;\n            }\n        }\n    ]);\n    return QuarterParser1;\n}(Parser);\nvar StandAloneQuarterParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(StandAloneQuarterParser1, _Parser1);\n    var _super1 = _createSuper(StandAloneQuarterParser1);\n    function StandAloneQuarterParser1() {\n        var _this1;\n        _classCallCheck(this, StandAloneQuarterParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 120);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"Y\",\n            \"R\",\n            \"Q\",\n            \"M\",\n            \"L\",\n            \"w\",\n            \"I\",\n            \"d\",\n            \"D\",\n            \"i\",\n            \"e\",\n            \"c\",\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(StandAloneQuarterParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1) {\n                switch(token1){\n                    // 1, 2, 3, 4\n                    case \"q\":\n                    case \"qq\":\n                        // 01, 02, 03, 04\n                        return parseNDigits(token1.length, dateString1);\n                    // 1st, 2nd, 3rd, 4th\n                    case \"qo\":\n                        return match1.ordinalNumber(dateString1, {\n                            unit: \"quarter\"\n                        });\n                    // Q1, Q2, Q3, Q4\n                    case \"qqq\":\n                        return match1.quarter(dateString1, {\n                            width: \"abbreviated\",\n                            context: \"standalone\"\n                        }) || match1.quarter(dateString1, {\n                            width: \"narrow\",\n                            context: \"standalone\"\n                        });\n                    // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n                    case \"qqqqq\":\n                        return match1.quarter(dateString1, {\n                            width: \"narrow\",\n                            context: \"standalone\"\n                        });\n                    // 1st quarter, 2nd quarter, ...\n                    case \"qqqq\":\n                    default:\n                        return match1.quarter(dateString1, {\n                            width: \"wide\",\n                            context: \"standalone\"\n                        }) || match1.quarter(dateString1, {\n                            width: \"abbreviated\",\n                            context: \"standalone\"\n                        }) || match1.quarter(dateString1, {\n                            width: \"narrow\",\n                            context: \"standalone\"\n                        });\n                }\n            }\n        },\n        {\n            key: \"validate\",\n            value: function validate1(_date1, value1) {\n                return value1 >= 1 && value1 <= 4;\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, _flags1, value1) {\n                date1.setUTCMonth((value1 - 1) * 3, 1);\n                date1.setUTCHours(0, 0, 0, 0);\n                return date1;\n            }\n        }\n    ]);\n    return StandAloneQuarterParser1;\n}(Parser);\nvar MonthParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(MonthParser1, _Parser1);\n    var _super1 = _createSuper(MonthParser1);\n    function MonthParser1() {\n        var _this1;\n        _classCallCheck(this, MonthParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"Y\",\n            \"R\",\n            \"q\",\n            \"Q\",\n            \"L\",\n            \"w\",\n            \"I\",\n            \"D\",\n            \"i\",\n            \"e\",\n            \"c\",\n            \"t\",\n            \"T\"\n        ]);\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 110);\n        return _this1;\n    }\n    _createClass(MonthParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1) {\n                var valueCallback1 = function valueCallback1(value1) {\n                    return value1 - 1;\n                };\n                switch(token1){\n                    // 1, 2, ..., 12\n                    case \"M\":\n                        return mapValue(parseNumericPattern(numericPatterns.month, dateString1), valueCallback1);\n                    // 01, 02, ..., 12\n                    case \"MM\":\n                        return mapValue(parseNDigits(2, dateString1), valueCallback1);\n                    // 1st, 2nd, ..., 12th\n                    case \"Mo\":\n                        return mapValue(match1.ordinalNumber(dateString1, {\n                            unit: \"month\"\n                        }), valueCallback1);\n                    // Jan, Feb, ..., Dec\n                    case \"MMM\":\n                        return match1.month(dateString1, {\n                            width: \"abbreviated\",\n                            context: \"formatting\"\n                        }) || match1.month(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        });\n                    // J, F, ..., D\n                    case \"MMMMM\":\n                        return match1.month(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        });\n                    // January, February, ..., December\n                    case \"MMMM\":\n                    default:\n                        return match1.month(dateString1, {\n                            width: \"wide\",\n                            context: \"formatting\"\n                        }) || match1.month(dateString1, {\n                            width: \"abbreviated\",\n                            context: \"formatting\"\n                        }) || match1.month(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        });\n                }\n            }\n        },\n        {\n            key: \"validate\",\n            value: function validate1(_date1, value1) {\n                return value1 >= 0 && value1 <= 11;\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, _flags1, value1) {\n                date1.setUTCMonth(value1, 1);\n                date1.setUTCHours(0, 0, 0, 0);\n                return date1;\n            }\n        }\n    ]);\n    return MonthParser1;\n}(Parser);\nvar StandAloneMonthParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(StandAloneMonthParser1, _Parser1);\n    var _super1 = _createSuper(StandAloneMonthParser1);\n    function StandAloneMonthParser1() {\n        var _this1;\n        _classCallCheck(this, StandAloneMonthParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 110);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"Y\",\n            \"R\",\n            \"q\",\n            \"Q\",\n            \"M\",\n            \"w\",\n            \"I\",\n            \"D\",\n            \"i\",\n            \"e\",\n            \"c\",\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(StandAloneMonthParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1) {\n                var valueCallback1 = function valueCallback1(value1) {\n                    return value1 - 1;\n                };\n                switch(token1){\n                    // 1, 2, ..., 12\n                    case \"L\":\n                        return mapValue(parseNumericPattern(numericPatterns.month, dateString1), valueCallback1);\n                    // 01, 02, ..., 12\n                    case \"LL\":\n                        return mapValue(parseNDigits(2, dateString1), valueCallback1);\n                    // 1st, 2nd, ..., 12th\n                    case \"Lo\":\n                        return mapValue(match1.ordinalNumber(dateString1, {\n                            unit: \"month\"\n                        }), valueCallback1);\n                    // Jan, Feb, ..., Dec\n                    case \"LLL\":\n                        return match1.month(dateString1, {\n                            width: \"abbreviated\",\n                            context: \"standalone\"\n                        }) || match1.month(dateString1, {\n                            width: \"narrow\",\n                            context: \"standalone\"\n                        });\n                    // J, F, ..., D\n                    case \"LLLLL\":\n                        return match1.month(dateString1, {\n                            width: \"narrow\",\n                            context: \"standalone\"\n                        });\n                    // January, February, ..., December\n                    case \"LLLL\":\n                    default:\n                        return match1.month(dateString1, {\n                            width: \"wide\",\n                            context: \"standalone\"\n                        }) || match1.month(dateString1, {\n                            width: \"abbreviated\",\n                            context: \"standalone\"\n                        }) || match1.month(dateString1, {\n                            width: \"narrow\",\n                            context: \"standalone\"\n                        });\n                }\n            }\n        },\n        {\n            key: \"validate\",\n            value: function validate1(_date1, value1) {\n                return value1 >= 0 && value1 <= 11;\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, _flags1, value1) {\n                date1.setUTCMonth(value1, 1);\n                date1.setUTCHours(0, 0, 0, 0);\n                return date1;\n            }\n        }\n    ]);\n    return StandAloneMonthParser1;\n}(Parser);\nfunction setUTCWeek(dirtyDate1, dirtyWeek1, options1) {\n    requiredArgs(2, arguments);\n    var date1 = toDate(dirtyDate1);\n    var week1 = toInteger(dirtyWeek1);\n    var diff1 = getUTCWeek(date1, options1) - week1;\n    date1.setUTCDate(date1.getUTCDate() - diff1 * 7);\n    return date1;\n}\nvar LocalWeekParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(LocalWeekParser1, _Parser1);\n    var _super1 = _createSuper(LocalWeekParser1);\n    function LocalWeekParser1() {\n        var _this1;\n        _classCallCheck(this, LocalWeekParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 100);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"y\",\n            \"R\",\n            \"u\",\n            \"q\",\n            \"Q\",\n            \"M\",\n            \"L\",\n            \"I\",\n            \"d\",\n            \"D\",\n            \"i\",\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(LocalWeekParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1) {\n                switch(token1){\n                    case \"w\":\n                        return parseNumericPattern(numericPatterns.week, dateString1);\n                    case \"wo\":\n                        return match1.ordinalNumber(dateString1, {\n                            unit: \"week\"\n                        });\n                    default:\n                        return parseNDigits(token1.length, dateString1);\n                }\n            }\n        },\n        {\n            key: \"validate\",\n            value: function validate1(_date1, value1) {\n                return value1 >= 1 && value1 <= 53;\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, _flags1, value1, options1) {\n                return startOfUTCWeek(setUTCWeek(date1, value1, options1), options1);\n            }\n        }\n    ]);\n    return LocalWeekParser1;\n}(Parser);\nfunction setUTCISOWeek(dirtyDate1, dirtyISOWeek1) {\n    requiredArgs(2, arguments);\n    var date1 = toDate(dirtyDate1);\n    var isoWeek1 = toInteger(dirtyISOWeek1);\n    var diff1 = getUTCISOWeek(date1) - isoWeek1;\n    date1.setUTCDate(date1.getUTCDate() - diff1 * 7);\n    return date1;\n}\nvar ISOWeekParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(ISOWeekParser1, _Parser1);\n    var _super1 = _createSuper(ISOWeekParser1);\n    function ISOWeekParser1() {\n        var _this1;\n        _classCallCheck(this, ISOWeekParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 100);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"y\",\n            \"Y\",\n            \"u\",\n            \"q\",\n            \"Q\",\n            \"M\",\n            \"L\",\n            \"w\",\n            \"d\",\n            \"D\",\n            \"e\",\n            \"c\",\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(ISOWeekParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1) {\n                switch(token1){\n                    case \"I\":\n                        return parseNumericPattern(numericPatterns.week, dateString1);\n                    case \"Io\":\n                        return match1.ordinalNumber(dateString1, {\n                            unit: \"week\"\n                        });\n                    default:\n                        return parseNDigits(token1.length, dateString1);\n                }\n            }\n        },\n        {\n            key: \"validate\",\n            value: function validate1(_date1, value1) {\n                return value1 >= 1 && value1 <= 53;\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, _flags1, value1) {\n                return startOfUTCISOWeek(setUTCISOWeek(date1, value1));\n            }\n        }\n    ]);\n    return ISOWeekParser1;\n}(Parser);\nvar DAYS_IN_MONTH = [\n    31,\n    28,\n    31,\n    30,\n    31,\n    30,\n    31,\n    31,\n    30,\n    31,\n    30,\n    31\n];\nvar DAYS_IN_MONTH_LEAP_YEAR = [\n    31,\n    29,\n    31,\n    30,\n    31,\n    30,\n    31,\n    31,\n    30,\n    31,\n    30,\n    31\n];\n// Day of the month\nvar DateParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(DateParser1, _Parser1);\n    var _super1 = _createSuper(DateParser1);\n    function DateParser1() {\n        var _this1;\n        _classCallCheck(this, DateParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 90);\n        _defineProperty(_assertThisInitialized$1(_this1), \"subPriority\", 1);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"Y\",\n            \"R\",\n            \"q\",\n            \"Q\",\n            \"w\",\n            \"I\",\n            \"D\",\n            \"i\",\n            \"e\",\n            \"c\",\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(DateParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1) {\n                switch(token1){\n                    case \"d\":\n                        return parseNumericPattern(numericPatterns.date, dateString1);\n                    case \"do\":\n                        return match1.ordinalNumber(dateString1, {\n                            unit: \"date\"\n                        });\n                    default:\n                        return parseNDigits(token1.length, dateString1);\n                }\n            }\n        },\n        {\n            key: \"validate\",\n            value: function validate1(date1, value1) {\n                var year1 = date1.getUTCFullYear();\n                var isLeapYear1 = isLeapYearIndex$1(year1);\n                var month1 = date1.getUTCMonth();\n                if (isLeapYear1) {\n                    return value1 >= 1 && value1 <= DAYS_IN_MONTH_LEAP_YEAR[month1];\n                } else {\n                    return value1 >= 1 && value1 <= DAYS_IN_MONTH[month1];\n                }\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, _flags1, value1) {\n                date1.setUTCDate(value1);\n                date1.setUTCHours(0, 0, 0, 0);\n                return date1;\n            }\n        }\n    ]);\n    return DateParser1;\n}(Parser);\nvar DayOfYearParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(DayOfYearParser1, _Parser1);\n    var _super1 = _createSuper(DayOfYearParser1);\n    function DayOfYearParser1() {\n        var _this1;\n        _classCallCheck(this, DayOfYearParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 90);\n        _defineProperty(_assertThisInitialized$1(_this1), \"subpriority\", 1);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"Y\",\n            \"R\",\n            \"q\",\n            \"Q\",\n            \"M\",\n            \"L\",\n            \"w\",\n            \"I\",\n            \"d\",\n            \"E\",\n            \"i\",\n            \"e\",\n            \"c\",\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(DayOfYearParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1) {\n                switch(token1){\n                    case \"D\":\n                    case \"DD\":\n                        return parseNumericPattern(numericPatterns.dayOfYear, dateString1);\n                    case \"Do\":\n                        return match1.ordinalNumber(dateString1, {\n                            unit: \"date\"\n                        });\n                    default:\n                        return parseNDigits(token1.length, dateString1);\n                }\n            }\n        },\n        {\n            key: \"validate\",\n            value: function validate1(date1, value1) {\n                var year1 = date1.getUTCFullYear();\n                var isLeapYear1 = isLeapYearIndex$1(year1);\n                if (isLeapYear1) {\n                    return value1 >= 1 && value1 <= 366;\n                } else {\n                    return value1 >= 1 && value1 <= 365;\n                }\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, _flags1, value1) {\n                date1.setUTCMonth(0, value1);\n                date1.setUTCHours(0, 0, 0, 0);\n                return date1;\n            }\n        }\n    ]);\n    return DayOfYearParser1;\n}(Parser);\nfunction setUTCDay(dirtyDate1, dirtyDay1, options1) {\n    var _ref1, _ref21, _ref31, _options$weekStartsOn1, _options$locale1, _options$locale$optio1, _defaultOptions$local1, _defaultOptions$local21;\n    requiredArgs(2, arguments);\n    var defaultOptions1 = getDefaultOptions();\n    var weekStartsOn1 = toInteger((_ref1 = (_ref21 = (_ref31 = (_options$weekStartsOn1 = options1 === null || options1 === void 0 ? void 0 : options1.weekStartsOn) !== null && _options$weekStartsOn1 !== void 0 ? _options$weekStartsOn1 : options1 === null || options1 === void 0 ? void 0 : (_options$locale1 = options1.locale) === null || _options$locale1 === void 0 ? void 0 : (_options$locale$optio1 = _options$locale1.options) === null || _options$locale$optio1 === void 0 ? void 0 : _options$locale$optio1.weekStartsOn) !== null && _ref31 !== void 0 ? _ref31 : defaultOptions1.weekStartsOn) !== null && _ref21 !== void 0 ? _ref21 : (_defaultOptions$local1 = defaultOptions1.locale) === null || _defaultOptions$local1 === void 0 ? void 0 : (_defaultOptions$local21 = _defaultOptions$local1.options) === null || _defaultOptions$local21 === void 0 ? void 0 : _defaultOptions$local21.weekStartsOn) !== null && _ref1 !== void 0 ? _ref1 : 0);\n    // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n    if (!(weekStartsOn1 >= 0 && weekStartsOn1 <= 6)) {\n        throw new RangeError(\"weekStartsOn must be between 0 and 6 inclusively\");\n    }\n    var date1 = toDate(dirtyDate1);\n    var day1 = toInteger(dirtyDay1);\n    var currentDay1 = date1.getUTCDay();\n    var remainder1 = day1 % 7;\n    var dayIndex1 = (remainder1 + 7) % 7;\n    var diff1 = (dayIndex1 < weekStartsOn1 ? 7 : 0) + day1 - currentDay1;\n    date1.setUTCDate(date1.getUTCDate() + diff1);\n    return date1;\n}\nvar DayParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(DayParser1, _Parser1);\n    var _super1 = _createSuper(DayParser1);\n    function DayParser1() {\n        var _this1;\n        _classCallCheck(this, DayParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 90);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"D\",\n            \"i\",\n            \"e\",\n            \"c\",\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(DayParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1) {\n                switch(token1){\n                    // Tue\n                    case \"E\":\n                    case \"EE\":\n                    case \"EEE\":\n                        return match1.day(dateString1, {\n                            width: \"abbreviated\",\n                            context: \"formatting\"\n                        }) || match1.day(dateString1, {\n                            width: \"short\",\n                            context: \"formatting\"\n                        }) || match1.day(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        });\n                    // T\n                    case \"EEEEE\":\n                        return match1.day(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        });\n                    // Tu\n                    case \"EEEEEE\":\n                        return match1.day(dateString1, {\n                            width: \"short\",\n                            context: \"formatting\"\n                        }) || match1.day(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        });\n                    // Tuesday\n                    case \"EEEE\":\n                    default:\n                        return match1.day(dateString1, {\n                            width: \"wide\",\n                            context: \"formatting\"\n                        }) || match1.day(dateString1, {\n                            width: \"abbreviated\",\n                            context: \"formatting\"\n                        }) || match1.day(dateString1, {\n                            width: \"short\",\n                            context: \"formatting\"\n                        }) || match1.day(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        });\n                }\n            }\n        },\n        {\n            key: \"validate\",\n            value: function validate1(_date1, value1) {\n                return value1 >= 0 && value1 <= 6;\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, _flags1, value1, options1) {\n                date1 = setUTCDay(date1, value1, options1);\n                date1.setUTCHours(0, 0, 0, 0);\n                return date1;\n            }\n        }\n    ]);\n    return DayParser1;\n}(Parser);\nvar LocalDayParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(LocalDayParser1, _Parser1);\n    var _super1 = _createSuper(LocalDayParser1);\n    function LocalDayParser1() {\n        var _this1;\n        _classCallCheck(this, LocalDayParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 90);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"y\",\n            \"R\",\n            \"u\",\n            \"q\",\n            \"Q\",\n            \"M\",\n            \"L\",\n            \"I\",\n            \"d\",\n            \"D\",\n            \"E\",\n            \"i\",\n            \"c\",\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(LocalDayParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1, options1) {\n                var valueCallback1 = function valueCallback1(value1) {\n                    var wholeWeekDays1 = Math.floor((value1 - 1) / 7) * 7;\n                    return (value1 + options1.weekStartsOn + 6) % 7 + wholeWeekDays1;\n                };\n                switch(token1){\n                    // 3\n                    case \"e\":\n                    case \"ee\":\n                        // 03\n                        return mapValue(parseNDigits(token1.length, dateString1), valueCallback1);\n                    // 3rd\n                    case \"eo\":\n                        return mapValue(match1.ordinalNumber(dateString1, {\n                            unit: \"day\"\n                        }), valueCallback1);\n                    // Tue\n                    case \"eee\":\n                        return match1.day(dateString1, {\n                            width: \"abbreviated\",\n                            context: \"formatting\"\n                        }) || match1.day(dateString1, {\n                            width: \"short\",\n                            context: \"formatting\"\n                        }) || match1.day(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        });\n                    // T\n                    case \"eeeee\":\n                        return match1.day(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        });\n                    // Tu\n                    case \"eeeeee\":\n                        return match1.day(dateString1, {\n                            width: \"short\",\n                            context: \"formatting\"\n                        }) || match1.day(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        });\n                    // Tuesday\n                    case \"eeee\":\n                    default:\n                        return match1.day(dateString1, {\n                            width: \"wide\",\n                            context: \"formatting\"\n                        }) || match1.day(dateString1, {\n                            width: \"abbreviated\",\n                            context: \"formatting\"\n                        }) || match1.day(dateString1, {\n                            width: \"short\",\n                            context: \"formatting\"\n                        }) || match1.day(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        });\n                }\n            }\n        },\n        {\n            key: \"validate\",\n            value: function validate1(_date1, value1) {\n                return value1 >= 0 && value1 <= 6;\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, _flags1, value1, options1) {\n                date1 = setUTCDay(date1, value1, options1);\n                date1.setUTCHours(0, 0, 0, 0);\n                return date1;\n            }\n        }\n    ]);\n    return LocalDayParser1;\n}(Parser);\nvar StandAloneLocalDayParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(StandAloneLocalDayParser1, _Parser1);\n    var _super1 = _createSuper(StandAloneLocalDayParser1);\n    function StandAloneLocalDayParser1() {\n        var _this1;\n        _classCallCheck(this, StandAloneLocalDayParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 90);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"y\",\n            \"R\",\n            \"u\",\n            \"q\",\n            \"Q\",\n            \"M\",\n            \"L\",\n            \"I\",\n            \"d\",\n            \"D\",\n            \"E\",\n            \"i\",\n            \"e\",\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(StandAloneLocalDayParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1, options1) {\n                var valueCallback1 = function valueCallback1(value1) {\n                    var wholeWeekDays1 = Math.floor((value1 - 1) / 7) * 7;\n                    return (value1 + options1.weekStartsOn + 6) % 7 + wholeWeekDays1;\n                };\n                switch(token1){\n                    // 3\n                    case \"c\":\n                    case \"cc\":\n                        // 03\n                        return mapValue(parseNDigits(token1.length, dateString1), valueCallback1);\n                    // 3rd\n                    case \"co\":\n                        return mapValue(match1.ordinalNumber(dateString1, {\n                            unit: \"day\"\n                        }), valueCallback1);\n                    // Tue\n                    case \"ccc\":\n                        return match1.day(dateString1, {\n                            width: \"abbreviated\",\n                            context: \"standalone\"\n                        }) || match1.day(dateString1, {\n                            width: \"short\",\n                            context: \"standalone\"\n                        }) || match1.day(dateString1, {\n                            width: \"narrow\",\n                            context: \"standalone\"\n                        });\n                    // T\n                    case \"ccccc\":\n                        return match1.day(dateString1, {\n                            width: \"narrow\",\n                            context: \"standalone\"\n                        });\n                    // Tu\n                    case \"cccccc\":\n                        return match1.day(dateString1, {\n                            width: \"short\",\n                            context: \"standalone\"\n                        }) || match1.day(dateString1, {\n                            width: \"narrow\",\n                            context: \"standalone\"\n                        });\n                    // Tuesday\n                    case \"cccc\":\n                    default:\n                        return match1.day(dateString1, {\n                            width: \"wide\",\n                            context: \"standalone\"\n                        }) || match1.day(dateString1, {\n                            width: \"abbreviated\",\n                            context: \"standalone\"\n                        }) || match1.day(dateString1, {\n                            width: \"short\",\n                            context: \"standalone\"\n                        }) || match1.day(dateString1, {\n                            width: \"narrow\",\n                            context: \"standalone\"\n                        });\n                }\n            }\n        },\n        {\n            key: \"validate\",\n            value: function validate1(_date1, value1) {\n                return value1 >= 0 && value1 <= 6;\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, _flags1, value1, options1) {\n                date1 = setUTCDay(date1, value1, options1);\n                date1.setUTCHours(0, 0, 0, 0);\n                return date1;\n            }\n        }\n    ]);\n    return StandAloneLocalDayParser1;\n}(Parser);\nfunction setUTCISODay(dirtyDate1, dirtyDay1) {\n    requiredArgs(2, arguments);\n    var day1 = toInteger(dirtyDay1);\n    if (day1 % 7 === 0) {\n        day1 = day1 - 7;\n    }\n    var weekStartsOn1 = 1;\n    var date1 = toDate(dirtyDate1);\n    var currentDay1 = date1.getUTCDay();\n    var remainder1 = day1 % 7;\n    var dayIndex1 = (remainder1 + 7) % 7;\n    var diff1 = (dayIndex1 < weekStartsOn1 ? 7 : 0) + day1 - currentDay1;\n    date1.setUTCDate(date1.getUTCDate() + diff1);\n    return date1;\n}\nvar ISODayParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(ISODayParser1, _Parser1);\n    var _super1 = _createSuper(ISODayParser1);\n    function ISODayParser1() {\n        var _this1;\n        _classCallCheck(this, ISODayParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 90);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"y\",\n            \"Y\",\n            \"u\",\n            \"q\",\n            \"Q\",\n            \"M\",\n            \"L\",\n            \"w\",\n            \"d\",\n            \"D\",\n            \"E\",\n            \"e\",\n            \"c\",\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(ISODayParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1) {\n                var valueCallback1 = function valueCallback1(value1) {\n                    if (value1 === 0) {\n                        return 7;\n                    }\n                    return value1;\n                };\n                switch(token1){\n                    // 2\n                    case \"i\":\n                    case \"ii\":\n                        // 02\n                        return parseNDigits(token1.length, dateString1);\n                    // 2nd\n                    case \"io\":\n                        return match1.ordinalNumber(dateString1, {\n                            unit: \"day\"\n                        });\n                    // Tue\n                    case \"iii\":\n                        return mapValue(match1.day(dateString1, {\n                            width: \"abbreviated\",\n                            context: \"formatting\"\n                        }) || match1.day(dateString1, {\n                            width: \"short\",\n                            context: \"formatting\"\n                        }) || match1.day(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        }), valueCallback1);\n                    // T\n                    case \"iiiii\":\n                        return mapValue(match1.day(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        }), valueCallback1);\n                    // Tu\n                    case \"iiiiii\":\n                        return mapValue(match1.day(dateString1, {\n                            width: \"short\",\n                            context: \"formatting\"\n                        }) || match1.day(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        }), valueCallback1);\n                    // Tuesday\n                    case \"iiii\":\n                    default:\n                        return mapValue(match1.day(dateString1, {\n                            width: \"wide\",\n                            context: \"formatting\"\n                        }) || match1.day(dateString1, {\n                            width: \"abbreviated\",\n                            context: \"formatting\"\n                        }) || match1.day(dateString1, {\n                            width: \"short\",\n                            context: \"formatting\"\n                        }) || match1.day(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        }), valueCallback1);\n                }\n            }\n        },\n        {\n            key: \"validate\",\n            value: function validate1(_date1, value1) {\n                return value1 >= 1 && value1 <= 7;\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, _flags1, value1) {\n                date1 = setUTCISODay(date1, value1);\n                date1.setUTCHours(0, 0, 0, 0);\n                return date1;\n            }\n        }\n    ]);\n    return ISODayParser1;\n}(Parser);\nvar AMPMParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(AMPMParser1, _Parser1);\n    var _super1 = _createSuper(AMPMParser1);\n    function AMPMParser1() {\n        var _this1;\n        _classCallCheck(this, AMPMParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 80);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"b\",\n            \"B\",\n            \"H\",\n            \"k\",\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(AMPMParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1) {\n                switch(token1){\n                    case \"a\":\n                    case \"aa\":\n                    case \"aaa\":\n                        return match1.dayPeriod(dateString1, {\n                            width: \"abbreviated\",\n                            context: \"formatting\"\n                        }) || match1.dayPeriod(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        });\n                    case \"aaaaa\":\n                        return match1.dayPeriod(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        });\n                    case \"aaaa\":\n                    default:\n                        return match1.dayPeriod(dateString1, {\n                            width: \"wide\",\n                            context: \"formatting\"\n                        }) || match1.dayPeriod(dateString1, {\n                            width: \"abbreviated\",\n                            context: \"formatting\"\n                        }) || match1.dayPeriod(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        });\n                }\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, _flags1, value1) {\n                date1.setUTCHours(dayPeriodEnumToHours(value1), 0, 0, 0);\n                return date1;\n            }\n        }\n    ]);\n    return AMPMParser1;\n}(Parser);\nvar AMPMMidnightParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(AMPMMidnightParser1, _Parser1);\n    var _super1 = _createSuper(AMPMMidnightParser1);\n    function AMPMMidnightParser1() {\n        var _this1;\n        _classCallCheck(this, AMPMMidnightParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 80);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"a\",\n            \"B\",\n            \"H\",\n            \"k\",\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(AMPMMidnightParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1) {\n                switch(token1){\n                    case \"b\":\n                    case \"bb\":\n                    case \"bbb\":\n                        return match1.dayPeriod(dateString1, {\n                            width: \"abbreviated\",\n                            context: \"formatting\"\n                        }) || match1.dayPeriod(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        });\n                    case \"bbbbb\":\n                        return match1.dayPeriod(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        });\n                    case \"bbbb\":\n                    default:\n                        return match1.dayPeriod(dateString1, {\n                            width: \"wide\",\n                            context: \"formatting\"\n                        }) || match1.dayPeriod(dateString1, {\n                            width: \"abbreviated\",\n                            context: \"formatting\"\n                        }) || match1.dayPeriod(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        });\n                }\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, _flags1, value1) {\n                date1.setUTCHours(dayPeriodEnumToHours(value1), 0, 0, 0);\n                return date1;\n            }\n        }\n    ]);\n    return AMPMMidnightParser1;\n}(Parser);\nvar DayPeriodParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(DayPeriodParser1, _Parser1);\n    var _super1 = _createSuper(DayPeriodParser1);\n    function DayPeriodParser1() {\n        var _this1;\n        _classCallCheck(this, DayPeriodParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 80);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"a\",\n            \"b\",\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(DayPeriodParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1) {\n                switch(token1){\n                    case \"B\":\n                    case \"BB\":\n                    case \"BBB\":\n                        return match1.dayPeriod(dateString1, {\n                            width: \"abbreviated\",\n                            context: \"formatting\"\n                        }) || match1.dayPeriod(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        });\n                    case \"BBBBB\":\n                        return match1.dayPeriod(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        });\n                    case \"BBBB\":\n                    default:\n                        return match1.dayPeriod(dateString1, {\n                            width: \"wide\",\n                            context: \"formatting\"\n                        }) || match1.dayPeriod(dateString1, {\n                            width: \"abbreviated\",\n                            context: \"formatting\"\n                        }) || match1.dayPeriod(dateString1, {\n                            width: \"narrow\",\n                            context: \"formatting\"\n                        });\n                }\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, _flags1, value1) {\n                date1.setUTCHours(dayPeriodEnumToHours(value1), 0, 0, 0);\n                return date1;\n            }\n        }\n    ]);\n    return DayPeriodParser1;\n}(Parser);\nvar Hour1to12Parser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(Hour1to12Parser1, _Parser1);\n    var _super1 = _createSuper(Hour1to12Parser1);\n    function Hour1to12Parser1() {\n        var _this1;\n        _classCallCheck(this, Hour1to12Parser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 70);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"H\",\n            \"K\",\n            \"k\",\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(Hour1to12Parser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1) {\n                switch(token1){\n                    case \"h\":\n                        return parseNumericPattern(numericPatterns.hour12h, dateString1);\n                    case \"ho\":\n                        return match1.ordinalNumber(dateString1, {\n                            unit: \"hour\"\n                        });\n                    default:\n                        return parseNDigits(token1.length, dateString1);\n                }\n            }\n        },\n        {\n            key: \"validate\",\n            value: function validate1(_date1, value1) {\n                return value1 >= 1 && value1 <= 12;\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, _flags1, value1) {\n                var isPM1 = date1.getUTCHours() >= 12;\n                if (isPM1 && value1 < 12) {\n                    date1.setUTCHours(value1 + 12, 0, 0, 0);\n                } else if (!isPM1 && value1 === 12) {\n                    date1.setUTCHours(0, 0, 0, 0);\n                } else {\n                    date1.setUTCHours(value1, 0, 0, 0);\n                }\n                return date1;\n            }\n        }\n    ]);\n    return Hour1to12Parser1;\n}(Parser);\nvar Hour0to23Parser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(Hour0to23Parser1, _Parser1);\n    var _super1 = _createSuper(Hour0to23Parser1);\n    function Hour0to23Parser1() {\n        var _this1;\n        _classCallCheck(this, Hour0to23Parser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 70);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"a\",\n            \"b\",\n            \"h\",\n            \"K\",\n            \"k\",\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(Hour0to23Parser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1) {\n                switch(token1){\n                    case \"H\":\n                        return parseNumericPattern(numericPatterns.hour23h, dateString1);\n                    case \"Ho\":\n                        return match1.ordinalNumber(dateString1, {\n                            unit: \"hour\"\n                        });\n                    default:\n                        return parseNDigits(token1.length, dateString1);\n                }\n            }\n        },\n        {\n            key: \"validate\",\n            value: function validate1(_date1, value1) {\n                return value1 >= 0 && value1 <= 23;\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, _flags1, value1) {\n                date1.setUTCHours(value1, 0, 0, 0);\n                return date1;\n            }\n        }\n    ]);\n    return Hour0to23Parser1;\n}(Parser);\nvar Hour0To11Parser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(Hour0To11Parser1, _Parser1);\n    var _super1 = _createSuper(Hour0To11Parser1);\n    function Hour0To11Parser1() {\n        var _this1;\n        _classCallCheck(this, Hour0To11Parser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 70);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"h\",\n            \"H\",\n            \"k\",\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(Hour0To11Parser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1) {\n                switch(token1){\n                    case \"K\":\n                        return parseNumericPattern(numericPatterns.hour11h, dateString1);\n                    case \"Ko\":\n                        return match1.ordinalNumber(dateString1, {\n                            unit: \"hour\"\n                        });\n                    default:\n                        return parseNDigits(token1.length, dateString1);\n                }\n            }\n        },\n        {\n            key: \"validate\",\n            value: function validate1(_date1, value1) {\n                return value1 >= 0 && value1 <= 11;\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, _flags1, value1) {\n                var isPM1 = date1.getUTCHours() >= 12;\n                if (isPM1 && value1 < 12) {\n                    date1.setUTCHours(value1 + 12, 0, 0, 0);\n                } else {\n                    date1.setUTCHours(value1, 0, 0, 0);\n                }\n                return date1;\n            }\n        }\n    ]);\n    return Hour0To11Parser1;\n}(Parser);\nvar Hour1To24Parser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(Hour1To24Parser1, _Parser1);\n    var _super1 = _createSuper(Hour1To24Parser1);\n    function Hour1To24Parser1() {\n        var _this1;\n        _classCallCheck(this, Hour1To24Parser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 70);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"a\",\n            \"b\",\n            \"h\",\n            \"H\",\n            \"K\",\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(Hour1To24Parser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1) {\n                switch(token1){\n                    case \"k\":\n                        return parseNumericPattern(numericPatterns.hour24h, dateString1);\n                    case \"ko\":\n                        return match1.ordinalNumber(dateString1, {\n                            unit: \"hour\"\n                        });\n                    default:\n                        return parseNDigits(token1.length, dateString1);\n                }\n            }\n        },\n        {\n            key: \"validate\",\n            value: function validate1(_date1, value1) {\n                return value1 >= 1 && value1 <= 24;\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, _flags1, value1) {\n                var hours1 = value1 <= 24 ? value1 % 24 : value1;\n                date1.setUTCHours(hours1, 0, 0, 0);\n                return date1;\n            }\n        }\n    ]);\n    return Hour1To24Parser1;\n}(Parser);\nvar MinuteParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(MinuteParser1, _Parser1);\n    var _super1 = _createSuper(MinuteParser1);\n    function MinuteParser1() {\n        var _this1;\n        _classCallCheck(this, MinuteParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 60);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(MinuteParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1) {\n                switch(token1){\n                    case \"m\":\n                        return parseNumericPattern(numericPatterns.minute, dateString1);\n                    case \"mo\":\n                        return match1.ordinalNumber(dateString1, {\n                            unit: \"minute\"\n                        });\n                    default:\n                        return parseNDigits(token1.length, dateString1);\n                }\n            }\n        },\n        {\n            key: \"validate\",\n            value: function validate1(_date1, value1) {\n                return value1 >= 0 && value1 <= 59;\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, _flags1, value1) {\n                date1.setUTCMinutes(value1, 0, 0);\n                return date1;\n            }\n        }\n    ]);\n    return MinuteParser1;\n}(Parser);\nvar SecondParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(SecondParser1, _Parser1);\n    var _super1 = _createSuper(SecondParser1);\n    function SecondParser1() {\n        var _this1;\n        _classCallCheck(this, SecondParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 50);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(SecondParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1, match1) {\n                switch(token1){\n                    case \"s\":\n                        return parseNumericPattern(numericPatterns.second, dateString1);\n                    case \"so\":\n                        return match1.ordinalNumber(dateString1, {\n                            unit: \"second\"\n                        });\n                    default:\n                        return parseNDigits(token1.length, dateString1);\n                }\n            }\n        },\n        {\n            key: \"validate\",\n            value: function validate1(_date1, value1) {\n                return value1 >= 0 && value1 <= 59;\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, _flags1, value1) {\n                date1.setUTCSeconds(value1, 0);\n                return date1;\n            }\n        }\n    ]);\n    return SecondParser1;\n}(Parser);\nvar FractionOfSecondParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(FractionOfSecondParser1, _Parser1);\n    var _super1 = _createSuper(FractionOfSecondParser1);\n    function FractionOfSecondParser1() {\n        var _this1;\n        _classCallCheck(this, FractionOfSecondParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 30);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"t\",\n            \"T\"\n        ]);\n        return _this1;\n    }\n    _createClass(FractionOfSecondParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1) {\n                var valueCallback1 = function valueCallback1(value1) {\n                    return Math.floor(value1 * Math.pow(10, -token1.length + 3));\n                };\n                return mapValue(parseNDigits(token1.length, dateString1), valueCallback1);\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, _flags1, value1) {\n                date1.setUTCMilliseconds(value1);\n                return date1;\n            }\n        }\n    ]);\n    return FractionOfSecondParser1;\n}(Parser);\nvar ISOTimezoneWithZParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(ISOTimezoneWithZParser1, _Parser1);\n    var _super1 = _createSuper(ISOTimezoneWithZParser1);\n    function ISOTimezoneWithZParser1() {\n        var _this1;\n        _classCallCheck(this, ISOTimezoneWithZParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 10);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"t\",\n            \"T\",\n            \"x\"\n        ]);\n        return _this1;\n    }\n    _createClass(ISOTimezoneWithZParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1) {\n                switch(token1){\n                    case \"X\":\n                        return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString1);\n                    case \"XX\":\n                        return parseTimezonePattern(timezonePatterns.basic, dateString1);\n                    case \"XXXX\":\n                        return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString1);\n                    case \"XXXXX\":\n                        return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString1);\n                    case \"XXX\":\n                    default:\n                        return parseTimezonePattern(timezonePatterns.extended, dateString1);\n                }\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, flags1, value1) {\n                if (flags1.timestampIsSet) {\n                    return date1;\n                }\n                return new Date(date1.getTime() - value1);\n            }\n        }\n    ]);\n    return ISOTimezoneWithZParser1;\n}(Parser);\nvar ISOTimezoneParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(ISOTimezoneParser1, _Parser1);\n    var _super1 = _createSuper(ISOTimezoneParser1);\n    function ISOTimezoneParser1() {\n        var _this1;\n        _classCallCheck(this, ISOTimezoneParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 10);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", [\n            \"t\",\n            \"T\",\n            \"X\"\n        ]);\n        return _this1;\n    }\n    _createClass(ISOTimezoneParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1, token1) {\n                switch(token1){\n                    case \"x\":\n                        return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString1);\n                    case \"xx\":\n                        return parseTimezonePattern(timezonePatterns.basic, dateString1);\n                    case \"xxxx\":\n                        return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString1);\n                    case \"xxxxx\":\n                        return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString1);\n                    case \"xxx\":\n                    default:\n                        return parseTimezonePattern(timezonePatterns.extended, dateString1);\n                }\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(date1, flags1, value1) {\n                if (flags1.timestampIsSet) {\n                    return date1;\n                }\n                return new Date(date1.getTime() - value1);\n            }\n        }\n    ]);\n    return ISOTimezoneParser1;\n}(Parser);\nvar TimestampSecondsParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(TimestampSecondsParser1, _Parser1);\n    var _super1 = _createSuper(TimestampSecondsParser1);\n    function TimestampSecondsParser1() {\n        var _this1;\n        _classCallCheck(this, TimestampSecondsParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 40);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", \"*\");\n        return _this1;\n    }\n    _createClass(TimestampSecondsParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1) {\n                return parseAnyDigitsSigned(dateString1);\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(_date1, _flags1, value1) {\n                return [\n                    new Date(value1 * 1000),\n                    {\n                        timestampIsSet: true\n                    }\n                ];\n            }\n        }\n    ]);\n    return TimestampSecondsParser1;\n}(Parser);\nvar TimestampMillisecondsParser = /*#__PURE__*/ function(_Parser1) {\n    _inherits(TimestampMillisecondsParser1, _Parser1);\n    var _super1 = _createSuper(TimestampMillisecondsParser1);\n    function TimestampMillisecondsParser1() {\n        var _this1;\n        _classCallCheck(this, TimestampMillisecondsParser1);\n        for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n            args1[_key1] = arguments[_key1];\n        }\n        _this1 = _super1.call.apply(_super1, [\n            this\n        ].concat(args1));\n        _defineProperty(_assertThisInitialized$1(_this1), \"priority\", 20);\n        _defineProperty(_assertThisInitialized$1(_this1), \"incompatibleTokens\", \"*\");\n        return _this1;\n    }\n    _createClass(TimestampMillisecondsParser1, [\n        {\n            key: \"parse\",\n            value: function parse1(dateString1) {\n                return parseAnyDigitsSigned(dateString1);\n            }\n        },\n        {\n            key: \"set\",\n            value: function set1(_date1, _flags1, value1) {\n                return [\n                    new Date(value1),\n                    {\n                        timestampIsSet: true\n                    }\n                ];\n            }\n        }\n    ]);\n    return TimestampMillisecondsParser1;\n}(Parser);\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */ var parsers = {\n    G: new EraParser(),\n    y: new YearParser(),\n    Y: new LocalWeekYearParser(),\n    R: new ISOWeekYearParser(),\n    u: new ExtendedYearParser(),\n    Q: new QuarterParser(),\n    q: new StandAloneQuarterParser(),\n    M: new MonthParser(),\n    L: new StandAloneMonthParser(),\n    w: new LocalWeekParser(),\n    I: new ISOWeekParser(),\n    d: new DateParser(),\n    D: new DayOfYearParser(),\n    E: new DayParser(),\n    e: new LocalDayParser(),\n    c: new StandAloneLocalDayParser(),\n    i: new ISODayParser(),\n    a: new AMPMParser(),\n    b: new AMPMMidnightParser(),\n    B: new DayPeriodParser(),\n    h: new Hour1to12Parser(),\n    H: new Hour0to23Parser(),\n    K: new Hour0To11Parser(),\n    k: new Hour1To24Parser(),\n    m: new MinuteParser(),\n    s: new SecondParser(),\n    S: new FractionOfSecondParser(),\n    X: new ISOTimezoneWithZParser(),\n    x: new ISOTimezoneParser(),\n    t: new TimestampSecondsParser(),\n    T: new TimestampMillisecondsParser()\n};\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar notWhitespaceRegExp = /\\S/;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 001, ..., 999                |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param {String} dateString - the string to parse\n * @param {String} formatString - the string of tokens\n * @param {Date|Number} referenceDate - defines values missing from the parsed dateString\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @returns {Date} the parsed date\n * @throws {TypeError} 3 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.locale` must contain `match` property\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */ function parse(dirtyDateString1, dirtyFormatString1, dirtyReferenceDate1, options1) {\n    var _ref1, _options$locale1, _ref21, _ref31, _ref41, _options$firstWeekCon1, _options$locale21, _options$locale2$opti1, _defaultOptions$local1, _defaultOptions$local21, _ref51, _ref61, _ref71, _options$weekStartsOn1, _options$locale31, _options$locale3$opti1, _defaultOptions$local31, _defaultOptions$local41;\n    requiredArgs(3, arguments);\n    var dateString1 = String(dirtyDateString1);\n    var formatString1 = String(dirtyFormatString1);\n    var defaultOptions1 = getDefaultOptions();\n    var locale$11 = (_ref1 = (_options$locale1 = options1 === null || options1 === void 0 ? void 0 : options1.locale) !== null && _options$locale1 !== void 0 ? _options$locale1 : defaultOptions1.locale) !== null && _ref1 !== void 0 ? _ref1 : locale;\n    if (!locale$11.match) {\n        throw new RangeError(\"locale must contain match property\");\n    }\n    var firstWeekContainsDate1 = toInteger((_ref21 = (_ref31 = (_ref41 = (_options$firstWeekCon1 = options1 === null || options1 === void 0 ? void 0 : options1.firstWeekContainsDate) !== null && _options$firstWeekCon1 !== void 0 ? _options$firstWeekCon1 : options1 === null || options1 === void 0 ? void 0 : (_options$locale21 = options1.locale) === null || _options$locale21 === void 0 ? void 0 : (_options$locale2$opti1 = _options$locale21.options) === null || _options$locale2$opti1 === void 0 ? void 0 : _options$locale2$opti1.firstWeekContainsDate) !== null && _ref41 !== void 0 ? _ref41 : defaultOptions1.firstWeekContainsDate) !== null && _ref31 !== void 0 ? _ref31 : (_defaultOptions$local1 = defaultOptions1.locale) === null || _defaultOptions$local1 === void 0 ? void 0 : (_defaultOptions$local21 = _defaultOptions$local1.options) === null || _defaultOptions$local21 === void 0 ? void 0 : _defaultOptions$local21.firstWeekContainsDate) !== null && _ref21 !== void 0 ? _ref21 : 1);\n    // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n    if (!(firstWeekContainsDate1 >= 1 && firstWeekContainsDate1 <= 7)) {\n        throw new RangeError(\"firstWeekContainsDate must be between 1 and 7 inclusively\");\n    }\n    var weekStartsOn1 = toInteger((_ref51 = (_ref61 = (_ref71 = (_options$weekStartsOn1 = options1 === null || options1 === void 0 ? void 0 : options1.weekStartsOn) !== null && _options$weekStartsOn1 !== void 0 ? _options$weekStartsOn1 : options1 === null || options1 === void 0 ? void 0 : (_options$locale31 = options1.locale) === null || _options$locale31 === void 0 ? void 0 : (_options$locale3$opti1 = _options$locale31.options) === null || _options$locale3$opti1 === void 0 ? void 0 : _options$locale3$opti1.weekStartsOn) !== null && _ref71 !== void 0 ? _ref71 : defaultOptions1.weekStartsOn) !== null && _ref61 !== void 0 ? _ref61 : (_defaultOptions$local31 = defaultOptions1.locale) === null || _defaultOptions$local31 === void 0 ? void 0 : (_defaultOptions$local41 = _defaultOptions$local31.options) === null || _defaultOptions$local41 === void 0 ? void 0 : _defaultOptions$local41.weekStartsOn) !== null && _ref51 !== void 0 ? _ref51 : 0);\n    // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n    if (!(weekStartsOn1 >= 0 && weekStartsOn1 <= 6)) {\n        throw new RangeError(\"weekStartsOn must be between 0 and 6 inclusively\");\n    }\n    if (formatString1 === \"\") {\n        if (dateString1 === \"\") {\n            return toDate(dirtyReferenceDate1);\n        } else {\n            return new Date(NaN);\n        }\n    }\n    var subFnOptions1 = {\n        firstWeekContainsDate: firstWeekContainsDate1,\n        weekStartsOn: weekStartsOn1,\n        locale: locale$11\n    };\n    // If timezone isn't specified, it will be set to the system timezone\n    var setters1 = [\n        new DateToSystemTimezoneSetter()\n    ];\n    var tokens1 = formatString1.match(longFormattingTokensRegExp).map(function(substring1) {\n        var firstCharacter1 = substring1[0];\n        if (firstCharacter1 in longFormatters) {\n            var longFormatter1 = longFormatters[firstCharacter1];\n            return longFormatter1(substring1, locale$11.formatLong);\n        }\n        return substring1;\n    }).join(\"\").match(formattingTokensRegExp);\n    var usedTokens1 = [];\n    var _iterator1 = _createForOfIteratorHelper(tokens1), _step1;\n    try {\n        var _loop1 = function _loop1() {\n            var token1 = _step1.value;\n            if (!(options1 !== null && options1 !== void 0 && options1.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(token1)) {\n                throwProtectedError(token1, formatString1, dirtyDateString1);\n            }\n            if (!(options1 !== null && options1 !== void 0 && options1.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(token1)) {\n                throwProtectedError(token1, formatString1, dirtyDateString1);\n            }\n            var firstCharacter1 = token1[0];\n            var parser1 = parsers[firstCharacter1];\n            if (parser1) {\n                var incompatibleTokens1 = parser1.incompatibleTokens;\n                if (Array.isArray(incompatibleTokens1)) {\n                    var incompatibleToken1 = usedTokens1.find(function(usedToken1) {\n                        return incompatibleTokens1.includes(usedToken1.token) || usedToken1.token === firstCharacter1;\n                    });\n                    if (incompatibleToken1) {\n                        throw new RangeError(\"The format string mustn't contain `\".concat(incompatibleToken1.fullToken, \"` and `\").concat(token1, \"` at the same time\"));\n                    }\n                } else if (parser1.incompatibleTokens === \"*\" && usedTokens1.length > 0) {\n                    throw new RangeError(\"The format string mustn't contain `\".concat(token1, \"` and any other token at the same time\"));\n                }\n                usedTokens1.push({\n                    token: firstCharacter1,\n                    fullToken: token1\n                });\n                var parseResult1 = parser1.run(dateString1, token1, locale$11.match, subFnOptions1);\n                if (!parseResult1) {\n                    return {\n                        v: new Date(NaN)\n                    };\n                }\n                setters1.push(parseResult1.setter);\n                dateString1 = parseResult1.rest;\n            } else {\n                if (firstCharacter1.match(unescapedLatinCharacterRegExp)) {\n                    throw new RangeError(\"Format string contains an unescaped latin alphabet character `\" + firstCharacter1 + \"`\");\n                }\n                // Replace two single quote characters with one single quote character\n                if (token1 === \"''\") {\n                    token1 = \"'\";\n                } else if (firstCharacter1 === \"'\") {\n                    token1 = cleanEscapedString(token1);\n                }\n                // Cut token from string, or, if string doesn't match the token, return Invalid Date\n                if (dateString1.indexOf(token1) === 0) {\n                    dateString1 = dateString1.slice(token1.length);\n                } else {\n                    return {\n                        v: new Date(NaN)\n                    };\n                }\n            }\n        };\n        for(_iterator1.s(); !(_step1 = _iterator1.n()).done;){\n            var _ret1 = _loop1();\n            if (_typeof(_ret1) === \"object\") return _ret1.v;\n        }\n    // Check if the remaining input contains something other than whitespace\n    } catch (err1) {\n        _iterator1.e(err1);\n    } finally{\n        _iterator1.f();\n    }\n    if (dateString1.length > 0 && notWhitespaceRegExp.test(dateString1)) {\n        return new Date(NaN);\n    }\n    var uniquePrioritySetters1 = setters1.map(function(setter1) {\n        return setter1.priority;\n    }).sort(function(a1, b1) {\n        return b1 - a1;\n    }).filter(function(priority1, index1, array1) {\n        return array1.indexOf(priority1) === index1;\n    }).map(function(priority1) {\n        return setters1.filter(function(setter1) {\n            return setter1.priority === priority1;\n        }).sort(function(a1, b1) {\n            return b1.subPriority - a1.subPriority;\n        });\n    }).map(function(setterArray1) {\n        return setterArray1[0];\n    });\n    var date1 = toDate(dirtyReferenceDate1);\n    if (isNaN(date1.getTime())) {\n        return new Date(NaN);\n    }\n    // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n    var utcDate1 = subMilliseconds(date1, getTimezoneOffsetInMilliseconds(date1));\n    var flags1 = {};\n    var _iterator21 = _createForOfIteratorHelper(uniquePrioritySetters1), _step21;\n    try {\n        for(_iterator21.s(); !(_step21 = _iterator21.n()).done;){\n            var setter1 = _step21.value;\n            if (!setter1.validate(utcDate1, subFnOptions1)) {\n                return new Date(NaN);\n            }\n            var result1 = setter1.set(utcDate1, flags1, subFnOptions1);\n            // Result is tuple (date, flags)\n            if (Array.isArray(result1)) {\n                utcDate1 = result1[0];\n                assign(flags1, result1[1]);\n            // Result is date\n            } else {\n                utcDate1 = result1;\n            }\n        }\n    } catch (err1) {\n        _iterator21.e(err1);\n    } finally{\n        _iterator21.f();\n    }\n    return utcDate1;\n}\nfunction cleanEscapedString(input1) {\n    return input1.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */ function parseISO(argument1, options1) {\n    var _options$additionalDi1;\n    requiredArgs(1, arguments);\n    var additionalDigits1 = toInteger((_options$additionalDi1 = void 0) !== null && _options$additionalDi1 !== void 0 ? _options$additionalDi1 : 2);\n    if (additionalDigits1 !== 2 && additionalDigits1 !== 1 && additionalDigits1 !== 0) {\n        throw new RangeError(\"additionalDigits must be 0, 1 or 2\");\n    }\n    if (!(typeof argument1 === \"string\" || Object.prototype.toString.call(argument1) === \"[object String]\")) {\n        return new Date(NaN);\n    }\n    var dateStrings1 = splitDateString(argument1);\n    var date1;\n    if (dateStrings1.date) {\n        var parseYearResult1 = parseYear(dateStrings1.date, additionalDigits1);\n        date1 = parseDate(parseYearResult1.restDateString, parseYearResult1.year);\n    }\n    if (!date1 || isNaN(date1.getTime())) {\n        return new Date(NaN);\n    }\n    var timestamp1 = date1.getTime();\n    var time1 = 0;\n    var offset1;\n    if (dateStrings1.time) {\n        time1 = parseTime(dateStrings1.time);\n        if (isNaN(time1)) {\n            return new Date(NaN);\n        }\n    }\n    if (dateStrings1.timezone) {\n        offset1 = parseTimezone(dateStrings1.timezone);\n        if (isNaN(offset1)) {\n            return new Date(NaN);\n        }\n    } else {\n        var dirtyDate1 = new Date(timestamp1 + time1);\n        // js parsed string assuming it's in UTC timezone\n        // but we need it to be parsed in our timezone\n        // so we use utc values to build date in our timezone.\n        // Year values from 0 to 99 map to the years 1900 to 1999\n        // so set year explicitly with setFullYear.\n        var result1 = new Date(0);\n        result1.setFullYear(dirtyDate1.getUTCFullYear(), dirtyDate1.getUTCMonth(), dirtyDate1.getUTCDate());\n        result1.setHours(dirtyDate1.getUTCHours(), dirtyDate1.getUTCMinutes(), dirtyDate1.getUTCSeconds(), dirtyDate1.getUTCMilliseconds());\n        return result1;\n    }\n    return new Date(timestamp1 + time1 + offset1);\n}\nvar patterns = {\n    dateTimeDelimiter: /[T ]/,\n    timeZoneDelimiter: /[Z ]/i,\n    timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\nfunction splitDateString(dateString1) {\n    var dateStrings1 = {};\n    var array1 = dateString1.split(patterns.dateTimeDelimiter);\n    var timeString1;\n    // The regex match should only return at maximum two array elements.\n    // [date], [time], or [date, time].\n    if (array1.length > 2) {\n        return dateStrings1;\n    }\n    if (/:/.test(array1[0])) {\n        timeString1 = array1[0];\n    } else {\n        dateStrings1.date = array1[0];\n        timeString1 = array1[1];\n        if (patterns.timeZoneDelimiter.test(dateStrings1.date)) {\n            dateStrings1.date = dateString1.split(patterns.timeZoneDelimiter)[0];\n            timeString1 = dateString1.substr(dateStrings1.date.length, dateString1.length);\n        }\n    }\n    if (timeString1) {\n        var token1 = patterns.timezone.exec(timeString1);\n        if (token1) {\n            dateStrings1.time = timeString1.replace(token1[1], \"\");\n            dateStrings1.timezone = token1[1];\n        } else {\n            dateStrings1.time = timeString1;\n        }\n    }\n    return dateStrings1;\n}\nfunction parseYear(dateString1, additionalDigits1) {\n    var regex1 = new RegExp(\"^(?:(\\\\d{4}|[+-]\\\\d{\" + (4 + additionalDigits1) + \"})|(\\\\d{2}|[+-]\\\\d{\" + (2 + additionalDigits1) + \"})$)\");\n    var captures1 = dateString1.match(regex1);\n    // Invalid ISO-formatted year\n    if (!captures1) return {\n        year: NaN,\n        restDateString: \"\"\n    };\n    var year1 = captures1[1] ? parseInt(captures1[1]) : null;\n    var century1 = captures1[2] ? parseInt(captures1[2]) : null;\n    // either year or century is null, not both\n    return {\n        year: century1 === null ? year1 : century1 * 100,\n        restDateString: dateString1.slice((captures1[1] || captures1[2]).length)\n    };\n}\nfunction parseDate(dateString1, year1) {\n    // Invalid ISO-formatted year\n    if (year1 === null) return new Date(NaN);\n    var captures1 = dateString1.match(dateRegex);\n    // Invalid ISO-formatted string\n    if (!captures1) return new Date(NaN);\n    var isWeekDate1 = !!captures1[4];\n    var dayOfYear1 = parseDateUnit(captures1[1]);\n    var month1 = parseDateUnit(captures1[2]) - 1;\n    var day1 = parseDateUnit(captures1[3]);\n    var week1 = parseDateUnit(captures1[4]);\n    var dayOfWeek1 = parseDateUnit(captures1[5]) - 1;\n    if (isWeekDate1) {\n        if (!validateWeekDate(year1, week1, dayOfWeek1)) {\n            return new Date(NaN);\n        }\n        return dayOfISOWeekYear(year1, week1, dayOfWeek1);\n    } else {\n        var date1 = new Date(0);\n        if (!validateDate(year1, month1, day1) || !validateDayOfYearDate(year1, dayOfYear1)) {\n            return new Date(NaN);\n        }\n        date1.setUTCFullYear(year1, month1, Math.max(dayOfYear1, day1));\n        return date1;\n    }\n}\nfunction parseDateUnit(value1) {\n    return value1 ? parseInt(value1) : 1;\n}\nfunction parseTime(timeString1) {\n    var captures1 = timeString1.match(timeRegex);\n    if (!captures1) return NaN; // Invalid ISO-formatted time\n    var hours1 = parseTimeUnit(captures1[1]);\n    var minutes1 = parseTimeUnit(captures1[2]);\n    var seconds1 = parseTimeUnit(captures1[3]);\n    if (!validateTime(hours1, minutes1, seconds1)) {\n        return NaN;\n    }\n    return hours1 * millisecondsInHour + minutes1 * millisecondsInMinute + seconds1 * 1000;\n}\nfunction parseTimeUnit(value1) {\n    return value1 && parseFloat(value1.replace(\",\", \".\")) || 0;\n}\nfunction parseTimezone(timezoneString1) {\n    if (timezoneString1 === \"Z\") return 0;\n    var captures1 = timezoneString1.match(timezoneRegex);\n    if (!captures1) return 0;\n    var sign1 = captures1[1] === \"+\" ? -1 : 1;\n    var hours1 = parseInt(captures1[2]);\n    var minutes1 = captures1[3] && parseInt(captures1[3]) || 0;\n    if (!validateTimezone(hours1, minutes1)) {\n        return NaN;\n    }\n    return sign1 * (hours1 * millisecondsInHour + minutes1 * millisecondsInMinute);\n}\nfunction dayOfISOWeekYear(isoWeekYear1, week1, day1) {\n    var date1 = new Date(0);\n    date1.setUTCFullYear(isoWeekYear1, 0, 4);\n    var fourthOfJanuaryDay1 = date1.getUTCDay() || 7;\n    var diff1 = (week1 - 1) * 7 + day1 + 1 - fourthOfJanuaryDay1;\n    date1.setUTCDate(date1.getUTCDate() + diff1);\n    return date1;\n}\n// Validation functions\n// February is null to handle the leap year (using ||)\nvar daysInMonths = [\n    31,\n    null,\n    31,\n    30,\n    31,\n    30,\n    31,\n    31,\n    30,\n    31,\n    30,\n    31\n];\nfunction isLeapYearIndex(year1) {\n    return year1 % 400 === 0 || year1 % 4 === 0 && year1 % 100 !== 0;\n}\nfunction validateDate(year1, month1, date1) {\n    return month1 >= 0 && month1 <= 11 && date1 >= 1 && date1 <= (daysInMonths[month1] || (isLeapYearIndex(year1) ? 29 : 28));\n}\nfunction validateDayOfYearDate(year1, dayOfYear1) {\n    return dayOfYear1 >= 1 && dayOfYear1 <= (isLeapYearIndex(year1) ? 366 : 365);\n}\nfunction validateWeekDate(_year1, week1, day1) {\n    return week1 >= 1 && week1 <= 53 && day1 >= 0 && day1 <= 6;\n}\nfunction validateTime(hours1, minutes1, seconds1) {\n    if (hours1 === 24) {\n        return minutes1 === 0 && seconds1 === 0;\n    }\n    return seconds1 >= 0 && seconds1 < 60 && minutes1 >= 0 && minutes1 < 60 && hours1 >= 0 && hours1 < 25;\n}\nfunction validateTimezone(_hours1, minutes1) {\n    return minutes1 >= 0 && minutes1 <= 59;\n}\nfunction _inheritsLoose(subClass1, superClass1) {\n    subClass1.prototype = Object.create(superClass1.prototype);\n    subClass1.prototype.constructor = subClass1;\n    _setPrototypeOf(subClass1, superClass1);\n}\nfunction _setPrototypeOf(o1, p1) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf1(o1, p1) {\n        o1.__proto__ = p1;\n        return o1;\n    };\n    return _setPrototypeOf(o1, p1);\n}\nfunction _objectWithoutPropertiesLoose(source1, excluded1) {\n    if (source1 == null) return {};\n    var target1 = {};\n    var sourceKeys1 = Object.keys(source1);\n    var key1, i1;\n    for(i1 = 0; i1 < sourceKeys1.length; i1++){\n        key1 = sourceKeys1[i1];\n        if (excluded1.indexOf(key1) >= 0) continue;\n        target1[key1] = source1[key1];\n    }\n    return target1;\n}\nfunction _assertThisInitialized(self1) {\n    if (self1 === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self1;\n} /**\n * Check whether some DOM node is our Component's node.\n */ \nfunction isNodeFound(current1, componentNode1, ignoreClass1) {\n    if (current1 === componentNode1) {\n        return true;\n    } // SVG <use/> elements do not technically reside in the rendered DOM, so\n    // they do not have classList directly, but they offer a link to their\n    // corresponding element, which can have classList. This extra check is for\n    // that case.\n    // See: http://www.w3.org/TR/SVG11/struct.html#InterfaceSVGUseElement\n    // Discussion: https://github.com/Pomax/react-onclickoutside/pull/17\n    if (current1.correspondingElement) {\n        return current1.correspondingElement.classList.contains(ignoreClass1);\n    }\n    return current1.classList.contains(ignoreClass1);\n}\n/**\n * Try to find our node in a hierarchy of nodes, returning the document\n * node as highest node if our node is not found in the path up.\n */ function findHighest(current1, componentNode1, ignoreClass1) {\n    if (current1 === componentNode1) {\n        return true;\n    } // If source=local then this event came from 'somewhere'\n    // inside and should be ignored. We could handle this with\n    // a layered approach, too, but that requires going back to\n    // thinking in terms of Dom node nesting, running counter\n    // to React's 'you shouldn't care about the DOM' philosophy.\n    // Also cover shadowRoot node by checking current.host\n    while(current1.parentNode || current1.host){\n        // Only check normal node without shadowRoot\n        if (current1.parentNode && isNodeFound(current1, componentNode1, ignoreClass1)) {\n            return true;\n        }\n        current1 = current1.parentNode || current1.host;\n    }\n    return current1;\n}\n/**\n * Check if the browser scrollbar was clicked\n */ function clickedScrollbar(evt1) {\n    return document.documentElement.clientWidth <= evt1.clientX || document.documentElement.clientHeight <= evt1.clientY;\n} // ideally will get replaced with external dep\n// when rafrex/detect-passive-events#4 and rafrex/detect-passive-events#5 get merged in\nvar testPassiveEventSupport = function testPassiveEventSupport1() {\n    if (true) {\n        return;\n    }\n    var passive1 = false;\n    var options1 = Object.defineProperty({}, \"passive\", {\n        get: function get1() {\n            passive1 = true;\n        }\n    });\n    var noop1 = function noop1() {};\n    window.addEventListener(\"testPassiveEventSupport\", noop1, options1);\n    window.removeEventListener(\"testPassiveEventSupport\", noop1, options1);\n    return passive1;\n};\nfunction autoInc(seed1) {\n    if (seed1 === void 0) {\n        seed1 = 0;\n    }\n    return function() {\n        return ++seed1;\n    };\n}\nvar uid = autoInc();\nvar passiveEventSupport;\nvar handlersMap = {};\nvar enabledInstances = {};\nvar touchEvents = [\n    \"touchstart\",\n    \"touchmove\"\n];\nvar IGNORE_CLASS_NAME = \"ignore-react-onclickoutside\";\n/**\n * Options for addEventHandler and removeEventHandler\n */ function getEventHandlerOptions(instance1, eventName1) {\n    var handlerOptions1 = {};\n    var isTouchEvent1 = touchEvents.indexOf(eventName1) !== -1;\n    if (isTouchEvent1 && passiveEventSupport) {\n        handlerOptions1.passive = !instance1.props.preventDefault;\n    }\n    return handlerOptions1;\n}\n/**\n * This function generates the HOC function that you'll use\n * in order to impart onOutsideClick listening to an\n * arbitrary component. It gets called at the end of the\n * bootstrapping code to yield an instance of the\n * onClickOutsideHOC function defined inside setupHOC().\n */ function onClickOutsideHOC(WrappedComponent1, config1) {\n    var _class1, _temp1;\n    var componentName1 = WrappedComponent1.displayName || WrappedComponent1.name || \"Component\";\n    return _temp1 = _class1 = /*#__PURE__*/ function(_Component1) {\n        _inheritsLoose(onClickOutside1, _Component1);\n        function onClickOutside1(props1) {\n            var _this1;\n            _this1 = _Component1.call(this, props1) || this;\n            _this1.__outsideClickHandler = function(event1) {\n                if (typeof _this1.__clickOutsideHandlerProp === \"function\") {\n                    _this1.__clickOutsideHandlerProp(event1);\n                    return;\n                }\n                var instance1 = _this1.getInstance();\n                if (typeof instance1.props.handleClickOutside === \"function\") {\n                    instance1.props.handleClickOutside(event1);\n                    return;\n                }\n                if (typeof instance1.handleClickOutside === \"function\") {\n                    instance1.handleClickOutside(event1);\n                    return;\n                }\n                throw new Error(\"WrappedComponent: \" + componentName1 + \" lacks a handleClickOutside(event) function for processing outside click events.\");\n            };\n            _this1.__getComponentNode = function() {\n                var instance1 = _this1.getInstance();\n                if (typeof instance1.setClickOutsideRef === \"function\") {\n                    return instance1.setClickOutsideRef();\n                }\n                return (0,react_dom__WEBPACK_IMPORTED_MODULE_2__.findDOMNode)(instance1);\n            };\n            _this1.enableOnClickOutside = function() {\n                if (typeof document === \"undefined\" || enabledInstances[_this1._uid]) {\n                    return;\n                }\n                if (typeof passiveEventSupport === \"undefined\") {\n                    passiveEventSupport = testPassiveEventSupport();\n                }\n                enabledInstances[_this1._uid] = true;\n                var events1 = _this1.props.eventTypes;\n                if (!events1.forEach) {\n                    events1 = [\n                        events1\n                    ];\n                }\n                handlersMap[_this1._uid] = function(event1) {\n                    if (_this1.componentNode === null) return;\n                    if (_this1.initTimeStamp > event1.timeStamp) return;\n                    if (_this1.props.preventDefault) {\n                        event1.preventDefault();\n                    }\n                    if (_this1.props.stopPropagation) {\n                        event1.stopPropagation();\n                    }\n                    if (_this1.props.excludeScrollbar && clickedScrollbar(event1)) return;\n                    var current1 = event1.composed && event1.composedPath && event1.composedPath().shift() || event1.target;\n                    if (findHighest(current1, _this1.componentNode, _this1.props.outsideClickIgnoreClass) !== document) {\n                        return;\n                    }\n                    _this1.__outsideClickHandler(event1);\n                };\n                events1.forEach(function(eventName1) {\n                    document.addEventListener(eventName1, handlersMap[_this1._uid], getEventHandlerOptions(_assertThisInitialized(_this1), eventName1));\n                });\n            };\n            _this1.disableOnClickOutside = function() {\n                delete enabledInstances[_this1._uid];\n                var fn1 = handlersMap[_this1._uid];\n                if (fn1 && typeof document !== \"undefined\") {\n                    var events1 = _this1.props.eventTypes;\n                    if (!events1.forEach) {\n                        events1 = [\n                            events1\n                        ];\n                    }\n                    events1.forEach(function(eventName1) {\n                        return document.removeEventListener(eventName1, fn1, getEventHandlerOptions(_assertThisInitialized(_this1), eventName1));\n                    });\n                    delete handlersMap[_this1._uid];\n                }\n            };\n            _this1.getRef = function(ref1) {\n                return _this1.instanceRef = ref1;\n            };\n            _this1._uid = uid();\n            _this1.initTimeStamp = performance.now();\n            return _this1;\n        }\n        /**\n     * Access the WrappedComponent's instance.\n     */ var _proto1 = onClickOutside1.prototype;\n        _proto1.getInstance = function getInstance1() {\n            if (WrappedComponent1.prototype && !WrappedComponent1.prototype.isReactComponent) {\n                return this;\n            }\n            var ref1 = this.instanceRef;\n            return ref1.getInstance ? ref1.getInstance() : ref1;\n        };\n        /**\n     * Add click listeners to the current document,\n     * linked to this component's state.\n     */ _proto1.componentDidMount = function componentDidMount1() {\n            // If we are in an environment without a DOM such\n            // as shallow rendering or snapshots then we exit\n            // early to prevent any unhandled errors being thrown.\n            if (typeof document === \"undefined\" || !document.createElement) {\n                return;\n            }\n            this.getInstance();\n            this.componentNode = this.__getComponentNode(); // return early so we dont initiate onClickOutside\n            if (this.props.disableOnClickOutside) return;\n            this.enableOnClickOutside();\n        };\n        _proto1.componentDidUpdate = function componentDidUpdate1() {\n            this.componentNode = this.__getComponentNode();\n        } /**\n     * Remove all document's event listeners for this component\n     */ ;\n        _proto1.componentWillUnmount = function componentWillUnmount1() {\n            this.disableOnClickOutside();\n        } /**\n     * Can be called to explicitly enable event listening\n     * for clicks and touches outside of this element.\n     */ ;\n        /**\n     * Pass-through render\n     */ _proto1.render = function render1() {\n            // eslint-disable-next-line no-unused-vars\n            var _this$props1 = this.props;\n            _this$props1.excludeScrollbar;\n            var props1 = _objectWithoutPropertiesLoose(_this$props1, [\n                \"excludeScrollbar\"\n            ]);\n            if (WrappedComponent1.prototype && WrappedComponent1.prototype.isReactComponent) {\n                props1.ref = this.getRef;\n            } else {\n                props1.wrappedRef = this.getRef;\n            }\n            props1.disableOnClickOutside = this.disableOnClickOutside;\n            props1.enableOnClickOutside = this.enableOnClickOutside;\n            return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(WrappedComponent1, props1);\n        };\n        return onClickOutside1;\n    }(react__WEBPACK_IMPORTED_MODULE_1__.Component), _class1.displayName = \"OnClickOutside(\" + componentName1 + \")\", _class1.defaultProps = {\n        eventTypes: [\n            \"mousedown\",\n            \"touchstart\"\n        ],\n        excludeScrollbar: false,\n        outsideClickIgnoreClass: IGNORE_CLASS_NAME,\n        preventDefault: false,\n        stopPropagation: false\n    }, _class1.getClass = function() {\n        return WrappedComponent1.getClass ? WrappedComponent1.getClass() : WrappedComponent1;\n    }, _temp1;\n}\nvar ManagerReferenceNodeContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext();\nvar ManagerReferenceNodeSetterContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext();\nfunction Manager(_ref1) {\n    var children1 = _ref1.children;\n    var _React$useState1 = react__WEBPACK_IMPORTED_MODULE_1__.useState(null), referenceNode1 = _React$useState1[0], setReferenceNode1 = _React$useState1[1];\n    var hasUnmounted1 = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        return function() {\n            hasUnmounted1.current = true;\n        };\n    }, []);\n    var handleSetReferenceNode1 = react__WEBPACK_IMPORTED_MODULE_1__.useCallback(function(node1) {\n        if (!hasUnmounted1.current) {\n            setReferenceNode1(node1);\n        }\n    }, []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ManagerReferenceNodeContext.Provider, {\n        value: referenceNode1\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ManagerReferenceNodeSetterContext.Provider, {\n        value: handleSetReferenceNode1\n    }, children1));\n}\n/**\n * Takes an argument and if it's an array, returns the first item in the array,\n * otherwise returns the argument. Used for Preact compatibility.\n */ var unwrapArray = function unwrapArray1(arg1) {\n    return Array.isArray(arg1) ? arg1[0] : arg1;\n};\n/**\n * Takes a maybe-undefined function and arbitrary args and invokes the function\n * only if it is defined.\n */ var safeInvoke = function safeInvoke1(fn1) {\n    if (typeof fn1 === \"function\") {\n        for(var _len1 = arguments.length, args1 = new Array(_len1 > 1 ? _len1 - 1 : 0), _key1 = 1; _key1 < _len1; _key1++){\n            args1[_key1 - 1] = arguments[_key1];\n        }\n        return fn1.apply(void 0, args1);\n    }\n};\n/**\n * Sets a ref using either a ref callback or a ref object\n */ var setRef = function setRef1(ref1, node1) {\n    // if its a function call it\n    if (typeof ref1 === \"function\") {\n        return safeInvoke(ref1, node1);\n    } else if (ref1 != null) {\n        ref1.current = node1;\n    }\n};\n/**\n * Simple ponyfill for Object.fromEntries\n */ var fromEntries = function fromEntries1(entries1) {\n    return entries1.reduce(function(acc1, _ref1) {\n        var key1 = _ref1[0], value1 = _ref1[1];\n        acc1[key1] = value1;\n        return acc1;\n    }, {});\n};\n/**\n * Small wrapper around `useLayoutEffect` to get rid of the warning on SSR envs\n */ var useIsomorphicLayoutEffect =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_1__.useEffect;\nvar top = \"top\";\nvar bottom = \"bottom\";\nvar right = \"right\";\nvar left = \"left\";\nvar auto = \"auto\";\nvar basePlacements = [\n    top,\n    bottom,\n    right,\n    left\n];\nvar start = \"start\";\nvar end = \"end\";\nvar clippingParents = \"clippingParents\";\nvar viewport = \"viewport\";\nvar popper = \"popper\";\nvar reference = \"reference\";\nvar variationPlacements = /*#__PURE__*/ basePlacements.reduce(function(acc1, placement1) {\n    return acc1.concat([\n        placement1 + \"-\" + start,\n        placement1 + \"-\" + end\n    ]);\n}, []);\nvar placements = /*#__PURE__*/ [].concat(basePlacements, [\n    auto\n]).reduce(function(acc1, placement1) {\n    return acc1.concat([\n        placement1,\n        placement1 + \"-\" + start,\n        placement1 + \"-\" + end\n    ]);\n}, []); // modifiers that need to read the DOM\nvar beforeRead = \"beforeRead\";\nvar read = \"read\";\nvar afterRead = \"afterRead\"; // pure-logic modifiers\nvar beforeMain = \"beforeMain\";\nvar main = \"main\";\nvar afterMain = \"afterMain\"; // modifier with the purpose to write to the DOM (or write into a framework state)\nvar beforeWrite = \"beforeWrite\";\nvar write = \"write\";\nvar afterWrite = \"afterWrite\";\nvar modifierPhases = [\n    beforeRead,\n    read,\n    afterRead,\n    beforeMain,\n    main,\n    afterMain,\n    beforeWrite,\n    write,\n    afterWrite\n];\nfunction getNodeName(element1) {\n    return element1 ? (element1.nodeName || \"\").toLowerCase() : null;\n}\nfunction getWindow(node1) {\n    if (node1 == null) {\n        return window;\n    }\n    if (node1.toString() !== \"[object Window]\") {\n        var ownerDocument1 = node1.ownerDocument;\n        return ownerDocument1 ? ownerDocument1.defaultView || window : window;\n    }\n    return node1;\n}\nfunction isElement(node1) {\n    var OwnElement1 = getWindow(node1).Element;\n    return node1 instanceof OwnElement1 || node1 instanceof Element;\n}\nfunction isHTMLElement(node1) {\n    var OwnElement1 = getWindow(node1).HTMLElement;\n    return node1 instanceof OwnElement1 || node1 instanceof HTMLElement;\n}\nfunction isShadowRoot(node1) {\n    // IE 11 has no ShadowRoot\n    if (typeof ShadowRoot === \"undefined\") {\n        return false;\n    }\n    var OwnElement1 = getWindow(node1).ShadowRoot;\n    return node1 instanceof OwnElement1 || node1 instanceof ShadowRoot;\n}\n// and applies them to the HTMLElements such as popper and arrow\nfunction applyStyles(_ref1) {\n    var state1 = _ref1.state;\n    Object.keys(state1.elements).forEach(function(name1) {\n        var style1 = state1.styles[name1] || {};\n        var attributes1 = state1.attributes[name1] || {};\n        var element1 = state1.elements[name1]; // arrow is optional + virtual elements\n        if (!isHTMLElement(element1) || !getNodeName(element1)) {\n            return;\n        } // Flow doesn't support to extend this property, but it's the most\n        // effective way to apply styles to an HTMLElement\n        // $FlowFixMe[cannot-write]\n        Object.assign(element1.style, style1);\n        Object.keys(attributes1).forEach(function(name1) {\n            var value1 = attributes1[name1];\n            if (value1 === false) {\n                element1.removeAttribute(name1);\n            } else {\n                element1.setAttribute(name1, value1 === true ? \"\" : value1);\n            }\n        });\n    });\n}\nfunction effect$2(_ref21) {\n    var state1 = _ref21.state;\n    var initialStyles1 = {\n        popper: {\n            position: state1.options.strategy,\n            left: \"0\",\n            top: \"0\",\n            margin: \"0\"\n        },\n        arrow: {\n            position: \"absolute\"\n        },\n        reference: {}\n    };\n    Object.assign(state1.elements.popper.style, initialStyles1.popper);\n    state1.styles = initialStyles1;\n    if (state1.elements.arrow) {\n        Object.assign(state1.elements.arrow.style, initialStyles1.arrow);\n    }\n    return function() {\n        Object.keys(state1.elements).forEach(function(name1) {\n            var element1 = state1.elements[name1];\n            var attributes1 = state1.attributes[name1] || {};\n            var styleProperties1 = Object.keys(state1.styles.hasOwnProperty(name1) ? state1.styles[name1] : initialStyles1[name1]); // Set all values to an empty string to unset them\n            var style1 = styleProperties1.reduce(function(style1, property1) {\n                style1[property1] = \"\";\n                return style1;\n            }, {}); // arrow is optional + virtual elements\n            if (!isHTMLElement(element1) || !getNodeName(element1)) {\n                return;\n            }\n            Object.assign(element1.style, style1);\n            Object.keys(attributes1).forEach(function(attribute1) {\n                element1.removeAttribute(attribute1);\n            });\n        });\n    };\n} // eslint-disable-next-line import/no-unused-modules\nvar applyStyles$1 = {\n    name: \"applyStyles\",\n    enabled: true,\n    phase: \"write\",\n    fn: applyStyles,\n    effect: effect$2,\n    requires: [\n        \"computeStyles\"\n    ]\n};\nfunction getBasePlacement(placement1) {\n    return placement1.split(\"-\")[0];\n}\nvar max = Math.max;\nvar min = Math.min;\nvar round = Math.round;\nfunction getUAString() {\n    var uaData1 = navigator.userAgentData;\n    if (uaData1 != null && uaData1.brands && Array.isArray(uaData1.brands)) {\n        return uaData1.brands.map(function(item1) {\n            return item1.brand + \"/\" + item1.version;\n        }).join(\" \");\n    }\n    return navigator.userAgent;\n}\nfunction isLayoutViewport() {\n    return !/^((?!chrome|android).)*safari/i.test(getUAString());\n}\nfunction getBoundingClientRect(element1, includeScale1, isFixedStrategy1) {\n    if (includeScale1 === void 0) {\n        includeScale1 = false;\n    }\n    if (isFixedStrategy1 === void 0) {\n        isFixedStrategy1 = false;\n    }\n    var clientRect1 = element1.getBoundingClientRect();\n    var scaleX1 = 1;\n    var scaleY1 = 1;\n    if (includeScale1 && isHTMLElement(element1)) {\n        scaleX1 = element1.offsetWidth > 0 ? round(clientRect1.width) / element1.offsetWidth || 1 : 1;\n        scaleY1 = element1.offsetHeight > 0 ? round(clientRect1.height) / element1.offsetHeight || 1 : 1;\n    }\n    var _ref1 = isElement(element1) ? getWindow(element1) : window, visualViewport1 = _ref1.visualViewport;\n    var addVisualOffsets1 = !isLayoutViewport() && isFixedStrategy1;\n    var x1 = (clientRect1.left + (addVisualOffsets1 && visualViewport1 ? visualViewport1.offsetLeft : 0)) / scaleX1;\n    var y1 = (clientRect1.top + (addVisualOffsets1 && visualViewport1 ? visualViewport1.offsetTop : 0)) / scaleY1;\n    var width1 = clientRect1.width / scaleX1;\n    var height1 = clientRect1.height / scaleY1;\n    return {\n        width: width1,\n        height: height1,\n        top: y1,\n        right: x1 + width1,\n        bottom: y1 + height1,\n        left: x1,\n        x: x1,\n        y: y1\n    };\n}\n// means it doesn't take into account transforms.\nfunction getLayoutRect(element1) {\n    var clientRect1 = getBoundingClientRect(element1); // Use the clientRect sizes if it's not been transformed.\n    // Fixes https://github.com/popperjs/popper-core/issues/1223\n    var width1 = element1.offsetWidth;\n    var height1 = element1.offsetHeight;\n    if (Math.abs(clientRect1.width - width1) <= 1) {\n        width1 = clientRect1.width;\n    }\n    if (Math.abs(clientRect1.height - height1) <= 1) {\n        height1 = clientRect1.height;\n    }\n    return {\n        x: element1.offsetLeft,\n        y: element1.offsetTop,\n        width: width1,\n        height: height1\n    };\n}\nfunction contains(parent1, child1) {\n    var rootNode1 = child1.getRootNode && child1.getRootNode(); // First, attempt with faster native method\n    if (parent1.contains(child1)) {\n        return true;\n    } else if (rootNode1 && isShadowRoot(rootNode1)) {\n        var next1 = child1;\n        do {\n            if (next1 && parent1.isSameNode(next1)) {\n                return true;\n            } // $FlowFixMe[prop-missing]: need a better way to handle this...\n            next1 = next1.parentNode || next1.host;\n        }while (next1);\n    } // Give up, the result is false\n    return false;\n}\nfunction getComputedStyle$1(element1) {\n    return getWindow(element1).getComputedStyle(element1);\n}\nfunction isTableElement(element1) {\n    return [\n        \"table\",\n        \"td\",\n        \"th\"\n    ].indexOf(getNodeName(element1)) >= 0;\n}\nfunction getDocumentElement(element1) {\n    // $FlowFixMe[incompatible-return]: assume body is always available\n    return ((isElement(element1) ? element1.ownerDocument : element1.document) || window.document).documentElement;\n}\nfunction getParentNode(element1) {\n    if (getNodeName(element1) === \"html\") {\n        return element1;\n    }\n    return(// $FlowFixMe[incompatible-return]\n    // $FlowFixMe[prop-missing]\n    element1.assignedSlot || // step into the shadow DOM of the parent of a slotted node\n    element1.parentNode || (isShadowRoot(element1) ? element1.host : null) || // ShadowRoot detected\n    // $FlowFixMe[incompatible-call]: HTMLElement is a Node\n    getDocumentElement(element1) // fallback\n    );\n}\nfunction getTrueOffsetParent(element1) {\n    if (!isHTMLElement(element1) || // https://github.com/popperjs/popper-core/issues/837\n    getComputedStyle$1(element1).position === \"fixed\") {\n        return null;\n    }\n    return element1.offsetParent;\n} // `.offsetParent` reports `null` for fixed elements, while absolute elements\n// return the containing block\nfunction getContainingBlock(element1) {\n    var isFirefox1 = /firefox/i.test(getUAString());\n    var isIE1 = /Trident/i.test(getUAString());\n    if (isIE1 && isHTMLElement(element1)) {\n        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport\n        var elementCss1 = getComputedStyle$1(element1);\n        if (elementCss1.position === \"fixed\") {\n            return null;\n        }\n    }\n    var currentNode1 = getParentNode(element1);\n    if (isShadowRoot(currentNode1)) {\n        currentNode1 = currentNode1.host;\n    }\n    while(isHTMLElement(currentNode1) && [\n        \"html\",\n        \"body\"\n    ].indexOf(getNodeName(currentNode1)) < 0){\n        var css1 = getComputedStyle$1(currentNode1); // This is non-exhaustive but covers the most common CSS properties that\n        // create a containing block.\n        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n        if (css1.transform !== \"none\" || css1.perspective !== \"none\" || css1.contain === \"paint\" || [\n            \"transform\",\n            \"perspective\"\n        ].indexOf(css1.willChange) !== -1 || isFirefox1 && css1.willChange === \"filter\" || isFirefox1 && css1.filter && css1.filter !== \"none\") {\n            return currentNode1;\n        } else {\n            currentNode1 = currentNode1.parentNode;\n        }\n    }\n    return null;\n} // Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element1) {\n    var window1 = getWindow(element1);\n    var offsetParent1 = getTrueOffsetParent(element1);\n    while(offsetParent1 && isTableElement(offsetParent1) && getComputedStyle$1(offsetParent1).position === \"static\"){\n        offsetParent1 = getTrueOffsetParent(offsetParent1);\n    }\n    if (offsetParent1 && (getNodeName(offsetParent1) === \"html\" || getNodeName(offsetParent1) === \"body\" && getComputedStyle$1(offsetParent1).position === \"static\")) {\n        return window1;\n    }\n    return offsetParent1 || getContainingBlock(element1) || window1;\n}\nfunction getMainAxisFromPlacement(placement1) {\n    return [\n        \"top\",\n        \"bottom\"\n    ].indexOf(placement1) >= 0 ? \"x\" : \"y\";\n}\nfunction within(min$11, value1, max$11) {\n    return max(min$11, min(value1, max$11));\n}\nfunction withinMaxClamp(min1, value1, max1) {\n    var v1 = within(min1, value1, max1);\n    return v1 > max1 ? max1 : v1;\n}\nfunction getFreshSideObject() {\n    return {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n    };\n}\nfunction mergePaddingObject(paddingObject1) {\n    return Object.assign({}, getFreshSideObject(), paddingObject1);\n}\nfunction expandToHashMap(value1, keys1) {\n    return keys1.reduce(function(hashMap1, key1) {\n        hashMap1[key1] = value1;\n        return hashMap1;\n    }, {});\n}\nvar toPaddingObject = function toPaddingObject1(padding1, state1) {\n    padding1 = typeof padding1 === \"function\" ? padding1(Object.assign({}, state1.rects, {\n        placement: state1.placement\n    })) : padding1;\n    return mergePaddingObject(typeof padding1 !== \"number\" ? padding1 : expandToHashMap(padding1, basePlacements));\n};\nfunction arrow(_ref1) {\n    var _state$modifiersData$1;\n    var state1 = _ref1.state, name1 = _ref1.name, options1 = _ref1.options;\n    var arrowElement1 = state1.elements.arrow;\n    var popperOffsets1 = state1.modifiersData.popperOffsets;\n    var basePlacement1 = getBasePlacement(state1.placement);\n    var axis1 = getMainAxisFromPlacement(basePlacement1);\n    var isVertical1 = [\n        left,\n        right\n    ].indexOf(basePlacement1) >= 0;\n    var len1 = isVertical1 ? \"height\" : \"width\";\n    if (!arrowElement1 || !popperOffsets1) {\n        return;\n    }\n    var paddingObject1 = toPaddingObject(options1.padding, state1);\n    var arrowRect1 = getLayoutRect(arrowElement1);\n    var minProp1 = axis1 === \"y\" ? top : left;\n    var maxProp1 = axis1 === \"y\" ? bottom : right;\n    var endDiff1 = state1.rects.reference[len1] + state1.rects.reference[axis1] - popperOffsets1[axis1] - state1.rects.popper[len1];\n    var startDiff1 = popperOffsets1[axis1] - state1.rects.reference[axis1];\n    var arrowOffsetParent1 = getOffsetParent(arrowElement1);\n    var clientSize1 = arrowOffsetParent1 ? axis1 === \"y\" ? arrowOffsetParent1.clientHeight || 0 : arrowOffsetParent1.clientWidth || 0 : 0;\n    var centerToReference1 = endDiff1 / 2 - startDiff1 / 2; // Make sure the arrow doesn't overflow the popper if the center point is\n    // outside of the popper bounds\n    var min1 = paddingObject1[minProp1];\n    var max1 = clientSize1 - arrowRect1[len1] - paddingObject1[maxProp1];\n    var center1 = clientSize1 / 2 - arrowRect1[len1] / 2 + centerToReference1;\n    var offset1 = within(min1, center1, max1); // Prevents breaking syntax highlighting...\n    var axisProp1 = axis1;\n    state1.modifiersData[name1] = (_state$modifiersData$1 = {}, _state$modifiersData$1[axisProp1] = offset1, _state$modifiersData$1.centerOffset = offset1 - center1, _state$modifiersData$1);\n}\nfunction effect$1(_ref21) {\n    var state1 = _ref21.state, options1 = _ref21.options;\n    var _options$element1 = options1.element, arrowElement1 = _options$element1 === void 0 ? \"[data-popper-arrow]\" : _options$element1;\n    if (arrowElement1 == null) {\n        return;\n    } // CSS selector\n    if (typeof arrowElement1 === \"string\") {\n        arrowElement1 = state1.elements.popper.querySelector(arrowElement1);\n        if (!arrowElement1) {\n            return;\n        }\n    }\n    if (!contains(state1.elements.popper, arrowElement1)) {\n        return;\n    }\n    state1.elements.arrow = arrowElement1;\n} // eslint-disable-next-line import/no-unused-modules\nvar arrow$1 = {\n    name: \"arrow\",\n    enabled: true,\n    phase: \"main\",\n    fn: arrow,\n    effect: effect$1,\n    requires: [\n        \"popperOffsets\"\n    ],\n    requiresIfExists: [\n        \"preventOverflow\"\n    ]\n};\nfunction getVariation(placement1) {\n    return placement1.split(\"-\")[1];\n}\nvar unsetSides = {\n    top: \"auto\",\n    right: \"auto\",\n    bottom: \"auto\",\n    left: \"auto\"\n}; // Round the offsets to the nearest suitable subpixel based on the DPR.\n// Zooming can change the DPR, but it seems to report a value that will\n// cleanly divide the values into the appropriate subpixels.\nfunction roundOffsetsByDPR(_ref1, win1) {\n    var x1 = _ref1.x, y1 = _ref1.y;\n    var dpr1 = win1.devicePixelRatio || 1;\n    return {\n        x: round(x1 * dpr1) / dpr1 || 0,\n        y: round(y1 * dpr1) / dpr1 || 0\n    };\n}\nfunction mapToStyles(_ref21) {\n    var _Object$assign21;\n    var popper1 = _ref21.popper, popperRect1 = _ref21.popperRect, placement1 = _ref21.placement, variation1 = _ref21.variation, offsets1 = _ref21.offsets, position1 = _ref21.position, gpuAcceleration1 = _ref21.gpuAcceleration, adaptive1 = _ref21.adaptive, roundOffsets1 = _ref21.roundOffsets, isFixed1 = _ref21.isFixed;\n    var _offsets$x1 = offsets1.x, x1 = _offsets$x1 === void 0 ? 0 : _offsets$x1, _offsets$y1 = offsets1.y, y1 = _offsets$y1 === void 0 ? 0 : _offsets$y1;\n    var _ref31 = typeof roundOffsets1 === \"function\" ? roundOffsets1({\n        x: x1,\n        y: y1\n    }) : {\n        x: x1,\n        y: y1\n    };\n    x1 = _ref31.x;\n    y1 = _ref31.y;\n    var hasX1 = offsets1.hasOwnProperty(\"x\");\n    var hasY1 = offsets1.hasOwnProperty(\"y\");\n    var sideX1 = left;\n    var sideY1 = top;\n    var win1 = window;\n    if (adaptive1) {\n        var offsetParent1 = getOffsetParent(popper1);\n        var heightProp1 = \"clientHeight\";\n        var widthProp1 = \"clientWidth\";\n        if (offsetParent1 === getWindow(popper1)) {\n            offsetParent1 = getDocumentElement(popper1);\n            if (getComputedStyle$1(offsetParent1).position !== \"static\" && position1 === \"absolute\") {\n                heightProp1 = \"scrollHeight\";\n                widthProp1 = \"scrollWidth\";\n            }\n        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it\n        offsetParent1 = offsetParent1;\n        if (placement1 === top || (placement1 === left || placement1 === right) && variation1 === end) {\n            sideY1 = bottom;\n            var offsetY1 = isFixed1 && offsetParent1 === win1 && win1.visualViewport ? win1.visualViewport.height : offsetParent1[heightProp1];\n            y1 -= offsetY1 - popperRect1.height;\n            y1 *= gpuAcceleration1 ? 1 : -1;\n        }\n        if (placement1 === left || (placement1 === top || placement1 === bottom) && variation1 === end) {\n            sideX1 = right;\n            var offsetX1 = isFixed1 && offsetParent1 === win1 && win1.visualViewport ? win1.visualViewport.width : offsetParent1[widthProp1];\n            x1 -= offsetX1 - popperRect1.width;\n            x1 *= gpuAcceleration1 ? 1 : -1;\n        }\n    }\n    var commonStyles1 = Object.assign({\n        position: position1\n    }, adaptive1 && unsetSides);\n    var _ref41 = roundOffsets1 === true ? roundOffsetsByDPR({\n        x: x1,\n        y: y1\n    }, getWindow(popper1)) : {\n        x: x1,\n        y: y1\n    };\n    x1 = _ref41.x;\n    y1 = _ref41.y;\n    if (gpuAcceleration1) {\n        var _Object$assign1;\n        return Object.assign({}, commonStyles1, (_Object$assign1 = {}, _Object$assign1[sideY1] = hasY1 ? \"0\" : \"\", _Object$assign1[sideX1] = hasX1 ? \"0\" : \"\", _Object$assign1.transform = (win1.devicePixelRatio || 1) <= 1 ? \"translate(\" + x1 + \"px, \" + y1 + \"px)\" : \"translate3d(\" + x1 + \"px, \" + y1 + \"px, 0)\", _Object$assign1));\n    }\n    return Object.assign({}, commonStyles1, (_Object$assign21 = {}, _Object$assign21[sideY1] = hasY1 ? y1 + \"px\" : \"\", _Object$assign21[sideX1] = hasX1 ? x1 + \"px\" : \"\", _Object$assign21.transform = \"\", _Object$assign21));\n}\nfunction computeStyles(_ref51) {\n    var state1 = _ref51.state, options1 = _ref51.options;\n    var _options$gpuAccelerat1 = options1.gpuAcceleration, gpuAcceleration1 = _options$gpuAccelerat1 === void 0 ? true : _options$gpuAccelerat1, _options$adaptive1 = options1.adaptive, adaptive1 = _options$adaptive1 === void 0 ? true : _options$adaptive1, _options$roundOffsets1 = options1.roundOffsets, roundOffsets1 = _options$roundOffsets1 === void 0 ? true : _options$roundOffsets1;\n    var commonStyles1 = {\n        placement: getBasePlacement(state1.placement),\n        variation: getVariation(state1.placement),\n        popper: state1.elements.popper,\n        popperRect: state1.rects.popper,\n        gpuAcceleration: gpuAcceleration1,\n        isFixed: state1.options.strategy === \"fixed\"\n    };\n    if (state1.modifiersData.popperOffsets != null) {\n        state1.styles.popper = Object.assign({}, state1.styles.popper, mapToStyles(Object.assign({}, commonStyles1, {\n            offsets: state1.modifiersData.popperOffsets,\n            position: state1.options.strategy,\n            adaptive: adaptive1,\n            roundOffsets: roundOffsets1\n        })));\n    }\n    if (state1.modifiersData.arrow != null) {\n        state1.styles.arrow = Object.assign({}, state1.styles.arrow, mapToStyles(Object.assign({}, commonStyles1, {\n            offsets: state1.modifiersData.arrow,\n            position: \"absolute\",\n            adaptive: false,\n            roundOffsets: roundOffsets1\n        })));\n    }\n    state1.attributes.popper = Object.assign({}, state1.attributes.popper, {\n        \"data-popper-placement\": state1.placement\n    });\n} // eslint-disable-next-line import/no-unused-modules\nvar computeStyles$1 = {\n    name: \"computeStyles\",\n    enabled: true,\n    phase: \"beforeWrite\",\n    fn: computeStyles,\n    data: {}\n};\nvar passive = {\n    passive: true\n};\nfunction effect(_ref1) {\n    var state1 = _ref1.state, instance1 = _ref1.instance, options1 = _ref1.options;\n    var _options$scroll1 = options1.scroll, scroll1 = _options$scroll1 === void 0 ? true : _options$scroll1, _options$resize1 = options1.resize, resize1 = _options$resize1 === void 0 ? true : _options$resize1;\n    var window1 = getWindow(state1.elements.popper);\n    var scrollParents1 = [].concat(state1.scrollParents.reference, state1.scrollParents.popper);\n    if (scroll1) {\n        scrollParents1.forEach(function(scrollParent1) {\n            scrollParent1.addEventListener(\"scroll\", instance1.update, passive);\n        });\n    }\n    if (resize1) {\n        window1.addEventListener(\"resize\", instance1.update, passive);\n    }\n    return function() {\n        if (scroll1) {\n            scrollParents1.forEach(function(scrollParent1) {\n                scrollParent1.removeEventListener(\"scroll\", instance1.update, passive);\n            });\n        }\n        if (resize1) {\n            window1.removeEventListener(\"resize\", instance1.update, passive);\n        }\n    };\n} // eslint-disable-next-line import/no-unused-modules\nvar eventListeners = {\n    name: \"eventListeners\",\n    enabled: true,\n    phase: \"write\",\n    fn: function fn1() {},\n    effect: effect,\n    data: {}\n};\nvar hash$1 = {\n    left: \"right\",\n    right: \"left\",\n    bottom: \"top\",\n    top: \"bottom\"\n};\nfunction getOppositePlacement(placement1) {\n    return placement1.replace(/left|right|bottom|top/g, function(matched1) {\n        return hash$1[matched1];\n    });\n}\nvar hash = {\n    start: \"end\",\n    end: \"start\"\n};\nfunction getOppositeVariationPlacement(placement1) {\n    return placement1.replace(/start|end/g, function(matched1) {\n        return hash[matched1];\n    });\n}\nfunction getWindowScroll(node1) {\n    var win1 = getWindow(node1);\n    var scrollLeft1 = win1.pageXOffset;\n    var scrollTop1 = win1.pageYOffset;\n    return {\n        scrollLeft: scrollLeft1,\n        scrollTop: scrollTop1\n    };\n}\nfunction getWindowScrollBarX(element1) {\n    // If <html> has a CSS width greater than the viewport, then this will be\n    // incorrect for RTL.\n    // Popper 1 is broken in this case and never had a bug report so let's assume\n    // it's not an issue. I don't think anyone ever specifies width on <html>\n    // anyway.\n    // Browsers where the left scrollbar doesn't cause an issue report `0` for\n    // this (e.g. Edge 2019, IE11, Safari)\n    return getBoundingClientRect(getDocumentElement(element1)).left + getWindowScroll(element1).scrollLeft;\n}\nfunction getViewportRect(element1, strategy1) {\n    var win1 = getWindow(element1);\n    var html1 = getDocumentElement(element1);\n    var visualViewport1 = win1.visualViewport;\n    var width1 = html1.clientWidth;\n    var height1 = html1.clientHeight;\n    var x1 = 0;\n    var y1 = 0;\n    if (visualViewport1) {\n        width1 = visualViewport1.width;\n        height1 = visualViewport1.height;\n        var layoutViewport1 = isLayoutViewport();\n        if (layoutViewport1 || !layoutViewport1 && strategy1 === \"fixed\") {\n            x1 = visualViewport1.offsetLeft;\n            y1 = visualViewport1.offsetTop;\n        }\n    }\n    return {\n        width: width1,\n        height: height1,\n        x: x1 + getWindowScrollBarX(element1),\n        y: y1\n    };\n}\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable\nfunction getDocumentRect(element1) {\n    var _element$ownerDocumen1;\n    var html1 = getDocumentElement(element1);\n    var winScroll1 = getWindowScroll(element1);\n    var body1 = (_element$ownerDocumen1 = element1.ownerDocument) == null ? void 0 : _element$ownerDocumen1.body;\n    var width1 = max(html1.scrollWidth, html1.clientWidth, body1 ? body1.scrollWidth : 0, body1 ? body1.clientWidth : 0);\n    var height1 = max(html1.scrollHeight, html1.clientHeight, body1 ? body1.scrollHeight : 0, body1 ? body1.clientHeight : 0);\n    var x1 = -winScroll1.scrollLeft + getWindowScrollBarX(element1);\n    var y1 = -winScroll1.scrollTop;\n    if (getComputedStyle$1(body1 || html1).direction === \"rtl\") {\n        x1 += max(html1.clientWidth, body1 ? body1.clientWidth : 0) - width1;\n    }\n    return {\n        width: width1,\n        height: height1,\n        x: x1,\n        y: y1\n    };\n}\nfunction isScrollParent(element1) {\n    // Firefox wants us to check `-x` and `-y` variations as well\n    var _getComputedStyle1 = getComputedStyle$1(element1), overflow1 = _getComputedStyle1.overflow, overflowX1 = _getComputedStyle1.overflowX, overflowY1 = _getComputedStyle1.overflowY;\n    return /auto|scroll|overlay|hidden/.test(overflow1 + overflowY1 + overflowX1);\n}\nfunction getScrollParent(node1) {\n    if ([\n        \"html\",\n        \"body\",\n        \"#document\"\n    ].indexOf(getNodeName(node1)) >= 0) {\n        // $FlowFixMe[incompatible-return]: assume body is always available\n        return node1.ownerDocument.body;\n    }\n    if (isHTMLElement(node1) && isScrollParent(node1)) {\n        return node1;\n    }\n    return getScrollParent(getParentNode(node1));\n}\n/*\ngiven a DOM element, return the list of all scroll parents, up the list of ancesors\nuntil we get to the top window object. This list is what we attach scroll listeners\nto, because if any of these parent elements scroll, we'll need to re-calculate the\nreference element's position.\n*/ function listScrollParents(element1, list1) {\n    var _element$ownerDocumen1;\n    if (list1 === void 0) {\n        list1 = [];\n    }\n    var scrollParent1 = getScrollParent(element1);\n    var isBody1 = scrollParent1 === ((_element$ownerDocumen1 = element1.ownerDocument) == null ? void 0 : _element$ownerDocumen1.body);\n    var win1 = getWindow(scrollParent1);\n    var target1 = isBody1 ? [\n        win1\n    ].concat(win1.visualViewport || [], isScrollParent(scrollParent1) ? scrollParent1 : []) : scrollParent1;\n    var updatedList1 = list1.concat(target1);\n    return isBody1 ? updatedList1 : updatedList1.concat(listScrollParents(getParentNode(target1)));\n}\nfunction rectToClientRect(rect1) {\n    return Object.assign({}, rect1, {\n        left: rect1.x,\n        top: rect1.y,\n        right: rect1.x + rect1.width,\n        bottom: rect1.y + rect1.height\n    });\n}\nfunction getInnerBoundingClientRect(element1, strategy1) {\n    var rect1 = getBoundingClientRect(element1, false, strategy1 === \"fixed\");\n    rect1.top = rect1.top + element1.clientTop;\n    rect1.left = rect1.left + element1.clientLeft;\n    rect1.bottom = rect1.top + element1.clientHeight;\n    rect1.right = rect1.left + element1.clientWidth;\n    rect1.width = element1.clientWidth;\n    rect1.height = element1.clientHeight;\n    rect1.x = rect1.left;\n    rect1.y = rect1.top;\n    return rect1;\n}\nfunction getClientRectFromMixedType(element1, clippingParent1, strategy1) {\n    return clippingParent1 === viewport ? rectToClientRect(getViewportRect(element1, strategy1)) : isElement(clippingParent1) ? getInnerBoundingClientRect(clippingParent1, strategy1) : rectToClientRect(getDocumentRect(getDocumentElement(element1)));\n} // A \"clipping parent\" is an overflowable container with the characteristic of\n// clipping (or hiding) overflowing elements with a position different from\n// `initial`\nfunction getClippingParents(element1) {\n    var clippingParents1 = listScrollParents(getParentNode(element1));\n    var canEscapeClipping1 = [\n        \"absolute\",\n        \"fixed\"\n    ].indexOf(getComputedStyle$1(element1).position) >= 0;\n    var clipperElement1 = canEscapeClipping1 && isHTMLElement(element1) ? getOffsetParent(element1) : element1;\n    if (!isElement(clipperElement1)) {\n        return [];\n    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414\n    return clippingParents1.filter(function(clippingParent1) {\n        return isElement(clippingParent1) && contains(clippingParent1, clipperElement1) && getNodeName(clippingParent1) !== \"body\";\n    });\n} // Gets the maximum area that the element is visible in due to any number of\n// clipping parents\nfunction getClippingRect(element1, boundary1, rootBoundary1, strategy1) {\n    var mainClippingParents1 = boundary1 === \"clippingParents\" ? getClippingParents(element1) : [].concat(boundary1);\n    var clippingParents1 = [].concat(mainClippingParents1, [\n        rootBoundary1\n    ]);\n    var firstClippingParent1 = clippingParents1[0];\n    var clippingRect1 = clippingParents1.reduce(function(accRect1, clippingParent1) {\n        var rect1 = getClientRectFromMixedType(element1, clippingParent1, strategy1);\n        accRect1.top = max(rect1.top, accRect1.top);\n        accRect1.right = min(rect1.right, accRect1.right);\n        accRect1.bottom = min(rect1.bottom, accRect1.bottom);\n        accRect1.left = max(rect1.left, accRect1.left);\n        return accRect1;\n    }, getClientRectFromMixedType(element1, firstClippingParent1, strategy1));\n    clippingRect1.width = clippingRect1.right - clippingRect1.left;\n    clippingRect1.height = clippingRect1.bottom - clippingRect1.top;\n    clippingRect1.x = clippingRect1.left;\n    clippingRect1.y = clippingRect1.top;\n    return clippingRect1;\n}\nfunction computeOffsets(_ref1) {\n    var reference1 = _ref1.reference, element1 = _ref1.element, placement1 = _ref1.placement;\n    var basePlacement1 = placement1 ? getBasePlacement(placement1) : null;\n    var variation1 = placement1 ? getVariation(placement1) : null;\n    var commonX1 = reference1.x + reference1.width / 2 - element1.width / 2;\n    var commonY1 = reference1.y + reference1.height / 2 - element1.height / 2;\n    var offsets1;\n    switch(basePlacement1){\n        case top:\n            offsets1 = {\n                x: commonX1,\n                y: reference1.y - element1.height\n            };\n            break;\n        case bottom:\n            offsets1 = {\n                x: commonX1,\n                y: reference1.y + reference1.height\n            };\n            break;\n        case right:\n            offsets1 = {\n                x: reference1.x + reference1.width,\n                y: commonY1\n            };\n            break;\n        case left:\n            offsets1 = {\n                x: reference1.x - element1.width,\n                y: commonY1\n            };\n            break;\n        default:\n            offsets1 = {\n                x: reference1.x,\n                y: reference1.y\n            };\n    }\n    var mainAxis1 = basePlacement1 ? getMainAxisFromPlacement(basePlacement1) : null;\n    if (mainAxis1 != null) {\n        var len1 = mainAxis1 === \"y\" ? \"height\" : \"width\";\n        switch(variation1){\n            case start:\n                offsets1[mainAxis1] = offsets1[mainAxis1] - (reference1[len1] / 2 - element1[len1] / 2);\n                break;\n            case end:\n                offsets1[mainAxis1] = offsets1[mainAxis1] + (reference1[len1] / 2 - element1[len1] / 2);\n                break;\n        }\n    }\n    return offsets1;\n}\nfunction detectOverflow(state1, options1) {\n    if (options1 === void 0) {\n        options1 = {};\n    }\n    var _options1 = options1, _options$placement1 = _options1.placement, placement1 = _options$placement1 === void 0 ? state1.placement : _options$placement1, _options$strategy1 = _options1.strategy, strategy1 = _options$strategy1 === void 0 ? state1.strategy : _options$strategy1, _options$boundary1 = _options1.boundary, boundary1 = _options$boundary1 === void 0 ? clippingParents : _options$boundary1, _options$rootBoundary1 = _options1.rootBoundary, rootBoundary1 = _options$rootBoundary1 === void 0 ? viewport : _options$rootBoundary1, _options$elementConte1 = _options1.elementContext, elementContext1 = _options$elementConte1 === void 0 ? popper : _options$elementConte1, _options$altBoundary1 = _options1.altBoundary, altBoundary1 = _options$altBoundary1 === void 0 ? false : _options$altBoundary1, _options$padding1 = _options1.padding, padding1 = _options$padding1 === void 0 ? 0 : _options$padding1;\n    var paddingObject1 = mergePaddingObject(typeof padding1 !== \"number\" ? padding1 : expandToHashMap(padding1, basePlacements));\n    var altContext1 = elementContext1 === popper ? reference : popper;\n    var popperRect1 = state1.rects.popper;\n    var element1 = state1.elements[altBoundary1 ? altContext1 : elementContext1];\n    var clippingClientRect1 = getClippingRect(isElement(element1) ? element1 : element1.contextElement || getDocumentElement(state1.elements.popper), boundary1, rootBoundary1, strategy1);\n    var referenceClientRect1 = getBoundingClientRect(state1.elements.reference);\n    var popperOffsets1 = computeOffsets({\n        reference: referenceClientRect1,\n        element: popperRect1,\n        placement: placement1\n    });\n    var popperClientRect1 = rectToClientRect(Object.assign({}, popperRect1, popperOffsets1));\n    var elementClientRect1 = elementContext1 === popper ? popperClientRect1 : referenceClientRect1; // positive = overflowing the clipping rect\n    // 0 or negative = within the clipping rect\n    var overflowOffsets1 = {\n        top: clippingClientRect1.top - elementClientRect1.top + paddingObject1.top,\n        bottom: elementClientRect1.bottom - clippingClientRect1.bottom + paddingObject1.bottom,\n        left: clippingClientRect1.left - elementClientRect1.left + paddingObject1.left,\n        right: elementClientRect1.right - clippingClientRect1.right + paddingObject1.right\n    };\n    var offsetData1 = state1.modifiersData.offset; // Offsets can be applied only to the popper element\n    if (elementContext1 === popper && offsetData1) {\n        var offset1 = offsetData1[placement1];\n        Object.keys(overflowOffsets1).forEach(function(key1) {\n            var multiply1 = [\n                right,\n                bottom\n            ].indexOf(key1) >= 0 ? 1 : -1;\n            var axis1 = [\n                top,\n                bottom\n            ].indexOf(key1) >= 0 ? \"y\" : \"x\";\n            overflowOffsets1[key1] += offset1[axis1] * multiply1;\n        });\n    }\n    return overflowOffsets1;\n}\nfunction computeAutoPlacement(state1, options1) {\n    if (options1 === void 0) {\n        options1 = {};\n    }\n    var _options1 = options1, placement1 = _options1.placement, boundary1 = _options1.boundary, rootBoundary1 = _options1.rootBoundary, padding1 = _options1.padding, flipVariations1 = _options1.flipVariations, _options$allowedAutoP1 = _options1.allowedAutoPlacements, allowedAutoPlacements1 = _options$allowedAutoP1 === void 0 ? placements : _options$allowedAutoP1;\n    var variation1 = getVariation(placement1);\n    var placements$11 = variation1 ? flipVariations1 ? variationPlacements : variationPlacements.filter(function(placement1) {\n        return getVariation(placement1) === variation1;\n    }) : basePlacements;\n    var allowedPlacements1 = placements$11.filter(function(placement1) {\n        return allowedAutoPlacements1.indexOf(placement1) >= 0;\n    });\n    if (allowedPlacements1.length === 0) {\n        allowedPlacements1 = placements$11;\n    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...\n    var overflows1 = allowedPlacements1.reduce(function(acc1, placement1) {\n        acc1[placement1] = detectOverflow(state1, {\n            placement: placement1,\n            boundary: boundary1,\n            rootBoundary: rootBoundary1,\n            padding: padding1\n        })[getBasePlacement(placement1)];\n        return acc1;\n    }, {});\n    return Object.keys(overflows1).sort(function(a1, b1) {\n        return overflows1[a1] - overflows1[b1];\n    });\n}\nfunction getExpandedFallbackPlacements(placement1) {\n    if (getBasePlacement(placement1) === auto) {\n        return [];\n    }\n    var oppositePlacement1 = getOppositePlacement(placement1);\n    return [\n        getOppositeVariationPlacement(placement1),\n        oppositePlacement1,\n        getOppositeVariationPlacement(oppositePlacement1)\n    ];\n}\nfunction flip(_ref1) {\n    var state1 = _ref1.state, options1 = _ref1.options, name1 = _ref1.name;\n    if (state1.modifiersData[name1]._skip) {\n        return;\n    }\n    var _options$mainAxis1 = options1.mainAxis, checkMainAxis1 = _options$mainAxis1 === void 0 ? true : _options$mainAxis1, _options$altAxis1 = options1.altAxis, checkAltAxis1 = _options$altAxis1 === void 0 ? true : _options$altAxis1, specifiedFallbackPlacements1 = options1.fallbackPlacements, padding1 = options1.padding, boundary1 = options1.boundary, rootBoundary1 = options1.rootBoundary, altBoundary1 = options1.altBoundary, _options$flipVariatio1 = options1.flipVariations, flipVariations1 = _options$flipVariatio1 === void 0 ? true : _options$flipVariatio1, allowedAutoPlacements1 = options1.allowedAutoPlacements;\n    var preferredPlacement1 = state1.options.placement;\n    var basePlacement1 = getBasePlacement(preferredPlacement1);\n    var isBasePlacement1 = basePlacement1 === preferredPlacement1;\n    var fallbackPlacements1 = specifiedFallbackPlacements1 || (isBasePlacement1 || !flipVariations1 ? [\n        getOppositePlacement(preferredPlacement1)\n    ] : getExpandedFallbackPlacements(preferredPlacement1));\n    var placements1 = [\n        preferredPlacement1\n    ].concat(fallbackPlacements1).reduce(function(acc1, placement1) {\n        return acc1.concat(getBasePlacement(placement1) === auto ? computeAutoPlacement(state1, {\n            placement: placement1,\n            boundary: boundary1,\n            rootBoundary: rootBoundary1,\n            padding: padding1,\n            flipVariations: flipVariations1,\n            allowedAutoPlacements: allowedAutoPlacements1\n        }) : placement1);\n    }, []);\n    var referenceRect1 = state1.rects.reference;\n    var popperRect1 = state1.rects.popper;\n    var checksMap1 = new Map();\n    var makeFallbackChecks1 = true;\n    var firstFittingPlacement1 = placements1[0];\n    for(var i1 = 0; i1 < placements1.length; i1++){\n        var placement1 = placements1[i1];\n        var _basePlacement1 = getBasePlacement(placement1);\n        var isStartVariation1 = getVariation(placement1) === start;\n        var isVertical1 = [\n            top,\n            bottom\n        ].indexOf(_basePlacement1) >= 0;\n        var len1 = isVertical1 ? \"width\" : \"height\";\n        var overflow1 = detectOverflow(state1, {\n            placement: placement1,\n            boundary: boundary1,\n            rootBoundary: rootBoundary1,\n            altBoundary: altBoundary1,\n            padding: padding1\n        });\n        var mainVariationSide1 = isVertical1 ? isStartVariation1 ? right : left : isStartVariation1 ? bottom : top;\n        if (referenceRect1[len1] > popperRect1[len1]) {\n            mainVariationSide1 = getOppositePlacement(mainVariationSide1);\n        }\n        var altVariationSide1 = getOppositePlacement(mainVariationSide1);\n        var checks1 = [];\n        if (checkMainAxis1) {\n            checks1.push(overflow1[_basePlacement1] <= 0);\n        }\n        if (checkAltAxis1) {\n            checks1.push(overflow1[mainVariationSide1] <= 0, overflow1[altVariationSide1] <= 0);\n        }\n        if (checks1.every(function(check1) {\n            return check1;\n        })) {\n            firstFittingPlacement1 = placement1;\n            makeFallbackChecks1 = false;\n            break;\n        }\n        checksMap1.set(placement1, checks1);\n    }\n    if (makeFallbackChecks1) {\n        // `2` may be desired in some cases – research later\n        var numberOfChecks1 = flipVariations1 ? 3 : 1;\n        var _loop1 = function _loop1(_i1) {\n            var fittingPlacement1 = placements1.find(function(placement1) {\n                var checks1 = checksMap1.get(placement1);\n                if (checks1) {\n                    return checks1.slice(0, _i1).every(function(check1) {\n                        return check1;\n                    });\n                }\n            });\n            if (fittingPlacement1) {\n                firstFittingPlacement1 = fittingPlacement1;\n                return \"break\";\n            }\n        };\n        for(var _i1 = numberOfChecks1; _i1 > 0; _i1--){\n            var _ret1 = _loop1(_i1);\n            if (_ret1 === \"break\") break;\n        }\n    }\n    if (state1.placement !== firstFittingPlacement1) {\n        state1.modifiersData[name1]._skip = true;\n        state1.placement = firstFittingPlacement1;\n        state1.reset = true;\n    }\n} // eslint-disable-next-line import/no-unused-modules\nvar flip$1 = {\n    name: \"flip\",\n    enabled: true,\n    phase: \"main\",\n    fn: flip,\n    requiresIfExists: [\n        \"offset\"\n    ],\n    data: {\n        _skip: false\n    }\n};\nfunction getSideOffsets(overflow1, rect1, preventedOffsets1) {\n    if (preventedOffsets1 === void 0) {\n        preventedOffsets1 = {\n            x: 0,\n            y: 0\n        };\n    }\n    return {\n        top: overflow1.top - rect1.height - preventedOffsets1.y,\n        right: overflow1.right - rect1.width + preventedOffsets1.x,\n        bottom: overflow1.bottom - rect1.height + preventedOffsets1.y,\n        left: overflow1.left - rect1.width - preventedOffsets1.x\n    };\n}\nfunction isAnySideFullyClipped(overflow1) {\n    return [\n        top,\n        right,\n        bottom,\n        left\n    ].some(function(side1) {\n        return overflow1[side1] >= 0;\n    });\n}\nfunction hide(_ref1) {\n    var state1 = _ref1.state, name1 = _ref1.name;\n    var referenceRect1 = state1.rects.reference;\n    var popperRect1 = state1.rects.popper;\n    var preventedOffsets1 = state1.modifiersData.preventOverflow;\n    var referenceOverflow1 = detectOverflow(state1, {\n        elementContext: \"reference\"\n    });\n    var popperAltOverflow1 = detectOverflow(state1, {\n        altBoundary: true\n    });\n    var referenceClippingOffsets1 = getSideOffsets(referenceOverflow1, referenceRect1);\n    var popperEscapeOffsets1 = getSideOffsets(popperAltOverflow1, popperRect1, preventedOffsets1);\n    var isReferenceHidden1 = isAnySideFullyClipped(referenceClippingOffsets1);\n    var hasPopperEscaped1 = isAnySideFullyClipped(popperEscapeOffsets1);\n    state1.modifiersData[name1] = {\n        referenceClippingOffsets: referenceClippingOffsets1,\n        popperEscapeOffsets: popperEscapeOffsets1,\n        isReferenceHidden: isReferenceHidden1,\n        hasPopperEscaped: hasPopperEscaped1\n    };\n    state1.attributes.popper = Object.assign({}, state1.attributes.popper, {\n        \"data-popper-reference-hidden\": isReferenceHidden1,\n        \"data-popper-escaped\": hasPopperEscaped1\n    });\n} // eslint-disable-next-line import/no-unused-modules\nvar hide$1 = {\n    name: \"hide\",\n    enabled: true,\n    phase: \"main\",\n    requiresIfExists: [\n        \"preventOverflow\"\n    ],\n    fn: hide\n};\nfunction distanceAndSkiddingToXY(placement1, rects1, offset1) {\n    var basePlacement1 = getBasePlacement(placement1);\n    var invertDistance1 = [\n        left,\n        top\n    ].indexOf(basePlacement1) >= 0 ? -1 : 1;\n    var _ref1 = typeof offset1 === \"function\" ? offset1(Object.assign({}, rects1, {\n        placement: placement1\n    })) : offset1, skidding1 = _ref1[0], distance1 = _ref1[1];\n    skidding1 = skidding1 || 0;\n    distance1 = (distance1 || 0) * invertDistance1;\n    return [\n        left,\n        right\n    ].indexOf(basePlacement1) >= 0 ? {\n        x: distance1,\n        y: skidding1\n    } : {\n        x: skidding1,\n        y: distance1\n    };\n}\nfunction offset(_ref21) {\n    var state1 = _ref21.state, options1 = _ref21.options, name1 = _ref21.name;\n    var _options$offset1 = options1.offset, offset1 = _options$offset1 === void 0 ? [\n        0,\n        0\n    ] : _options$offset1;\n    var data1 = placements.reduce(function(acc1, placement1) {\n        acc1[placement1] = distanceAndSkiddingToXY(placement1, state1.rects, offset1);\n        return acc1;\n    }, {});\n    var _data$state$placement1 = data1[state1.placement], x1 = _data$state$placement1.x, y1 = _data$state$placement1.y;\n    if (state1.modifiersData.popperOffsets != null) {\n        state1.modifiersData.popperOffsets.x += x1;\n        state1.modifiersData.popperOffsets.y += y1;\n    }\n    state1.modifiersData[name1] = data1;\n} // eslint-disable-next-line import/no-unused-modules\nvar offset$1 = {\n    name: \"offset\",\n    enabled: true,\n    phase: \"main\",\n    requires: [\n        \"popperOffsets\"\n    ],\n    fn: offset\n};\nfunction popperOffsets(_ref1) {\n    var state1 = _ref1.state, name1 = _ref1.name;\n    // Offsets are the actual position the popper needs to have to be\n    // properly positioned near its reference element\n    // This is the most basic placement, and will be adjusted by\n    // the modifiers in the next step\n    state1.modifiersData[name1] = computeOffsets({\n        reference: state1.rects.reference,\n        element: state1.rects.popper,\n        placement: state1.placement\n    });\n} // eslint-disable-next-line import/no-unused-modules\nvar popperOffsets$1 = {\n    name: \"popperOffsets\",\n    enabled: true,\n    phase: \"read\",\n    fn: popperOffsets,\n    data: {}\n};\nfunction getAltAxis(axis1) {\n    return axis1 === \"x\" ? \"y\" : \"x\";\n}\nfunction preventOverflow(_ref1) {\n    var state1 = _ref1.state, options1 = _ref1.options, name1 = _ref1.name;\n    var _options$mainAxis1 = options1.mainAxis, checkMainAxis1 = _options$mainAxis1 === void 0 ? true : _options$mainAxis1, _options$altAxis1 = options1.altAxis, checkAltAxis1 = _options$altAxis1 === void 0 ? false : _options$altAxis1, boundary1 = options1.boundary, rootBoundary1 = options1.rootBoundary, altBoundary1 = options1.altBoundary, padding1 = options1.padding, _options$tether1 = options1.tether, tether1 = _options$tether1 === void 0 ? true : _options$tether1, _options$tetherOffset1 = options1.tetherOffset, tetherOffset1 = _options$tetherOffset1 === void 0 ? 0 : _options$tetherOffset1;\n    var overflow1 = detectOverflow(state1, {\n        boundary: boundary1,\n        rootBoundary: rootBoundary1,\n        padding: padding1,\n        altBoundary: altBoundary1\n    });\n    var basePlacement1 = getBasePlacement(state1.placement);\n    var variation1 = getVariation(state1.placement);\n    var isBasePlacement1 = !variation1;\n    var mainAxis1 = getMainAxisFromPlacement(basePlacement1);\n    var altAxis1 = getAltAxis(mainAxis1);\n    var popperOffsets1 = state1.modifiersData.popperOffsets;\n    var referenceRect1 = state1.rects.reference;\n    var popperRect1 = state1.rects.popper;\n    var tetherOffsetValue1 = typeof tetherOffset1 === \"function\" ? tetherOffset1(Object.assign({}, state1.rects, {\n        placement: state1.placement\n    })) : tetherOffset1;\n    var normalizedTetherOffsetValue1 = typeof tetherOffsetValue1 === \"number\" ? {\n        mainAxis: tetherOffsetValue1,\n        altAxis: tetherOffsetValue1\n    } : Object.assign({\n        mainAxis: 0,\n        altAxis: 0\n    }, tetherOffsetValue1);\n    var offsetModifierState1 = state1.modifiersData.offset ? state1.modifiersData.offset[state1.placement] : null;\n    var data1 = {\n        x: 0,\n        y: 0\n    };\n    if (!popperOffsets1) {\n        return;\n    }\n    if (checkMainAxis1) {\n        var _offsetModifierState$1;\n        var mainSide1 = mainAxis1 === \"y\" ? top : left;\n        var altSide1 = mainAxis1 === \"y\" ? bottom : right;\n        var len1 = mainAxis1 === \"y\" ? \"height\" : \"width\";\n        var offset1 = popperOffsets1[mainAxis1];\n        var min$11 = offset1 + overflow1[mainSide1];\n        var max$11 = offset1 - overflow1[altSide1];\n        var additive1 = tether1 ? -popperRect1[len1] / 2 : 0;\n        var minLen1 = variation1 === start ? referenceRect1[len1] : popperRect1[len1];\n        var maxLen1 = variation1 === start ? -popperRect1[len1] : -referenceRect1[len1]; // We need to include the arrow in the calculation so the arrow doesn't go\n        // outside the reference bounds\n        var arrowElement1 = state1.elements.arrow;\n        var arrowRect1 = tether1 && arrowElement1 ? getLayoutRect(arrowElement1) : {\n            width: 0,\n            height: 0\n        };\n        var arrowPaddingObject1 = state1.modifiersData[\"arrow#persistent\"] ? state1.modifiersData[\"arrow#persistent\"].padding : getFreshSideObject();\n        var arrowPaddingMin1 = arrowPaddingObject1[mainSide1];\n        var arrowPaddingMax1 = arrowPaddingObject1[altSide1]; // If the reference length is smaller than the arrow length, we don't want\n        // to include its full size in the calculation. If the reference is small\n        // and near the edge of a boundary, the popper can overflow even if the\n        // reference is not overflowing as well (e.g. virtual elements with no\n        // width or height)\n        var arrowLen1 = within(0, referenceRect1[len1], arrowRect1[len1]);\n        var minOffset1 = isBasePlacement1 ? referenceRect1[len1] / 2 - additive1 - arrowLen1 - arrowPaddingMin1 - normalizedTetherOffsetValue1.mainAxis : minLen1 - arrowLen1 - arrowPaddingMin1 - normalizedTetherOffsetValue1.mainAxis;\n        var maxOffset1 = isBasePlacement1 ? -referenceRect1[len1] / 2 + additive1 + arrowLen1 + arrowPaddingMax1 + normalizedTetherOffsetValue1.mainAxis : maxLen1 + arrowLen1 + arrowPaddingMax1 + normalizedTetherOffsetValue1.mainAxis;\n        var arrowOffsetParent1 = state1.elements.arrow && getOffsetParent(state1.elements.arrow);\n        var clientOffset1 = arrowOffsetParent1 ? mainAxis1 === \"y\" ? arrowOffsetParent1.clientTop || 0 : arrowOffsetParent1.clientLeft || 0 : 0;\n        var offsetModifierValue1 = (_offsetModifierState$1 = offsetModifierState1 == null ? void 0 : offsetModifierState1[mainAxis1]) != null ? _offsetModifierState$1 : 0;\n        var tetherMin1 = offset1 + minOffset1 - offsetModifierValue1 - clientOffset1;\n        var tetherMax1 = offset1 + maxOffset1 - offsetModifierValue1;\n        var preventedOffset1 = within(tether1 ? min(min$11, tetherMin1) : min$11, offset1, tether1 ? max(max$11, tetherMax1) : max$11);\n        popperOffsets1[mainAxis1] = preventedOffset1;\n        data1[mainAxis1] = preventedOffset1 - offset1;\n    }\n    if (checkAltAxis1) {\n        var _offsetModifierState$21;\n        var _mainSide1 = mainAxis1 === \"x\" ? top : left;\n        var _altSide1 = mainAxis1 === \"x\" ? bottom : right;\n        var _offset1 = popperOffsets1[altAxis1];\n        var _len1 = altAxis1 === \"y\" ? \"height\" : \"width\";\n        var _min1 = _offset1 + overflow1[_mainSide1];\n        var _max1 = _offset1 - overflow1[_altSide1];\n        var isOriginSide1 = [\n            top,\n            left\n        ].indexOf(basePlacement1) !== -1;\n        var _offsetModifierValue1 = (_offsetModifierState$21 = offsetModifierState1 == null ? void 0 : offsetModifierState1[altAxis1]) != null ? _offsetModifierState$21 : 0;\n        var _tetherMin1 = isOriginSide1 ? _min1 : _offset1 - referenceRect1[_len1] - popperRect1[_len1] - _offsetModifierValue1 + normalizedTetherOffsetValue1.altAxis;\n        var _tetherMax1 = isOriginSide1 ? _offset1 + referenceRect1[_len1] + popperRect1[_len1] - _offsetModifierValue1 - normalizedTetherOffsetValue1.altAxis : _max1;\n        var _preventedOffset1 = tether1 && isOriginSide1 ? withinMaxClamp(_tetherMin1, _offset1, _tetherMax1) : within(tether1 ? _tetherMin1 : _min1, _offset1, tether1 ? _tetherMax1 : _max1);\n        popperOffsets1[altAxis1] = _preventedOffset1;\n        data1[altAxis1] = _preventedOffset1 - _offset1;\n    }\n    state1.modifiersData[name1] = data1;\n} // eslint-disable-next-line import/no-unused-modules\nvar preventOverflow$1 = {\n    name: \"preventOverflow\",\n    enabled: true,\n    phase: \"main\",\n    fn: preventOverflow,\n    requiresIfExists: [\n        \"offset\"\n    ]\n};\nfunction getHTMLElementScroll(element1) {\n    return {\n        scrollLeft: element1.scrollLeft,\n        scrollTop: element1.scrollTop\n    };\n}\nfunction getNodeScroll(node1) {\n    if (node1 === getWindow(node1) || !isHTMLElement(node1)) {\n        return getWindowScroll(node1);\n    } else {\n        return getHTMLElementScroll(node1);\n    }\n}\nfunction isElementScaled(element1) {\n    var rect1 = element1.getBoundingClientRect();\n    var scaleX1 = round(rect1.width) / element1.offsetWidth || 1;\n    var scaleY1 = round(rect1.height) / element1.offsetHeight || 1;\n    return scaleX1 !== 1 || scaleY1 !== 1;\n} // Returns the composite rect of an element relative to its offsetParent.\n// Composite means it takes into account transforms as well as layout.\nfunction getCompositeRect(elementOrVirtualElement1, offsetParent1, isFixed1) {\n    if (isFixed1 === void 0) {\n        isFixed1 = false;\n    }\n    var isOffsetParentAnElement1 = isHTMLElement(offsetParent1);\n    var offsetParentIsScaled1 = isHTMLElement(offsetParent1) && isElementScaled(offsetParent1);\n    var documentElement1 = getDocumentElement(offsetParent1);\n    var rect1 = getBoundingClientRect(elementOrVirtualElement1, offsetParentIsScaled1, isFixed1);\n    var scroll1 = {\n        scrollLeft: 0,\n        scrollTop: 0\n    };\n    var offsets1 = {\n        x: 0,\n        y: 0\n    };\n    if (isOffsetParentAnElement1 || !isOffsetParentAnElement1 && !isFixed1) {\n        if (getNodeName(offsetParent1) !== \"body\" || // https://github.com/popperjs/popper-core/issues/1078\n        isScrollParent(documentElement1)) {\n            scroll1 = getNodeScroll(offsetParent1);\n        }\n        if (isHTMLElement(offsetParent1)) {\n            offsets1 = getBoundingClientRect(offsetParent1, true);\n            offsets1.x += offsetParent1.clientLeft;\n            offsets1.y += offsetParent1.clientTop;\n        } else if (documentElement1) {\n            offsets1.x = getWindowScrollBarX(documentElement1);\n        }\n    }\n    return {\n        x: rect1.left + scroll1.scrollLeft - offsets1.x,\n        y: rect1.top + scroll1.scrollTop - offsets1.y,\n        width: rect1.width,\n        height: rect1.height\n    };\n}\nfunction order(modifiers1) {\n    var map1 = new Map();\n    var visited1 = new Set();\n    var result1 = [];\n    modifiers1.forEach(function(modifier1) {\n        map1.set(modifier1.name, modifier1);\n    }); // On visiting object, check for its dependencies and visit them recursively\n    function sort1(modifier1) {\n        visited1.add(modifier1.name);\n        var requires1 = [].concat(modifier1.requires || [], modifier1.requiresIfExists || []);\n        requires1.forEach(function(dep1) {\n            if (!visited1.has(dep1)) {\n                var depModifier1 = map1.get(dep1);\n                if (depModifier1) {\n                    sort1(depModifier1);\n                }\n            }\n        });\n        result1.push(modifier1);\n    }\n    modifiers1.forEach(function(modifier1) {\n        if (!visited1.has(modifier1.name)) {\n            // check for visited object\n            sort1(modifier1);\n        }\n    });\n    return result1;\n}\nfunction orderModifiers(modifiers1) {\n    // order based on dependencies\n    var orderedModifiers1 = order(modifiers1); // order based on phase\n    return modifierPhases.reduce(function(acc1, phase1) {\n        return acc1.concat(orderedModifiers1.filter(function(modifier1) {\n            return modifier1.phase === phase1;\n        }));\n    }, []);\n}\nfunction debounce(fn1) {\n    var pending1;\n    return function() {\n        if (!pending1) {\n            pending1 = new Promise(function(resolve1) {\n                Promise.resolve().then(function() {\n                    pending1 = undefined;\n                    resolve1(fn1());\n                });\n            });\n        }\n        return pending1;\n    };\n}\nfunction mergeByName(modifiers1) {\n    var merged1 = modifiers1.reduce(function(merged1, current1) {\n        var existing1 = merged1[current1.name];\n        merged1[current1.name] = existing1 ? Object.assign({}, existing1, current1, {\n            options: Object.assign({}, existing1.options, current1.options),\n            data: Object.assign({}, existing1.data, current1.data)\n        }) : current1;\n        return merged1;\n    }, {}); // IE11 does not support Object.values\n    return Object.keys(merged1).map(function(key1) {\n        return merged1[key1];\n    });\n}\nvar DEFAULT_OPTIONS = {\n    placement: \"bottom\",\n    modifiers: [],\n    strategy: \"absolute\"\n};\nfunction areValidElements() {\n    for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++){\n        args1[_key1] = arguments[_key1];\n    }\n    return !args1.some(function(element1) {\n        return !(element1 && typeof element1.getBoundingClientRect === \"function\");\n    });\n}\nfunction popperGenerator(generatorOptions1) {\n    if (generatorOptions1 === void 0) {\n        generatorOptions1 = {};\n    }\n    var _generatorOptions1 = generatorOptions1, _generatorOptions$def1 = _generatorOptions1.defaultModifiers, defaultModifiers1 = _generatorOptions$def1 === void 0 ? [] : _generatorOptions$def1, _generatorOptions$def21 = _generatorOptions1.defaultOptions, defaultOptions1 = _generatorOptions$def21 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def21;\n    return function createPopper1(reference1, popper1, options1) {\n        if (options1 === void 0) {\n            options1 = defaultOptions1;\n        }\n        var state1 = {\n            placement: \"bottom\",\n            orderedModifiers: [],\n            options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions1),\n            modifiersData: {},\n            elements: {\n                reference: reference1,\n                popper: popper1\n            },\n            attributes: {},\n            styles: {}\n        };\n        var effectCleanupFns1 = [];\n        var isDestroyed1 = false;\n        var instance1 = {\n            state: state1,\n            setOptions: function setOptions1(setOptionsAction1) {\n                var options1 = typeof setOptionsAction1 === \"function\" ? setOptionsAction1(state1.options) : setOptionsAction1;\n                cleanupModifierEffects1();\n                state1.options = Object.assign({}, defaultOptions1, state1.options, options1);\n                state1.scrollParents = {\n                    reference: isElement(reference1) ? listScrollParents(reference1) : reference1.contextElement ? listScrollParents(reference1.contextElement) : [],\n                    popper: listScrollParents(popper1)\n                }; // Orders the modifiers based on their dependencies and `phase`\n                // properties\n                var orderedModifiers1 = orderModifiers(mergeByName([].concat(defaultModifiers1, state1.options.modifiers))); // Strip out disabled modifiers\n                state1.orderedModifiers = orderedModifiers1.filter(function(m1) {\n                    return m1.enabled;\n                });\n                runModifierEffects1();\n                return instance1.update();\n            },\n            // Sync update – it will always be executed, even if not necessary. This\n            // is useful for low frequency updates where sync behavior simplifies the\n            // logic.\n            // For high frequency updates (e.g. `resize` and `scroll` events), always\n            // prefer the async Popper#update method\n            forceUpdate: function forceUpdate1() {\n                if (isDestroyed1) {\n                    return;\n                }\n                var _state$elements1 = state1.elements, reference1 = _state$elements1.reference, popper1 = _state$elements1.popper; // Don't proceed if `reference` or `popper` are not valid elements\n                // anymore\n                if (!areValidElements(reference1, popper1)) {\n                    return;\n                } // Store the reference and popper rects to be read by modifiers\n                state1.rects = {\n                    reference: getCompositeRect(reference1, getOffsetParent(popper1), state1.options.strategy === \"fixed\"),\n                    popper: getLayoutRect(popper1)\n                }; // Modifiers have the ability to reset the current update cycle. The\n                // most common use case for this is the `flip` modifier changing the\n                // placement, which then needs to re-run all the modifiers, because the\n                // logic was previously ran for the previous placement and is therefore\n                // stale/incorrect\n                state1.reset = false;\n                state1.placement = state1.options.placement; // On each update cycle, the `modifiersData` property for each modifier\n                // is filled with the initial data specified by the modifier. This means\n                // it doesn't persist and is fresh on each update.\n                // To ensure persistent data, use `${name}#persistent`\n                state1.orderedModifiers.forEach(function(modifier1) {\n                    return state1.modifiersData[modifier1.name] = Object.assign({}, modifier1.data);\n                });\n                for(var index1 = 0; index1 < state1.orderedModifiers.length; index1++){\n                    if (state1.reset === true) {\n                        state1.reset = false;\n                        index1 = -1;\n                        continue;\n                    }\n                    var _state$orderedModifie1 = state1.orderedModifiers[index1], fn1 = _state$orderedModifie1.fn, _state$orderedModifie21 = _state$orderedModifie1.options, _options1 = _state$orderedModifie21 === void 0 ? {} : _state$orderedModifie21, name1 = _state$orderedModifie1.name;\n                    if (typeof fn1 === \"function\") {\n                        state1 = fn1({\n                            state: state1,\n                            options: _options1,\n                            name: name1,\n                            instance: instance1\n                        }) || state1;\n                    }\n                }\n            },\n            // Async and optimistically optimized update – it will not be executed if\n            // not necessary (debounced to run at most once-per-tick)\n            update: debounce(function() {\n                return new Promise(function(resolve1) {\n                    instance1.forceUpdate();\n                    resolve1(state1);\n                });\n            }),\n            destroy: function destroy1() {\n                cleanupModifierEffects1();\n                isDestroyed1 = true;\n            }\n        };\n        if (!areValidElements(reference1, popper1)) {\n            return instance1;\n        }\n        instance1.setOptions(options1).then(function(state1) {\n            if (!isDestroyed1 && options1.onFirstUpdate) {\n                options1.onFirstUpdate(state1);\n            }\n        }); // Modifiers have the ability to execute arbitrary code before the first\n        // update cycle runs. They will be executed in the same order as the update\n        // cycle. This is useful when a modifier adds some persistent data that\n        // other modifiers need to use, but the modifier is run after the dependent\n        // one.\n        function runModifierEffects1() {\n            state1.orderedModifiers.forEach(function(_ref1) {\n                var name1 = _ref1.name, _ref$options1 = _ref1.options, options1 = _ref$options1 === void 0 ? {} : _ref$options1, effect1 = _ref1.effect;\n                if (typeof effect1 === \"function\") {\n                    var cleanupFn1 = effect1({\n                        state: state1,\n                        name: name1,\n                        instance: instance1,\n                        options: options1\n                    });\n                    var noopFn1 = function noopFn1() {};\n                    effectCleanupFns1.push(cleanupFn1 || noopFn1);\n                }\n            });\n        }\n        function cleanupModifierEffects1() {\n            effectCleanupFns1.forEach(function(fn1) {\n                return fn1();\n            });\n            effectCleanupFns1 = [];\n        }\n        return instance1;\n    };\n}\nvar defaultModifiers = [\n    eventListeners,\n    popperOffsets$1,\n    computeStyles$1,\n    applyStyles$1,\n    offset$1,\n    flip$1,\n    preventOverflow$1,\n    arrow$1,\n    hide$1\n];\nvar createPopper = /*#__PURE__*/ popperGenerator({\n    defaultModifiers: defaultModifiers\n}); // eslint-disable-next-line import/no-unused-modules\n/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */ var hasElementType = typeof Element !== \"undefined\";\nvar hasMap = typeof Map === \"function\";\nvar hasSet = typeof Set === \"function\";\nvar hasArrayBuffer = typeof ArrayBuffer === \"function\" && !!ArrayBuffer.isView;\n// Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js\nfunction equal(a1, b1) {\n    // START: fast-deep-equal es6/index.js 3.1.3\n    if (a1 === b1) return true;\n    if (a1 && b1 && typeof a1 == \"object\" && typeof b1 == \"object\") {\n        if (a1.constructor !== b1.constructor) return false;\n        var length1, i1, keys1;\n        if (Array.isArray(a1)) {\n            length1 = a1.length;\n            if (length1 != b1.length) return false;\n            for(i1 = length1; i1-- !== 0;)if (!equal(a1[i1], b1[i1])) return false;\n            return true;\n        }\n        // START: Modifications:\n        // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code\n        //    to co-exist with es5.\n        // 2. Replace `for of` with es5 compliant iteration using `for`.\n        //    Basically, take:\n        //\n        //    ```js\n        //    for (i of a.entries())\n        //      if (!b.has(i[0])) return false;\n        //    ```\n        //\n        //    ... and convert to:\n        //\n        //    ```js\n        //    it = a.entries();\n        //    while (!(i = it.next()).done)\n        //      if (!b.has(i.value[0])) return false;\n        //    ```\n        //\n        //    **Note**: `i` access switches to `i.value`.\n        var it1;\n        if (hasMap && a1 instanceof Map && b1 instanceof Map) {\n            if (a1.size !== b1.size) return false;\n            it1 = a1.entries();\n            while(!(i1 = it1.next()).done)if (!b1.has(i1.value[0])) return false;\n            it1 = a1.entries();\n            while(!(i1 = it1.next()).done)if (!equal(i1.value[1], b1.get(i1.value[0]))) return false;\n            return true;\n        }\n        if (hasSet && a1 instanceof Set && b1 instanceof Set) {\n            if (a1.size !== b1.size) return false;\n            it1 = a1.entries();\n            while(!(i1 = it1.next()).done)if (!b1.has(i1.value[0])) return false;\n            return true;\n        }\n        // END: Modifications\n        if (hasArrayBuffer && ArrayBuffer.isView(a1) && ArrayBuffer.isView(b1)) {\n            length1 = a1.length;\n            if (length1 != b1.length) return false;\n            for(i1 = length1; i1-- !== 0;)if (a1[i1] !== b1[i1]) return false;\n            return true;\n        }\n        if (a1.constructor === RegExp) return a1.source === b1.source && a1.flags === b1.flags;\n        // START: Modifications:\n        // Apply guards for `Object.create(null)` handling. See:\n        // - https://github.com/FormidableLabs/react-fast-compare/issues/64\n        // - https://github.com/epoberezkin/fast-deep-equal/issues/49\n        if (a1.valueOf !== Object.prototype.valueOf && typeof a1.valueOf === \"function\" && typeof b1.valueOf === \"function\") return a1.valueOf() === b1.valueOf();\n        if (a1.toString !== Object.prototype.toString && typeof a1.toString === \"function\" && typeof b1.toString === \"function\") return a1.toString() === b1.toString();\n        // END: Modifications\n        keys1 = Object.keys(a1);\n        length1 = keys1.length;\n        if (length1 !== Object.keys(b1).length) return false;\n        for(i1 = length1; i1-- !== 0;)if (!Object.prototype.hasOwnProperty.call(b1, keys1[i1])) return false;\n        // END: fast-deep-equal\n        // START: react-fast-compare\n        // custom handling for DOM elements\n        if (hasElementType && a1 instanceof Element) return false;\n        // custom handling for React/Preact\n        for(i1 = length1; i1-- !== 0;){\n            if ((keys1[i1] === \"_owner\" || keys1[i1] === \"__v\" || keys1[i1] === \"__o\") && a1.$$typeof) {\n                continue;\n            }\n            // all other properties should be traversed as usual\n            if (!equal(a1[keys1[i1]], b1[keys1[i1]])) return false;\n        }\n        // END: react-fast-compare\n        // START: fast-deep-equal\n        return true;\n    }\n    return a1 !== a1 && b1 !== b1;\n}\n// end fast-deep-equal\nvar reactFastCompare = function isEqual1(a1, b1) {\n    try {\n        return equal(a1, b1);\n    } catch (error1) {\n        if ((error1.message || \"\").match(/stack|recursion/i)) {\n            // warn on circular references, don't crash\n            // browsers give this different errors name and messages:\n            // chrome/safari: \"RangeError\", \"Maximum call stack size exceeded\"\n            // firefox: \"InternalError\", too much recursion\"\n            // edge: \"Error\", \"Out of stack space\"\n            console.warn(\"react-fast-compare cannot handle circular refs\");\n            return false;\n        }\n        // some other error. we should definitely know about these\n        throw error1;\n    }\n};\nvar isEqual = /*@__PURE__*/ getDefaultExportFromCjs(reactFastCompare);\nvar EMPTY_MODIFIERS$1 = [];\nvar usePopper = function usePopper1(referenceElement1, popperElement1, options1) {\n    if (options1 === void 0) {\n        options1 = {};\n    }\n    var prevOptions1 = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    var optionsWithDefaults1 = {\n        onFirstUpdate: options1.onFirstUpdate,\n        placement: options1.placement || \"bottom\",\n        strategy: options1.strategy || \"absolute\",\n        modifiers: options1.modifiers || EMPTY_MODIFIERS$1\n    };\n    var _React$useState1 = react__WEBPACK_IMPORTED_MODULE_1__.useState({\n        styles: {\n            popper: {\n                position: optionsWithDefaults1.strategy,\n                left: \"0\",\n                top: \"0\"\n            },\n            arrow: {\n                position: \"absolute\"\n            }\n        },\n        attributes: {}\n    }), state1 = _React$useState1[0], setState1 = _React$useState1[1];\n    var updateStateModifier1 = react__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n        return {\n            name: \"updateState\",\n            enabled: true,\n            phase: \"write\",\n            fn: function fn1(_ref1) {\n                var state1 = _ref1.state;\n                var elements1 = Object.keys(state1.elements);\n                react_dom__WEBPACK_IMPORTED_MODULE_2__.flushSync(function() {\n                    setState1({\n                        styles: fromEntries(elements1.map(function(element1) {\n                            return [\n                                element1,\n                                state1.styles[element1] || {}\n                            ];\n                        })),\n                        attributes: fromEntries(elements1.map(function(element1) {\n                            return [\n                                element1,\n                                state1.attributes[element1]\n                            ];\n                        }))\n                    });\n                });\n            },\n            requires: [\n                \"computeStyles\"\n            ]\n        };\n    }, []);\n    var popperOptions1 = react__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n        var newOptions1 = {\n            onFirstUpdate: optionsWithDefaults1.onFirstUpdate,\n            placement: optionsWithDefaults1.placement,\n            strategy: optionsWithDefaults1.strategy,\n            modifiers: [].concat(optionsWithDefaults1.modifiers, [\n                updateStateModifier1,\n                {\n                    name: \"applyStyles\",\n                    enabled: false\n                }\n            ])\n        };\n        if (isEqual(prevOptions1.current, newOptions1)) {\n            return prevOptions1.current || newOptions1;\n        } else {\n            prevOptions1.current = newOptions1;\n            return newOptions1;\n        }\n    }, [\n        optionsWithDefaults1.onFirstUpdate,\n        optionsWithDefaults1.placement,\n        optionsWithDefaults1.strategy,\n        optionsWithDefaults1.modifiers,\n        updateStateModifier1\n    ]);\n    var popperInstanceRef1 = react__WEBPACK_IMPORTED_MODULE_1__.useRef();\n    useIsomorphicLayoutEffect(function() {\n        if (popperInstanceRef1.current) {\n            popperInstanceRef1.current.setOptions(popperOptions1);\n        }\n    }, [\n        popperOptions1\n    ]);\n    useIsomorphicLayoutEffect(function() {\n        if (referenceElement1 == null || popperElement1 == null) {\n            return;\n        }\n        var createPopper$11 = options1.createPopper || createPopper;\n        var popperInstance1 = createPopper$11(referenceElement1, popperElement1, popperOptions1);\n        popperInstanceRef1.current = popperInstance1;\n        return function() {\n            popperInstance1.destroy();\n            popperInstanceRef1.current = null;\n        };\n    }, [\n        referenceElement1,\n        popperElement1,\n        options1.createPopper\n    ]);\n    return {\n        state: popperInstanceRef1.current ? popperInstanceRef1.current.state : null,\n        styles: state1.styles,\n        attributes: state1.attributes,\n        update: popperInstanceRef1.current ? popperInstanceRef1.current.update : null,\n        forceUpdate: popperInstanceRef1.current ? popperInstanceRef1.current.forceUpdate : null\n    };\n};\nvar NOOP = function NOOP1() {\n    return void 0;\n};\nvar NOOP_PROMISE = function NOOP_PROMISE1() {\n    return Promise.resolve(null);\n};\nvar EMPTY_MODIFIERS = [];\nfunction Popper(_ref1) {\n    var _ref$placement1 = _ref1.placement, placement1 = _ref$placement1 === void 0 ? \"bottom\" : _ref$placement1, _ref$strategy1 = _ref1.strategy, strategy1 = _ref$strategy1 === void 0 ? \"absolute\" : _ref$strategy1, _ref$modifiers1 = _ref1.modifiers, modifiers1 = _ref$modifiers1 === void 0 ? EMPTY_MODIFIERS : _ref$modifiers1, referenceElement1 = _ref1.referenceElement, onFirstUpdate1 = _ref1.onFirstUpdate, innerRef1 = _ref1.innerRef, children1 = _ref1.children;\n    var referenceNode1 = react__WEBPACK_IMPORTED_MODULE_1__.useContext(ManagerReferenceNodeContext);\n    var _React$useState1 = react__WEBPACK_IMPORTED_MODULE_1__.useState(null), popperElement1 = _React$useState1[0], setPopperElement1 = _React$useState1[1];\n    var _React$useState21 = react__WEBPACK_IMPORTED_MODULE_1__.useState(null), arrowElement1 = _React$useState21[0], setArrowElement1 = _React$useState21[1];\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        setRef(innerRef1, popperElement1);\n    }, [\n        innerRef1,\n        popperElement1\n    ]);\n    var options1 = react__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n        return {\n            placement: placement1,\n            strategy: strategy1,\n            onFirstUpdate: onFirstUpdate1,\n            modifiers: [].concat(modifiers1, [\n                {\n                    name: \"arrow\",\n                    enabled: arrowElement1 != null,\n                    options: {\n                        element: arrowElement1\n                    }\n                }\n            ])\n        };\n    }, [\n        placement1,\n        strategy1,\n        onFirstUpdate1,\n        modifiers1,\n        arrowElement1\n    ]);\n    var _usePopper1 = usePopper(referenceElement1 || referenceNode1, popperElement1, options1), state1 = _usePopper1.state, styles1 = _usePopper1.styles, forceUpdate1 = _usePopper1.forceUpdate, update1 = _usePopper1.update;\n    var childrenProps1 = react__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n        return {\n            ref: setPopperElement1,\n            style: styles1.popper,\n            placement: state1 ? state1.placement : placement1,\n            hasPopperEscaped: state1 && state1.modifiersData.hide ? state1.modifiersData.hide.hasPopperEscaped : null,\n            isReferenceHidden: state1 && state1.modifiersData.hide ? state1.modifiersData.hide.isReferenceHidden : null,\n            arrowProps: {\n                style: styles1.arrow,\n                ref: setArrowElement1\n            },\n            forceUpdate: forceUpdate1 || NOOP,\n            update: update1 || NOOP_PROMISE\n        };\n    }, [\n        setPopperElement1,\n        setArrowElement1,\n        placement1,\n        state1,\n        styles1,\n        update1,\n        forceUpdate1\n    ]);\n    return unwrapArray(children1)(childrenProps1);\n}\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ /**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */ var __DEV__ = \"development\" !== \"production\";\nvar warning = function() {};\nif (__DEV__) {\n    var printWarning = function printWarning1(format1, args1) {\n        var len1 = arguments.length;\n        args1 = new Array(len1 > 1 ? len1 - 1 : 0);\n        for(var key1 = 1; key1 < len1; key1++){\n            args1[key1 - 1] = arguments[key1];\n        }\n        var argIndex1 = 0;\n        var message1 = \"Warning: \" + format1.replace(/%s/g, function() {\n            return args1[argIndex1++];\n        });\n        if (typeof console !== \"undefined\") {\n            console.error(message1);\n        }\n        try {\n            // --- Welcome to debugging React ---\n            // This error was thrown as a convenience so that you can use this stack\n            // to find the callsite that caused this warning to fire.\n            throw new Error(message1);\n        } catch (x1) {}\n    };\n    warning = function(condition1, format1, args1) {\n        var len1 = arguments.length;\n        args1 = new Array(len1 > 2 ? len1 - 2 : 0);\n        for(var key1 = 2; key1 < len1; key1++){\n            args1[key1 - 2] = arguments[key1];\n        }\n        if (format1 === undefined) {\n            throw new Error(\"`warning(condition, format, ...args)` requires a warning \" + \"message argument\");\n        }\n        if (!condition1) {\n            printWarning.apply(null, [\n                format1\n            ].concat(args1));\n        }\n    };\n}\nvar warning_1 = warning;\nvar warning$1 = /*@__PURE__*/ getDefaultExportFromCjs(warning_1);\nfunction Reference(_ref1) {\n    var children1 = _ref1.children, innerRef1 = _ref1.innerRef;\n    var setReferenceNode1 = react__WEBPACK_IMPORTED_MODULE_1__.useContext(ManagerReferenceNodeSetterContext);\n    var refHandler1 = react__WEBPACK_IMPORTED_MODULE_1__.useCallback(function(node1) {\n        setRef(innerRef1, node1);\n        safeInvoke(setReferenceNode1, node1);\n    }, [\n        innerRef1,\n        setReferenceNode1\n    ]); // ran on unmount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        return function() {\n            return setRef(innerRef1, null);\n        };\n    }, []);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        warning$1(Boolean(setReferenceNode1), \"`Reference` should not be used outside of a `Manager` component.\");\n    }, [\n        setReferenceNode1\n    ]);\n    return unwrapArray(children1)({\n        ref: refHandler1\n    });\n}\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Object} values - an object with options\n * @param {Number} [values.year] - the number of years to be set\n * @param {Number} [values.month] - the number of months to be set\n * @param {Number} [values.date] - the number of days to be set\n * @param {Number} [values.hours] - the number of hours to be set\n * @param {Number} [values.minutes] - the number of minutes to be set\n * @param {Number} [values.seconds] - the number of seconds to be set\n * @param {Number} [values.milliseconds] - the number of milliseconds to be set\n * @returns {Date} the new date with options set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `values` must be an object\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */ function set(dirtyDate1, values1) {\n    requiredArgs(2, arguments);\n    if (_typeof(values1) !== \"object\" || values1 === null) {\n        throw new RangeError(\"values parameter must be an object\");\n    }\n    var date1 = toDate(dirtyDate1);\n    // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n    if (isNaN(date1.getTime())) {\n        return new Date(NaN);\n    }\n    if (values1.year != null) {\n        date1.setFullYear(values1.year);\n    }\n    if (values1.month != null) {\n        date1 = setMonth(date1, values1.month);\n    }\n    if (values1.date != null) {\n        date1.setDate(toInteger(values1.date));\n    }\n    if (values1.hours != null) {\n        date1.setHours(toInteger(values1.hours));\n    }\n    if (values1.minutes != null) {\n        date1.setMinutes(toInteger(values1.minutes));\n    }\n    if (values1.seconds != null) {\n        date1.setSeconds(toInteger(values1.seconds));\n    }\n    if (values1.milliseconds != null) {\n        date1.setMilliseconds(toInteger(values1.milliseconds));\n    }\n    return date1;\n}\nfunction le(e1, t1) {\n    var r1 = Object.keys(e1);\n    if (Object.getOwnPropertySymbols) {\n        var n1 = Object.getOwnPropertySymbols(e1);\n        t1 && (n1 = n1.filter(function(t1) {\n            return Object.getOwnPropertyDescriptor(e1, t1).enumerable;\n        })), r1.push.apply(r1, n1);\n    }\n    return r1;\n}\nfunction de(e1) {\n    for(var t1 = 1; t1 < arguments.length; t1++){\n        var r1 = null != arguments[t1] ? arguments[t1] : {};\n        t1 % 2 ? le(Object(r1), true).forEach(function(t1) {\n            ye(e1, t1, r1[t1]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e1, Object.getOwnPropertyDescriptors(r1)) : le(Object(r1)).forEach(function(t1) {\n            Object.defineProperty(e1, t1, Object.getOwnPropertyDescriptor(r1, t1));\n        });\n    }\n    return e1;\n}\nfunction ue(e1) {\n    return ue = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(e1) {\n        return typeof e1;\n    } : function(e1) {\n        return e1 && \"function\" == typeof Symbol && e1.constructor === Symbol && e1 !== Symbol.prototype ? \"symbol\" : typeof e1;\n    }, ue(e1);\n}\nfunction he(e1, t1) {\n    if (!(e1 instanceof t1)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction me(e1, t1) {\n    for(var r1 = 0; r1 < t1.length; r1++){\n        var n1 = t1[r1];\n        n1.enumerable = n1.enumerable || false, n1.configurable = true, \"value\" in n1 && (n1.writable = true), Object.defineProperty(e1, _e(n1.key), n1);\n    }\n}\nfunction fe(e1, t1, r1) {\n    return t1 && me(e1.prototype, t1), r1 && me(e1, r1), Object.defineProperty(e1, \"prototype\", {\n        writable: false\n    }), e1;\n}\nfunction ye(e1, t1, r1) {\n    return (t1 = _e(t1)) in e1 ? Object.defineProperty(e1, t1, {\n        value: r1,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    }) : e1[t1] = r1, e1;\n}\nfunction ve() {\n    return ve = Object.assign ? Object.assign.bind() : function(e1) {\n        for(var t1 = 1; t1 < arguments.length; t1++){\n            var r1 = arguments[t1];\n            for(var n1 in r1)Object.prototype.hasOwnProperty.call(r1, n1) && (e1[n1] = r1[n1]);\n        }\n        return e1;\n    }, ve.apply(this, arguments);\n}\nfunction De(e1, t1) {\n    if (\"function\" != typeof t1 && null !== t1) throw new TypeError(\"Super expression must either be null or a function\");\n    e1.prototype = Object.create(t1 && t1.prototype, {\n        constructor: {\n            value: e1,\n            writable: true,\n            configurable: true\n        }\n    }), Object.defineProperty(e1, \"prototype\", {\n        writable: false\n    }), t1 && ke(e1, t1);\n}\nfunction ge(e1) {\n    return ge = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e1) {\n        return e1.__proto__ || Object.getPrototypeOf(e1);\n    }, ge(e1);\n}\nfunction ke(e1, t1) {\n    return ke = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e1, t1) {\n        return e1.__proto__ = t1, e1;\n    }, ke(e1, t1);\n}\nfunction we(e1) {\n    if (void 0 === e1) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return e1;\n}\nfunction be(e1) {\n    var t1 = function() {\n        if (\"undefined\" == typeof Reflect || !Reflect.construct) return false;\n        if (Reflect.construct.sham) return false;\n        if (\"function\" == typeof Proxy) return true;\n        try {\n            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {})), !0;\n        } catch (e1) {\n            return false;\n        }\n    }();\n    return function() {\n        var r1, n1 = ge(e1);\n        if (t1) {\n            var o1 = ge(this).constructor;\n            r1 = Reflect.construct(n1, arguments, o1);\n        } else r1 = n1.apply(this, arguments);\n        return function(e1, t1) {\n            if (t1 && (\"object\" == typeof t1 || \"function\" == typeof t1)) return t1;\n            if (void 0 !== t1) throw new TypeError(\"Derived constructors may only return object or undefined\");\n            return we(e1);\n        }(this, r1);\n    };\n}\nfunction Se(e1) {\n    return function(e1) {\n        if (Array.isArray(e1)) return Ce(e1);\n    }(e1) || function(e1) {\n        if (\"undefined\" != typeof Symbol && null != e1[Symbol.iterator] || null != e1[\"@@iterator\"]) return Array.from(e1);\n    }(e1) || function(e1, t1) {\n        if (!e1) return;\n        if (\"string\" == typeof e1) return Ce(e1, t1);\n        var r1 = Object.prototype.toString.call(e1).slice(8, -1);\n        \"Object\" === r1 && e1.constructor && (r1 = e1.constructor.name);\n        if (\"Map\" === r1 || \"Set\" === r1) return Array.from(e1);\n        if (\"Arguments\" === r1 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r1)) return Ce(e1, t1);\n    }(e1) || function() {\n        throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }();\n}\nfunction Ce(e1, t1) {\n    (null == t1 || t1 > e1.length) && (t1 = e1.length);\n    for(var r1 = 0, n1 = new Array(t1); r1 < t1; r1++)n1[r1] = e1[r1];\n    return n1;\n}\nfunction _e(e1) {\n    var t1 = function(e1, t1) {\n        if (\"object\" != typeof e1 || null === e1) return e1;\n        var r1 = e1[Symbol.toPrimitive];\n        if (void 0 !== r1) {\n            var n1 = r1.call(e1, t1);\n            if (\"object\" != typeof n1) return n1;\n            throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n        }\n        return (\"string\" === t1 ? String : Number)(e1);\n    }(e1, \"string\");\n    return \"symbol\" == typeof t1 ? t1 : String(t1);\n}\nvar Me = function(e1, t1) {\n    switch(e1){\n        case \"P\":\n            return t1.date({\n                width: \"short\"\n            });\n        case \"PP\":\n            return t1.date({\n                width: \"medium\"\n            });\n        case \"PPP\":\n            return t1.date({\n                width: \"long\"\n            });\n        default:\n            return t1.date({\n                width: \"full\"\n            });\n    }\n}, Pe = function(e1, t1) {\n    switch(e1){\n        case \"p\":\n            return t1.time({\n                width: \"short\"\n            });\n        case \"pp\":\n            return t1.time({\n                width: \"medium\"\n            });\n        case \"ppp\":\n            return t1.time({\n                width: \"long\"\n            });\n        default:\n            return t1.time({\n                width: \"full\"\n            });\n    }\n}, Ee = {\n    p: Pe,\n    P: function(e1, t1) {\n        var r1, n1 = e1.match(/(P+)(p+)?/) || [], o1 = n1[1], a1 = n1[2];\n        if (!a1) return Me(e1, t1);\n        switch(o1){\n            case \"P\":\n                r1 = t1.dateTime({\n                    width: \"short\"\n                });\n                break;\n            case \"PP\":\n                r1 = t1.dateTime({\n                    width: \"medium\"\n                });\n                break;\n            case \"PPP\":\n                r1 = t1.dateTime({\n                    width: \"long\"\n                });\n                break;\n            default:\n                r1 = t1.dateTime({\n                    width: \"full\"\n                });\n        }\n        return r1.replace(\"{{date}}\", Me(o1, t1)).replace(\"{{time}}\", Pe(a1, t1));\n    }\n}, Ne = 12, xe = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nfunction Ye(e1) {\n    var t1 = e1 ? \"string\" == typeof e1 || e1 instanceof String ? parseISO(e1) : toDate(e1) : new Date;\n    return Te(t1) ? t1 : null;\n}\nfunction Te(e1, t1) {\n    return t1 = t1 || new Date(\"1/1/1000\"), isValid(e1) && !isBefore(e1, t1);\n}\nfunction Ie(e1, t1, r1) {\n    if (\"en\" === r1) return format(e1, t1, {\n        awareOfUnicodeTokens: true\n    });\n    var n1 = Ge(r1);\n    return r1 && !n1 && console.warn('A locale object was not found for the provided string [\"'.concat(r1, '\"].')), !n1 && $e() && Ge($e()) && (n1 = Ge($e())), format(e1, t1, {\n        locale: n1 || null,\n        awareOfUnicodeTokens: true\n    });\n}\nfunction Oe(e1, t1) {\n    var r1 = t1.dateFormat, n1 = t1.locale;\n    return e1 && Ie(e1, Array.isArray(r1) ? r1[0] : r1, n1) || \"\";\n}\nfunction Re(e1, t1) {\n    var r1 = t1.hour, n1 = void 0 === r1 ? 0 : r1, o1 = t1.minute, a1 = void 0 === o1 ? 0 : o1, s1 = t1.second;\n    return setHours(setMinutes(setSeconds(e1, void 0 === s1 ? 0 : s1), a1), n1);\n}\nfunction Le(e1, t1, r1) {\n    var n1 = Ge(t1 || $e());\n    return startOfWeek(e1, {\n        locale: n1,\n        weekStartsOn: r1\n    });\n}\nfunction Fe(e1) {\n    return startOfMonth(e1);\n}\nfunction Ae(e1) {\n    return startOfYear(e1);\n}\nfunction We(e1) {\n    return startOfQuarter(e1);\n}\nfunction Ke() {\n    return startOfDay(Ye());\n}\nfunction Be(e1, t1) {\n    return e1 && t1 ? isSameYear(e1, t1) : !e1 && !t1;\n}\nfunction Qe(e1, t1) {\n    return e1 && t1 ? isSameMonth(e1, t1) : !e1 && !t1;\n}\nfunction He(e1, t1) {\n    return e1 && t1 ? isSameQuarter(e1, t1) : !e1 && !t1;\n}\nfunction je(e1, t1) {\n    return e1 && t1 ? isSameDay(e1, t1) : !e1 && !t1;\n}\nfunction Ve(e1, t1) {\n    return e1 && t1 ? isEqual$1(e1, t1) : !e1 && !t1;\n}\nfunction qe(e1, t1, r1) {\n    var n1, o1 = startOfDay(t1), a1 = endOfDay(r1);\n    try {\n        n1 = isWithinInterval(e1, {\n            start: o1,\n            end: a1\n        });\n    } catch (e1) {\n        n1 = false;\n    }\n    return n1;\n}\nfunction $e() {\n    return ( false ? 0 : globalThis).__localeId__;\n}\nfunction Ge(e1) {\n    if (\"string\" == typeof e1) {\n        var t1 =  false ? 0 : globalThis;\n        return t1.__localeData__ ? t1.__localeData__[e1] : null;\n    }\n    return e1;\n}\nfunction Je(e1, t1) {\n    return Ie(setMonth(Ye(), e1), \"LLLL\", t1);\n}\nfunction Xe(e1, t1) {\n    return Ie(setMonth(Ye(), e1), \"LLL\", t1);\n}\nfunction Ze(e1) {\n    var t1 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r1 = t1.minDate, n1 = t1.maxDate, o1 = t1.excludeDates, a1 = t1.excludeDateIntervals, s1 = t1.includeDates, i1 = t1.includeDateIntervals, p1 = t1.filterDate;\n    return it(e1, {\n        minDate: r1,\n        maxDate: n1\n    }) || o1 && o1.some(function(t1) {\n        return je(e1, t1);\n    }) || a1 && a1.some(function(t1) {\n        var r1 = t1.start, n1 = t1.end;\n        return isWithinInterval(e1, {\n            start: r1,\n            end: n1\n        });\n    }) || s1 && !s1.some(function(t1) {\n        return je(e1, t1);\n    }) || i1 && !i1.some(function(t1) {\n        var r1 = t1.start, n1 = t1.end;\n        return isWithinInterval(e1, {\n            start: r1,\n            end: n1\n        });\n    }) || p1 && !p1(Ye(e1)) || false;\n}\nfunction et(e1) {\n    var t1 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r1 = t1.excludeDates, n1 = t1.excludeDateIntervals;\n    return n1 && n1.length > 0 ? n1.some(function(t1) {\n        var r1 = t1.start, n1 = t1.end;\n        return isWithinInterval(e1, {\n            start: r1,\n            end: n1\n        });\n    }) : r1 && r1.some(function(t1) {\n        return je(e1, t1);\n    }) || false;\n}\nfunction tt(e1) {\n    var t1 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r1 = t1.minDate, n1 = t1.maxDate, o1 = t1.excludeDates, a1 = t1.includeDates, s1 = t1.filterDate;\n    return it(e1, {\n        minDate: startOfMonth(r1),\n        maxDate: endOfMonth(n1)\n    }) || o1 && o1.some(function(t1) {\n        return Qe(e1, t1);\n    }) || a1 && !a1.some(function(t1) {\n        return Qe(e1, t1);\n    }) || s1 && !s1(Ye(e1)) || false;\n}\nfunction rt(e1, t1, r1, n1) {\n    var o1 = getYear(e1), a1 = getMonth(e1), s1 = getYear(t1), i1 = getMonth(t1), p1 = getYear(n1);\n    return o1 === s1 && o1 === p1 ? a1 <= r1 && r1 <= i1 : o1 < s1 ? p1 === o1 && a1 <= r1 || p1 === s1 && i1 >= r1 || p1 < s1 && p1 > o1 : void 0;\n}\nfunction nt(e1) {\n    var t1 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r1 = t1.minDate, n1 = t1.maxDate, o1 = t1.excludeDates, a1 = t1.includeDates, s1 = t1.filterDate;\n    return it(e1, {\n        minDate: r1,\n        maxDate: n1\n    }) || o1 && o1.some(function(t1) {\n        return He(e1, t1);\n    }) || a1 && !a1.some(function(t1) {\n        return He(e1, t1);\n    }) || s1 && !s1(Ye(e1)) || false;\n}\nfunction ot(e1, t1, r1) {\n    if (!isValid(t1) || !isValid(r1)) return false;\n    var n1 = getYear(t1), a1 = getYear(r1);\n    return n1 <= e1 && a1 >= e1;\n}\nfunction at(e1) {\n    var t1 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r1 = t1.minDate, n1 = t1.maxDate, o1 = t1.excludeDates, a1 = t1.includeDates, s1 = t1.filterDate, i1 = new Date(e1, 0, 1);\n    return it(i1, {\n        minDate: startOfYear(r1),\n        maxDate: endOfYear(n1)\n    }) || o1 && o1.some(function(e1) {\n        return Be(i1, e1);\n    }) || a1 && !a1.some(function(e1) {\n        return Be(i1, e1);\n    }) || s1 && !s1(Ye(i1)) || false;\n}\nfunction st(e1, t1, r1, n1) {\n    var o1 = getYear(e1), a1 = getQuarter(e1), s1 = getYear(t1), i1 = getQuarter(t1), p1 = getYear(n1);\n    return o1 === s1 && o1 === p1 ? a1 <= r1 && r1 <= i1 : o1 < s1 ? p1 === o1 && a1 <= r1 || p1 === s1 && i1 >= r1 || p1 < s1 && p1 > o1 : void 0;\n}\nfunction it(e1) {\n    var t1 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r1 = t1.minDate, n1 = t1.maxDate;\n    return r1 && differenceInCalendarDays(e1, r1) < 0 || n1 && differenceInCalendarDays(e1, n1) > 0;\n}\nfunction pt(e1, t1) {\n    return t1.some(function(t1) {\n        return getHours(t1) === getHours(e1) && getMinutes(t1) === getMinutes(e1);\n    });\n}\nfunction ct(e1) {\n    var t1 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r1 = t1.excludeTimes, n1 = t1.includeTimes, o1 = t1.filterTime;\n    return r1 && pt(e1, r1) || n1 && !pt(e1, n1) || o1 && !o1(e1) || false;\n}\nfunction lt(e1, t1) {\n    var r1 = t1.minTime, n1 = t1.maxTime;\n    if (!r1 || !n1) throw new Error(\"Both minTime and maxTime props required\");\n    var o1, a1 = Ye(), s1 = setHours(setMinutes(a1, getMinutes(e1)), getHours(e1)), i1 = setHours(setMinutes(a1, getMinutes(r1)), getHours(r1)), p1 = setHours(setMinutes(a1, getMinutes(n1)), getHours(n1));\n    try {\n        o1 = !isWithinInterval(s1, {\n            start: i1,\n            end: p1\n        });\n    } catch (e1) {\n        o1 = false;\n    }\n    return o1;\n}\nfunction dt(e1) {\n    var t1 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r1 = t1.minDate, n1 = t1.includeDates, o1 = subMonths(e1, 1);\n    return r1 && differenceInCalendarMonths(r1, o1) > 0 || n1 && n1.every(function(e1) {\n        return differenceInCalendarMonths(e1, o1) > 0;\n    }) || false;\n}\nfunction ut(e1) {\n    var t1 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r1 = t1.maxDate, n1 = t1.includeDates, o1 = addMonths(e1, 1);\n    return r1 && differenceInCalendarMonths(o1, r1) > 0 || n1 && n1.every(function(e1) {\n        return differenceInCalendarMonths(o1, e1) > 0;\n    }) || false;\n}\nfunction ht(e1) {\n    var t1 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r1 = t1.minDate, n1 = t1.includeDates, o1 = subYears(e1, 1);\n    return r1 && differenceInCalendarYears(r1, o1) > 0 || n1 && n1.every(function(e1) {\n        return differenceInCalendarYears(e1, o1) > 0;\n    }) || false;\n}\nfunction mt(e1) {\n    var t1 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r1 = t1.maxDate, n1 = t1.includeDates, o1 = addYears(e1, 1);\n    return r1 && differenceInCalendarYears(o1, r1) > 0 || n1 && n1.every(function(e1) {\n        return differenceInCalendarYears(o1, e1) > 0;\n    }) || false;\n}\nfunction ft(e1) {\n    var t1 = e1.minDate, r1 = e1.includeDates;\n    if (r1 && t1) {\n        var n1 = r1.filter(function(e1) {\n            return differenceInCalendarDays(e1, t1) >= 0;\n        });\n        return min$1(n1);\n    }\n    return r1 ? min$1(r1) : t1;\n}\nfunction yt(e1) {\n    var t1 = e1.maxDate, r1 = e1.includeDates;\n    if (r1 && t1) {\n        var n1 = r1.filter(function(e1) {\n            return differenceInCalendarDays(e1, t1) <= 0;\n        });\n        return max$1(n1);\n    }\n    return r1 ? max$1(r1) : t1;\n}\nfunction vt() {\n    for(var e1 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], t1 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"react-datepicker__day--highlighted\", r1 = new Map, o1 = 0, a1 = e1.length; o1 < a1; o1++){\n        var s1 = e1[o1];\n        if (isDate(s1)) {\n            var i1 = Ie(s1, \"MM.dd.yyyy\"), p1 = r1.get(i1) || [];\n            p1.includes(t1) || (p1.push(t1), r1.set(i1, p1));\n        } else if (\"object\" === ue(s1)) {\n            var c1 = Object.keys(s1), l1 = c1[0], d1 = s1[c1[0]];\n            if (\"string\" == typeof l1 && d1.constructor === Array) for(var u1 = 0, h1 = d1.length; u1 < h1; u1++){\n                var m1 = Ie(d1[u1], \"MM.dd.yyyy\"), f1 = r1.get(m1) || [];\n                f1.includes(l1) || (f1.push(l1), r1.set(m1, f1));\n            }\n        }\n    }\n    return r1;\n}\nfunction Dt() {\n    var e1 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], t1 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"react-datepicker__day--holidays\", r1 = new Map;\n    return e1.forEach(function(e1) {\n        var o1 = e1.date, a1 = e1.holidayName;\n        if (isDate(o1)) {\n            var s1 = Ie(o1, \"MM.dd.yyyy\"), i1 = r1.get(s1) || {};\n            if (!(\"className\" in i1) || i1.className !== t1 || (p1 = i1.holidayNames, c1 = [\n                a1\n            ], p1.length !== c1.length || !p1.every(function(e1, t1) {\n                return e1 === c1[t1];\n            }))) {\n                var p1, c1;\n                i1.className = t1;\n                var l1 = i1.holidayNames;\n                i1.holidayNames = l1 ? [].concat(Se(l1), [\n                    a1\n                ]) : [\n                    a1\n                ], r1.set(s1, i1);\n            }\n        }\n    }), r1;\n}\nfunction gt(e1, t1, r1, n1, o1) {\n    for(var a1 = o1.length, p1 = [], c1 = 0; c1 < a1; c1++){\n        var l1 = addMinutes(addHours(e1, getHours(o1[c1])), getMinutes(o1[c1])), d1 = addMinutes(e1, (r1 + 1) * n1);\n        isAfter(l1, t1) && isBefore(l1, d1) && p1.push(o1[c1]);\n    }\n    return p1;\n}\nfunction kt(e1) {\n    return e1 < 10 ? \"0\".concat(e1) : \"\".concat(e1);\n}\nfunction wt(e1) {\n    var t1 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Ne, r1 = Math.ceil(getYear(e1) / t1) * t1;\n    return {\n        startPeriod: r1 - (t1 - 1),\n        endPeriod: r1\n    };\n}\nfunction bt(e1) {\n    var t1 = e1.getSeconds(), r1 = e1.getMilliseconds();\n    return toDate(e1.getTime() - 1e3 * t1 - r1);\n}\nfunction St(e1, t1, r1, n1) {\n    for(var o1 = [], a1 = 0; a1 < 2 * t1 + 1; a1++){\n        var s1 = e1 + t1 - a1, i1 = true;\n        r1 && (i1 = getYear(r1) <= s1), n1 && i1 && (i1 = getYear(n1) >= s1), i1 && o1.push(s1);\n    }\n    return o1;\n}\nvar Ct = onClickOutsideHOC(function(n1) {\n    De(a1, (react__WEBPACK_IMPORTED_MODULE_1___default().Component));\n    var o1 = be(a1);\n    function a1(r1) {\n        var n1;\n        he(this, a1), ye(we(n1 = o1.call(this, r1)), \"renderOptions\", function() {\n            var t1 = n1.props.year, r1 = n1.state.yearsList.map(function(r1) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: t1 === r1 ? \"react-datepicker__year-option react-datepicker__year-option--selected_year\" : \"react-datepicker__year-option\",\n                    key: r1,\n                    onClick: n1.onChange.bind(we(n1), r1),\n                    \"aria-selected\": t1 === r1 ? \"true\" : void 0\n                }, t1 === r1 ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                    className: \"react-datepicker__year-option--selected\"\n                }, \"✓\") : \"\", r1);\n            }), o1 = n1.props.minDate ? getYear(n1.props.minDate) : null, a1 = n1.props.maxDate ? getYear(n1.props.maxDate) : null;\n            return a1 && n1.state.yearsList.find(function(e1) {\n                return e1 === a1;\n            }) || r1.unshift(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"react-datepicker__year-option\",\n                key: \"upcoming\",\n                onClick: n1.incrementYears\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"a\", {\n                className: \"react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-upcoming\"\n            }))), o1 && n1.state.yearsList.find(function(e1) {\n                return e1 === o1;\n            }) || r1.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"react-datepicker__year-option\",\n                key: \"previous\",\n                onClick: n1.decrementYears\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"a\", {\n                className: \"react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-previous\"\n            }))), r1;\n        }), ye(we(n1), \"onChange\", function(e1) {\n            n1.props.onChange(e1);\n        }), ye(we(n1), \"handleClickOutside\", function() {\n            n1.props.onCancel();\n        }), ye(we(n1), \"shiftYears\", function(e1) {\n            var t1 = n1.state.yearsList.map(function(t1) {\n                return t1 + e1;\n            });\n            n1.setState({\n                yearsList: t1\n            });\n        }), ye(we(n1), \"incrementYears\", function() {\n            return n1.shiftYears(1);\n        }), ye(we(n1), \"decrementYears\", function() {\n            return n1.shiftYears(-1);\n        });\n        var s1 = r1.yearDropdownItemNumber, i1 = r1.scrollableYearDropdown, p1 = s1 || (i1 ? 10 : 5);\n        return n1.state = {\n            yearsList: St(n1.props.year, p1, n1.props.minDate, n1.props.maxDate)\n        }, n1.dropdownRef = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createRef)(), n1;\n    }\n    return fe(a1, [\n        {\n            key: \"componentDidMount\",\n            value: function() {\n                var e1 = this.dropdownRef.current;\n                if (e1) {\n                    var t1 = e1.children ? Array.from(e1.children) : null, r1 = t1 ? t1.find(function(e1) {\n                        return e1.ariaSelected;\n                    }) : null;\n                    e1.scrollTop = r1 ? r1.offsetTop + (r1.clientHeight - e1.clientHeight) / 2 : (e1.scrollHeight - e1.clientHeight) / 2;\n                }\n            }\n        },\n        {\n            key: \"render\",\n            value: function() {\n                var t1 = r({\n                    \"react-datepicker__year-dropdown\": true,\n                    \"react-datepicker__year-dropdown--scrollable\": this.props.scrollableYearDropdown\n                });\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: t1,\n                    ref: this.dropdownRef\n                }, this.renderOptions());\n            }\n        }\n    ]), a1;\n}()), _t = function(t1) {\n    De(n1, (react__WEBPACK_IMPORTED_MODULE_1___default().Component));\n    var r1 = be(n1);\n    function n1() {\n        var t1;\n        he(this, n1);\n        for(var o1 = arguments.length, a1 = new Array(o1), s1 = 0; s1 < o1; s1++)a1[s1] = arguments[s1];\n        return ye(we(t1 = r1.call.apply(r1, [\n            this\n        ].concat(a1))), \"state\", {\n            dropdownVisible: false\n        }), ye(we(t1), \"renderSelectOptions\", function() {\n            for(var r1 = t1.props.minDate ? getYear(t1.props.minDate) : 1900, n1 = t1.props.maxDate ? getYear(t1.props.maxDate) : 2100, o1 = [], a1 = r1; a1 <= n1; a1++)o1.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"option\", {\n                key: a1,\n                value: a1\n            }, a1));\n            return o1;\n        }), ye(we(t1), \"onSelectChange\", function(e1) {\n            t1.onChange(e1.target.value);\n        }), ye(we(t1), \"renderSelectMode\", function() {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"select\", {\n                value: t1.props.year,\n                className: \"react-datepicker__year-select\",\n                onChange: t1.onSelectChange\n            }, t1.renderSelectOptions());\n        }), ye(we(t1), \"renderReadView\", function(r1) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                key: \"read\",\n                style: {\n                    visibility: r1 ? \"visible\" : \"hidden\"\n                },\n                className: \"react-datepicker__year-read-view\",\n                onClick: function(e1) {\n                    return t1.toggleDropdown(e1);\n                }\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                className: \"react-datepicker__year-read-view--down-arrow\"\n            }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                className: \"react-datepicker__year-read-view--selected-year\"\n            }, t1.props.year));\n        }), ye(we(t1), \"renderDropdown\", function() {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Ct, {\n                key: \"dropdown\",\n                year: t1.props.year,\n                onChange: t1.onChange,\n                onCancel: t1.toggleDropdown,\n                minDate: t1.props.minDate,\n                maxDate: t1.props.maxDate,\n                scrollableYearDropdown: t1.props.scrollableYearDropdown,\n                yearDropdownItemNumber: t1.props.yearDropdownItemNumber\n            });\n        }), ye(we(t1), \"renderScrollMode\", function() {\n            var e1 = t1.state.dropdownVisible, r1 = [\n                t1.renderReadView(!e1)\n            ];\n            return e1 && r1.unshift(t1.renderDropdown()), r1;\n        }), ye(we(t1), \"onChange\", function(e1) {\n            t1.toggleDropdown(), e1 !== t1.props.year && t1.props.onChange(e1);\n        }), ye(we(t1), \"toggleDropdown\", function(e1) {\n            t1.setState({\n                dropdownVisible: !t1.state.dropdownVisible\n            }, function() {\n                t1.props.adjustDateOnChange && t1.handleYearChange(t1.props.date, e1);\n            });\n        }), ye(we(t1), \"handleYearChange\", function(e1, r1) {\n            t1.onSelect(e1, r1), t1.setOpen();\n        }), ye(we(t1), \"onSelect\", function(e1, r1) {\n            t1.props.onSelect && t1.props.onSelect(e1, r1);\n        }), ye(we(t1), \"setOpen\", function() {\n            t1.props.setOpen && t1.props.setOpen(true);\n        }), t1;\n    }\n    return fe(n1, [\n        {\n            key: \"render\",\n            value: function() {\n                var t1;\n                switch(this.props.dropdownMode){\n                    case \"scroll\":\n                        t1 = this.renderScrollMode();\n                        break;\n                    case \"select\":\n                        t1 = this.renderSelectMode();\n                }\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker__year-dropdown-container react-datepicker__year-dropdown-container--\".concat(this.props.dropdownMode)\n                }, t1);\n            }\n        }\n    ]), n1;\n}(), Mt = onClickOutsideHOC(function(t1) {\n    De(n1, (react__WEBPACK_IMPORTED_MODULE_1___default().Component));\n    var r1 = be(n1);\n    function n1() {\n        var t1;\n        he(this, n1);\n        for(var o1 = arguments.length, a1 = new Array(o1), s1 = 0; s1 < o1; s1++)a1[s1] = arguments[s1];\n        return ye(we(t1 = r1.call.apply(r1, [\n            this\n        ].concat(a1))), \"isSelectedMonth\", function(e1) {\n            return t1.props.month === e1;\n        }), ye(we(t1), \"renderOptions\", function() {\n            return t1.props.monthNames.map(function(r1, n1) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: t1.isSelectedMonth(n1) ? \"react-datepicker__month-option react-datepicker__month-option--selected_month\" : \"react-datepicker__month-option\",\n                    key: r1,\n                    onClick: t1.onChange.bind(we(t1), n1),\n                    \"aria-selected\": t1.isSelectedMonth(n1) ? \"true\" : void 0\n                }, t1.isSelectedMonth(n1) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                    className: \"react-datepicker__month-option--selected\"\n                }, \"✓\") : \"\", r1);\n            });\n        }), ye(we(t1), \"onChange\", function(e1) {\n            return t1.props.onChange(e1);\n        }), ye(we(t1), \"handleClickOutside\", function() {\n            return t1.props.onCancel();\n        }), t1;\n    }\n    return fe(n1, [\n        {\n            key: \"render\",\n            value: function() {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker__month-dropdown\"\n                }, this.renderOptions());\n            }\n        }\n    ]), n1;\n}()), Pt = function(t1) {\n    De(n1, (react__WEBPACK_IMPORTED_MODULE_1___default().Component));\n    var r1 = be(n1);\n    function n1() {\n        var t1;\n        he(this, n1);\n        for(var o1 = arguments.length, a1 = new Array(o1), s1 = 0; s1 < o1; s1++)a1[s1] = arguments[s1];\n        return ye(we(t1 = r1.call.apply(r1, [\n            this\n        ].concat(a1))), \"state\", {\n            dropdownVisible: false\n        }), ye(we(t1), \"renderSelectOptions\", function(t1) {\n            return t1.map(function(t1, r1) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"option\", {\n                    key: r1,\n                    value: r1\n                }, t1);\n            });\n        }), ye(we(t1), \"renderSelectMode\", function(r1) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"select\", {\n                value: t1.props.month,\n                className: \"react-datepicker__month-select\",\n                onChange: function(e1) {\n                    return t1.onChange(e1.target.value);\n                }\n            }, t1.renderSelectOptions(r1));\n        }), ye(we(t1), \"renderReadView\", function(r1, n1) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                key: \"read\",\n                style: {\n                    visibility: r1 ? \"visible\" : \"hidden\"\n                },\n                className: \"react-datepicker__month-read-view\",\n                onClick: t1.toggleDropdown\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                className: \"react-datepicker__month-read-view--down-arrow\"\n            }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                className: \"react-datepicker__month-read-view--selected-month\"\n            }, n1[t1.props.month]));\n        }), ye(we(t1), \"renderDropdown\", function(r1) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Mt, {\n                key: \"dropdown\",\n                month: t1.props.month,\n                monthNames: r1,\n                onChange: t1.onChange,\n                onCancel: t1.toggleDropdown\n            });\n        }), ye(we(t1), \"renderScrollMode\", function(e1) {\n            var r1 = t1.state.dropdownVisible, n1 = [\n                t1.renderReadView(!r1, e1)\n            ];\n            return r1 && n1.unshift(t1.renderDropdown(e1)), n1;\n        }), ye(we(t1), \"onChange\", function(e1) {\n            t1.toggleDropdown(), e1 !== t1.props.month && t1.props.onChange(e1);\n        }), ye(we(t1), \"toggleDropdown\", function() {\n            return t1.setState({\n                dropdownVisible: !t1.state.dropdownVisible\n            });\n        }), t1;\n    }\n    return fe(n1, [\n        {\n            key: \"render\",\n            value: function() {\n                var t1, r1 = this, n1 = [\n                    0,\n                    1,\n                    2,\n                    3,\n                    4,\n                    5,\n                    6,\n                    7,\n                    8,\n                    9,\n                    10,\n                    11\n                ].map(this.props.useShortMonthInDropdown ? function(e1) {\n                    return Xe(e1, r1.props.locale);\n                } : function(e1) {\n                    return Je(e1, r1.props.locale);\n                });\n                switch(this.props.dropdownMode){\n                    case \"scroll\":\n                        t1 = this.renderScrollMode(n1);\n                        break;\n                    case \"select\":\n                        t1 = this.renderSelectMode(n1);\n                }\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker__month-dropdown-container react-datepicker__month-dropdown-container--\".concat(this.props.dropdownMode)\n                }, t1);\n            }\n        }\n    ]), n1;\n}();\nfunction Et(e1, t1) {\n    for(var r1 = [], n1 = Fe(e1), o1 = Fe(t1); !isAfter(n1, o1);)r1.push(Ye(n1)), n1 = addMonths(n1, 1);\n    return r1;\n}\nvar Nt = onClickOutsideHOC(function(t1) {\n    De(o1, (react__WEBPACK_IMPORTED_MODULE_1___default().Component));\n    var n1 = be(o1);\n    function o1(t1) {\n        var r1;\n        return he(this, o1), ye(we(r1 = n1.call(this, t1)), \"renderOptions\", function() {\n            return r1.state.monthYearsList.map(function(t1) {\n                var n1 = getTime(t1), o1 = Be(r1.props.date, t1) && Qe(r1.props.date, t1);\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: o1 ? \"react-datepicker__month-year-option--selected_month-year\" : \"react-datepicker__month-year-option\",\n                    key: n1,\n                    onClick: r1.onChange.bind(we(r1), n1),\n                    \"aria-selected\": o1 ? \"true\" : void 0\n                }, o1 ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                    className: \"react-datepicker__month-year-option--selected\"\n                }, \"✓\") : \"\", Ie(t1, r1.props.dateFormat, r1.props.locale));\n            });\n        }), ye(we(r1), \"onChange\", function(e1) {\n            return r1.props.onChange(e1);\n        }), ye(we(r1), \"handleClickOutside\", function() {\n            r1.props.onCancel();\n        }), r1.state = {\n            monthYearsList: Et(r1.props.minDate, r1.props.maxDate)\n        }, r1;\n    }\n    return fe(o1, [\n        {\n            key: \"render\",\n            value: function() {\n                var t1 = r({\n                    \"react-datepicker__month-year-dropdown\": true,\n                    \"react-datepicker__month-year-dropdown--scrollable\": this.props.scrollableMonthYearDropdown\n                });\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: t1\n                }, this.renderOptions());\n            }\n        }\n    ]), o1;\n}()), xt = function(t1) {\n    De(n1, (react__WEBPACK_IMPORTED_MODULE_1___default().Component));\n    var r1 = be(n1);\n    function n1() {\n        var t1;\n        he(this, n1);\n        for(var o1 = arguments.length, a1 = new Array(o1), s1 = 0; s1 < o1; s1++)a1[s1] = arguments[s1];\n        return ye(we(t1 = r1.call.apply(r1, [\n            this\n        ].concat(a1))), \"state\", {\n            dropdownVisible: false\n        }), ye(we(t1), \"renderSelectOptions\", function() {\n            for(var r1 = Fe(t1.props.minDate), n1 = Fe(t1.props.maxDate), o1 = []; !isAfter(r1, n1);){\n                var a1 = getTime(r1);\n                o1.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"option\", {\n                    key: a1,\n                    value: a1\n                }, Ie(r1, t1.props.dateFormat, t1.props.locale))), r1 = addMonths(r1, 1);\n            }\n            return o1;\n        }), ye(we(t1), \"onSelectChange\", function(e1) {\n            t1.onChange(e1.target.value);\n        }), ye(we(t1), \"renderSelectMode\", function() {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"select\", {\n                value: getTime(Fe(t1.props.date)),\n                className: \"react-datepicker__month-year-select\",\n                onChange: t1.onSelectChange\n            }, t1.renderSelectOptions());\n        }), ye(we(t1), \"renderReadView\", function(r1) {\n            var n1 = Ie(t1.props.date, t1.props.dateFormat, t1.props.locale);\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                key: \"read\",\n                style: {\n                    visibility: r1 ? \"visible\" : \"hidden\"\n                },\n                className: \"react-datepicker__month-year-read-view\",\n                onClick: function(e1) {\n                    return t1.toggleDropdown(e1);\n                }\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                className: \"react-datepicker__month-year-read-view--down-arrow\"\n            }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                className: \"react-datepicker__month-year-read-view--selected-month-year\"\n            }, n1));\n        }), ye(we(t1), \"renderDropdown\", function() {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Nt, {\n                key: \"dropdown\",\n                date: t1.props.date,\n                dateFormat: t1.props.dateFormat,\n                onChange: t1.onChange,\n                onCancel: t1.toggleDropdown,\n                minDate: t1.props.minDate,\n                maxDate: t1.props.maxDate,\n                scrollableMonthYearDropdown: t1.props.scrollableMonthYearDropdown,\n                locale: t1.props.locale\n            });\n        }), ye(we(t1), \"renderScrollMode\", function() {\n            var e1 = t1.state.dropdownVisible, r1 = [\n                t1.renderReadView(!e1)\n            ];\n            return e1 && r1.unshift(t1.renderDropdown()), r1;\n        }), ye(we(t1), \"onChange\", function(e1) {\n            t1.toggleDropdown();\n            var r1 = Ye(parseInt(e1));\n            Be(t1.props.date, r1) && Qe(t1.props.date, r1) || t1.props.onChange(r1);\n        }), ye(we(t1), \"toggleDropdown\", function() {\n            return t1.setState({\n                dropdownVisible: !t1.state.dropdownVisible\n            });\n        }), t1;\n    }\n    return fe(n1, [\n        {\n            key: \"render\",\n            value: function() {\n                var t1;\n                switch(this.props.dropdownMode){\n                    case \"scroll\":\n                        t1 = this.renderScrollMode();\n                        break;\n                    case \"select\":\n                        t1 = this.renderSelectMode();\n                }\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker__month-year-dropdown-container react-datepicker__month-year-dropdown-container--\".concat(this.props.dropdownMode)\n                }, t1);\n            }\n        }\n    ]), n1;\n}(), Yt = function(t1) {\n    De(o1, (react__WEBPACK_IMPORTED_MODULE_1___default().Component));\n    var n1 = be(o1);\n    function o1() {\n        var t1;\n        he(this, o1);\n        for(var a1 = arguments.length, s1 = new Array(a1), i1 = 0; i1 < a1; i1++)s1[i1] = arguments[i1];\n        return ye(we(t1 = n1.call.apply(n1, [\n            this\n        ].concat(s1))), \"dayEl\", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createRef()), ye(we(t1), \"handleClick\", function(e1) {\n            !t1.isDisabled() && t1.props.onClick && t1.props.onClick(e1);\n        }), ye(we(t1), \"handleMouseEnter\", function(e1) {\n            !t1.isDisabled() && t1.props.onMouseEnter && t1.props.onMouseEnter(e1);\n        }), ye(we(t1), \"handleOnKeyDown\", function(e1) {\n            \" \" === e1.key && (e1.preventDefault(), e1.key = \"Enter\"), t1.props.handleOnKeyDown(e1);\n        }), ye(we(t1), \"isSameDay\", function(e1) {\n            return je(t1.props.day, e1);\n        }), ye(we(t1), \"isKeyboardSelected\", function() {\n            return !t1.props.disabledKeyboardNavigation && !(t1.isSameDay(t1.props.selected) || t1.isSameWeek(t1.props.selected)) && (t1.isSameDay(t1.props.preSelection) || t1.isSameWeek(t1.props.preSelection));\n        }), ye(we(t1), \"isDisabled\", function() {\n            return Ze(t1.props.day, t1.props);\n        }), ye(we(t1), \"isExcluded\", function() {\n            return et(t1.props.day, t1.props);\n        }), ye(we(t1), \"isStartOfWeek\", function() {\n            return je(t1.props.day, Le(t1.props.day, t1.props.locale, t1.props.calendarStartDay));\n        }), ye(we(t1), \"isSameWeek\", function(e1) {\n            return t1.props.showWeekPicker && je(e1, Le(t1.props.day, t1.props.locale, t1.props.calendarStartDay));\n        }), ye(we(t1), \"getHighLightedClass\", function() {\n            var e1 = t1.props, r1 = e1.day, n1 = e1.highlightDates;\n            if (!n1) return false;\n            var o1 = Ie(r1, \"MM.dd.yyyy\");\n            return n1.get(o1);\n        }), ye(we(t1), \"getHolidaysClass\", function() {\n            var e1 = t1.props, r1 = e1.day, n1 = e1.holidays;\n            if (!n1) return false;\n            var o1 = Ie(r1, \"MM.dd.yyyy\");\n            return n1.has(o1) ? [\n                n1.get(o1).className\n            ] : void 0;\n        }), ye(we(t1), \"isInRange\", function() {\n            var e1 = t1.props, r1 = e1.day, n1 = e1.startDate, o1 = e1.endDate;\n            return !(!n1 || !o1) && qe(r1, n1, o1);\n        }), ye(we(t1), \"isInSelectingRange\", function() {\n            var e1, r1 = t1.props, n1 = r1.day, o1 = r1.selectsStart, a1 = r1.selectsEnd, s1 = r1.selectsRange, i1 = r1.selectsDisabledDaysInRange, p1 = r1.startDate, c1 = r1.endDate, l1 = null !== (e1 = t1.props.selectingDate) && void 0 !== e1 ? e1 : t1.props.preSelection;\n            return !(!(o1 || a1 || s1) || !l1 || !i1 && t1.isDisabled()) && (o1 && c1 && (isBefore(l1, c1) || Ve(l1, c1)) ? qe(n1, l1, c1) : (a1 && p1 && (isAfter(l1, p1) || Ve(l1, p1)) || !(!s1 || !p1 || c1 || !isAfter(l1, p1) && !Ve(l1, p1))) && qe(n1, p1, l1));\n        }), ye(we(t1), \"isSelectingRangeStart\", function() {\n            var e1;\n            if (!t1.isInSelectingRange()) return false;\n            var r1 = t1.props, n1 = r1.day, o1 = r1.startDate, a1 = r1.selectsStart, s1 = null !== (e1 = t1.props.selectingDate) && void 0 !== e1 ? e1 : t1.props.preSelection;\n            return je(n1, a1 ? s1 : o1);\n        }), ye(we(t1), \"isSelectingRangeEnd\", function() {\n            var e1;\n            if (!t1.isInSelectingRange()) return false;\n            var r1 = t1.props, n1 = r1.day, o1 = r1.endDate, a1 = r1.selectsEnd, s1 = r1.selectsRange, i1 = null !== (e1 = t1.props.selectingDate) && void 0 !== e1 ? e1 : t1.props.preSelection;\n            return je(n1, a1 || s1 ? i1 : o1);\n        }), ye(we(t1), \"isRangeStart\", function() {\n            var e1 = t1.props, r1 = e1.day, n1 = e1.startDate, o1 = e1.endDate;\n            return !(!n1 || !o1) && je(n1, r1);\n        }), ye(we(t1), \"isRangeEnd\", function() {\n            var e1 = t1.props, r1 = e1.day, n1 = e1.startDate, o1 = e1.endDate;\n            return !(!n1 || !o1) && je(o1, r1);\n        }), ye(we(t1), \"isWeekend\", function() {\n            var e1 = getDay(t1.props.day);\n            return 0 === e1 || 6 === e1;\n        }), ye(we(t1), \"isAfterMonth\", function() {\n            return void 0 !== t1.props.month && (t1.props.month + 1) % 12 === getMonth(t1.props.day);\n        }), ye(we(t1), \"isBeforeMonth\", function() {\n            return void 0 !== t1.props.month && (getMonth(t1.props.day) + 1) % 12 === t1.props.month;\n        }), ye(we(t1), \"isCurrentDay\", function() {\n            return t1.isSameDay(Ye());\n        }), ye(we(t1), \"isSelected\", function() {\n            return t1.isSameDay(t1.props.selected) || t1.isSameWeek(t1.props.selected);\n        }), ye(we(t1), \"getClassNames\", function(e1) {\n            var n1, o1 = t1.props.dayClassName ? t1.props.dayClassName(e1) : void 0;\n            return r(\"react-datepicker__day\", o1, \"react-datepicker__day--\" + Ie(t1.props.day, \"ddd\", n1), {\n                \"react-datepicker__day--disabled\": t1.isDisabled(),\n                \"react-datepicker__day--excluded\": t1.isExcluded(),\n                \"react-datepicker__day--selected\": t1.isSelected(),\n                \"react-datepicker__day--keyboard-selected\": t1.isKeyboardSelected(),\n                \"react-datepicker__day--range-start\": t1.isRangeStart(),\n                \"react-datepicker__day--range-end\": t1.isRangeEnd(),\n                \"react-datepicker__day--in-range\": t1.isInRange(),\n                \"react-datepicker__day--in-selecting-range\": t1.isInSelectingRange(),\n                \"react-datepicker__day--selecting-range-start\": t1.isSelectingRangeStart(),\n                \"react-datepicker__day--selecting-range-end\": t1.isSelectingRangeEnd(),\n                \"react-datepicker__day--today\": t1.isCurrentDay(),\n                \"react-datepicker__day--weekend\": t1.isWeekend(),\n                \"react-datepicker__day--outside-month\": t1.isAfterMonth() || t1.isBeforeMonth()\n            }, t1.getHighLightedClass(\"react-datepicker__day--highlighted\"), t1.getHolidaysClass());\n        }), ye(we(t1), \"getAriaLabel\", function() {\n            var e1 = t1.props, r1 = e1.day, n1 = e1.ariaLabelPrefixWhenEnabled, o1 = void 0 === n1 ? \"Choose\" : n1, a1 = e1.ariaLabelPrefixWhenDisabled, s1 = void 0 === a1 ? \"Not available\" : a1, i1 = t1.isDisabled() || t1.isExcluded() ? s1 : o1;\n            return \"\".concat(i1, \" \").concat(Ie(r1, \"PPPP\", t1.props.locale));\n        }), ye(we(t1), \"getTitle\", function() {\n            var e1 = t1.props, r1 = e1.day, n1 = e1.holidays, o1 = void 0 === n1 ? new Map : n1, a1 = Ie(r1, \"MM.dd.yyyy\");\n            return o1.has(a1) && o1.get(a1).holidayNames.length > 0 ? o1.get(a1).holidayNames.join(\", \") : \"\";\n        }), ye(we(t1), \"getTabIndex\", function(e1, r1) {\n            var n1 = e1 || t1.props.selected, o1 = r1 || t1.props.preSelection;\n            return (!t1.props.showWeekPicker || !t1.props.showWeekNumber && t1.isStartOfWeek()) && (t1.isKeyboardSelected() || t1.isSameDay(n1) && je(o1, n1)) ? 0 : -1;\n        }), ye(we(t1), \"handleFocusDay\", function() {\n            var e1, r1 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n1 = false;\n            0 === t1.getTabIndex() && !r1.isInputFocused && t1.isSameDay(t1.props.preSelection) && (document.activeElement && document.activeElement !== document.body || (n1 = true), t1.props.inline && !t1.props.shouldFocusDayInline && (n1 = false), t1.props.containerRef && t1.props.containerRef.current && t1.props.containerRef.current.contains(document.activeElement) && document.activeElement.classList.contains(\"react-datepicker__day\") && (n1 = true), t1.props.monthShowsDuplicateDaysEnd && t1.isAfterMonth() && (n1 = false), t1.props.monthShowsDuplicateDaysStart && t1.isBeforeMonth() && (n1 = false)), n1 && (null === (e1 = t1.dayEl.current) || void 0 === e1 || e1.focus({\n                preventScroll: true\n            }));\n        }), ye(we(t1), \"renderDayContents\", function() {\n            return t1.props.monthShowsDuplicateDaysEnd && t1.isAfterMonth() || t1.props.monthShowsDuplicateDaysStart && t1.isBeforeMonth() ? null : t1.props.renderDayContents ? t1.props.renderDayContents(getDate(t1.props.day), t1.props.day) : getDate(t1.props.day);\n        }), ye(we(t1), \"render\", function() {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                ref: t1.dayEl,\n                className: t1.getClassNames(t1.props.day),\n                onKeyDown: t1.handleOnKeyDown,\n                onClick: t1.handleClick,\n                onMouseEnter: t1.handleMouseEnter,\n                tabIndex: t1.getTabIndex(),\n                \"aria-label\": t1.getAriaLabel(),\n                role: \"option\",\n                title: t1.getTitle(),\n                \"aria-disabled\": t1.isDisabled(),\n                \"aria-current\": t1.isCurrentDay() ? \"date\" : void 0,\n                \"aria-selected\": t1.isSelected() || t1.isInRange()\n            }, t1.renderDayContents(), \"\" !== t1.getTitle() && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                className: \"holiday-overlay\"\n            }, t1.getTitle()));\n        }), t1;\n    }\n    return fe(o1, [\n        {\n            key: \"componentDidMount\",\n            value: function() {\n                this.handleFocusDay();\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function(e1) {\n                this.handleFocusDay(e1);\n            }\n        }\n    ]), o1;\n}(), Tt = function(t1) {\n    De(o1, (react__WEBPACK_IMPORTED_MODULE_1___default().Component));\n    var n1 = be(o1);\n    function o1() {\n        var t1;\n        he(this, o1);\n        for(var r1 = arguments.length, a1 = new Array(r1), s1 = 0; s1 < r1; s1++)a1[s1] = arguments[s1];\n        return ye(we(t1 = n1.call.apply(n1, [\n            this\n        ].concat(a1))), \"weekNumberEl\", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createRef()), ye(we(t1), \"handleClick\", function(e1) {\n            t1.props.onClick && t1.props.onClick(e1);\n        }), ye(we(t1), \"handleOnKeyDown\", function(e1) {\n            \" \" === e1.key && (e1.preventDefault(), e1.key = \"Enter\"), t1.props.handleOnKeyDown(e1);\n        }), ye(we(t1), \"isKeyboardSelected\", function() {\n            return !t1.props.disabledKeyboardNavigation && !je(t1.props.date, t1.props.selected) && je(t1.props.date, t1.props.preSelection);\n        }), ye(we(t1), \"getTabIndex\", function() {\n            return t1.props.showWeekPicker && t1.props.showWeekNumber && (t1.isKeyboardSelected() || je(t1.props.date, t1.props.selected) && je(t1.props.preSelection, t1.props.selected)) ? 0 : -1;\n        }), ye(we(t1), \"handleFocusWeekNumber\", function() {\n            var e1 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r1 = false;\n            0 === t1.getTabIndex() && !e1.isInputFocused && je(t1.props.date, t1.props.preSelection) && (document.activeElement && document.activeElement !== document.body || (r1 = true), t1.props.inline && !t1.props.shouldFocusDayInline && (r1 = false), t1.props.containerRef && t1.props.containerRef.current && t1.props.containerRef.current.contains(document.activeElement) && document.activeElement && document.activeElement.classList.contains(\"react-datepicker__week-number\") && (r1 = true)), r1 && t1.weekNumberEl.current && t1.weekNumberEl.current.focus({\n                preventScroll: true\n            });\n        }), t1;\n    }\n    return fe(o1, [\n        {\n            key: \"componentDidMount\",\n            value: function() {\n                this.handleFocusWeekNumber();\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function(e1) {\n                this.handleFocusWeekNumber(e1);\n            }\n        },\n        {\n            key: \"render\",\n            value: function() {\n                var t1 = this.props, n1 = t1.weekNumber, o1 = t1.ariaLabelPrefix, a1 = void 0 === o1 ? \"week \" : o1, s1 = {\n                    \"react-datepicker__week-number\": true,\n                    \"react-datepicker__week-number--clickable\": !!t1.onClick,\n                    \"react-datepicker__week-number--selected\": je(this.props.date, this.props.selected),\n                    \"react-datepicker__week-number--keyboard-selected\": this.isKeyboardSelected()\n                };\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    ref: this.weekNumberEl,\n                    className: r(s1),\n                    \"aria-label\": \"\".concat(a1, \" \").concat(this.props.weekNumber),\n                    onClick: this.handleClick,\n                    onKeyDown: this.handleOnKeyDown,\n                    tabIndex: this.getTabIndex()\n                }, n1);\n            }\n        }\n    ], [\n        {\n            key: \"defaultProps\",\n            get: function() {\n                return {\n                    ariaLabelPrefix: \"week \"\n                };\n            }\n        }\n    ]), o1;\n}(), It = function(t1) {\n    De(o1, (react__WEBPACK_IMPORTED_MODULE_1___default().Component));\n    var n1 = be(o1);\n    function o1() {\n        var t1;\n        he(this, o1);\n        for(var r1 = arguments.length, a1 = new Array(r1), s1 = 0; s1 < r1; s1++)a1[s1] = arguments[s1];\n        return ye(we(t1 = n1.call.apply(n1, [\n            this\n        ].concat(a1))), \"handleDayClick\", function(e1, r1) {\n            t1.props.onDayClick && t1.props.onDayClick(e1, r1);\n        }), ye(we(t1), \"handleDayMouseEnter\", function(e1) {\n            t1.props.onDayMouseEnter && t1.props.onDayMouseEnter(e1);\n        }), ye(we(t1), \"handleWeekClick\", function(e1, r1, n1) {\n            if (\"function\" == typeof t1.props.onWeekSelect && t1.props.onWeekSelect(e1, r1, n1), t1.props.showWeekPicker) {\n                var o1 = Le(e1, t1.props.locale, t1.props.calendarStartDay);\n                t1.handleDayClick(o1, n1);\n            }\n            t1.props.shouldCloseOnSelect && t1.props.setOpen(false);\n        }), ye(we(t1), \"formatWeekNumber\", function(e1) {\n            return t1.props.formatWeekNumber ? t1.props.formatWeekNumber(e1) : function(e1, t1) {\n                var r1 = $e() && Ge($e());\n                return getISOWeek(e1, r1 ? {\n                    locale: r1\n                } : null);\n            }(e1);\n        }), ye(we(t1), \"renderDays\", function() {\n            var r1 = Le(t1.props.day, t1.props.locale, t1.props.calendarStartDay), n1 = [], o1 = t1.formatWeekNumber(r1);\n            if (t1.props.showWeekNumber) {\n                var a1 = t1.props.onWeekSelect || t1.props.showWeekPicker ? t1.handleWeekClick.bind(we(t1), r1, o1) : void 0;\n                n1.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Tt, {\n                    key: \"W\",\n                    weekNumber: o1,\n                    date: r1,\n                    onClick: a1,\n                    selected: t1.props.selected,\n                    preSelection: t1.props.preSelection,\n                    ariaLabelPrefix: t1.props.ariaLabelPrefix,\n                    showWeekPicker: t1.props.showWeekPicker,\n                    showWeekNumber: t1.props.showWeekNumber,\n                    disabledKeyboardNavigation: t1.props.disabledKeyboardNavigation,\n                    handleOnKeyDown: t1.props.handleOnKeyDown,\n                    isInputFocused: t1.props.isInputFocused,\n                    containerRef: t1.props.containerRef\n                }));\n            }\n            return n1.concat([\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6\n            ].map(function(n1) {\n                var o1 = addDays(r1, n1);\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Yt, {\n                    ariaLabelPrefixWhenEnabled: t1.props.chooseDayAriaLabelPrefix,\n                    ariaLabelPrefixWhenDisabled: t1.props.disabledDayAriaLabelPrefix,\n                    key: o1.valueOf(),\n                    day: o1,\n                    month: t1.props.month,\n                    onClick: t1.handleDayClick.bind(we(t1), o1),\n                    onMouseEnter: t1.handleDayMouseEnter.bind(we(t1), o1),\n                    minDate: t1.props.minDate,\n                    maxDate: t1.props.maxDate,\n                    excludeDates: t1.props.excludeDates,\n                    excludeDateIntervals: t1.props.excludeDateIntervals,\n                    includeDates: t1.props.includeDates,\n                    includeDateIntervals: t1.props.includeDateIntervals,\n                    highlightDates: t1.props.highlightDates,\n                    holidays: t1.props.holidays,\n                    selectingDate: t1.props.selectingDate,\n                    filterDate: t1.props.filterDate,\n                    preSelection: t1.props.preSelection,\n                    selected: t1.props.selected,\n                    selectsStart: t1.props.selectsStart,\n                    selectsEnd: t1.props.selectsEnd,\n                    selectsRange: t1.props.selectsRange,\n                    showWeekPicker: t1.props.showWeekPicker,\n                    showWeekNumber: t1.props.showWeekNumber,\n                    selectsDisabledDaysInRange: t1.props.selectsDisabledDaysInRange,\n                    startDate: t1.props.startDate,\n                    endDate: t1.props.endDate,\n                    dayClassName: t1.props.dayClassName,\n                    renderDayContents: t1.props.renderDayContents,\n                    disabledKeyboardNavigation: t1.props.disabledKeyboardNavigation,\n                    handleOnKeyDown: t1.props.handleOnKeyDown,\n                    isInputFocused: t1.props.isInputFocused,\n                    containerRef: t1.props.containerRef,\n                    inline: t1.props.inline,\n                    shouldFocusDayInline: t1.props.shouldFocusDayInline,\n                    monthShowsDuplicateDaysEnd: t1.props.monthShowsDuplicateDaysEnd,\n                    monthShowsDuplicateDaysStart: t1.props.monthShowsDuplicateDaysStart,\n                    locale: t1.props.locale\n                });\n            }));\n        }), ye(we(t1), \"startOfWeek\", function() {\n            return Le(t1.props.day, t1.props.locale, t1.props.calendarStartDay);\n        }), ye(we(t1), \"isKeyboardSelected\", function() {\n            return !t1.props.disabledKeyboardNavigation && !je(t1.startOfWeek(), t1.props.selected) && je(t1.startOfWeek(), t1.props.preSelection);\n        }), t1;\n    }\n    return fe(o1, [\n        {\n            key: \"render\",\n            value: function() {\n                var t1 = {\n                    \"react-datepicker__week\": true,\n                    \"react-datepicker__week--selected\": je(this.startOfWeek(), this.props.selected),\n                    \"react-datepicker__week--keyboard-selected\": this.isKeyboardSelected()\n                };\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: r(t1)\n                }, this.renderDays());\n            }\n        }\n    ], [\n        {\n            key: \"defaultProps\",\n            get: function() {\n                return {\n                    shouldCloseOnSelect: true\n                };\n            }\n        }\n    ]), o1;\n}(), Ot = \"two_columns\", Rt = \"three_columns\", Lt = \"four_columns\", Ft = ye(ye(ye({}, Ot, {\n    grid: [\n        [\n            0,\n            1\n        ],\n        [\n            2,\n            3\n        ],\n        [\n            4,\n            5\n        ],\n        [\n            6,\n            7\n        ],\n        [\n            8,\n            9\n        ],\n        [\n            10,\n            11\n        ]\n    ],\n    verticalNavigationOffset: 2\n}), Rt, {\n    grid: [\n        [\n            0,\n            1,\n            2\n        ],\n        [\n            3,\n            4,\n            5\n        ],\n        [\n            6,\n            7,\n            8\n        ],\n        [\n            9,\n            10,\n            11\n        ]\n    ],\n    verticalNavigationOffset: 3\n}), Lt, {\n    grid: [\n        [\n            0,\n            1,\n            2,\n            3\n        ],\n        [\n            4,\n            5,\n            6,\n            7\n        ],\n        [\n            8,\n            9,\n            10,\n            11\n        ]\n    ],\n    verticalNavigationOffset: 4\n});\nfunction At(e1, t1) {\n    return e1 ? Lt : t1 ? Ot : Rt;\n}\nvar Wt = function(t1) {\n    De(o1, (react__WEBPACK_IMPORTED_MODULE_1___default().Component));\n    var n1 = be(o1);\n    function o1() {\n        var t1;\n        he(this, o1);\n        for(var a1 = arguments.length, s1 = new Array(a1), i1 = 0; i1 < a1; i1++)s1[i1] = arguments[i1];\n        return ye(we(t1 = n1.call.apply(n1, [\n            this\n        ].concat(s1))), \"MONTH_REFS\", Se(Array(12)).map(function() {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createRef();\n        })), ye(we(t1), \"QUARTER_REFS\", Se(Array(4)).map(function() {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createRef();\n        })), ye(we(t1), \"isDisabled\", function(e1) {\n            return Ze(e1, t1.props);\n        }), ye(we(t1), \"isExcluded\", function(e1) {\n            return et(e1, t1.props);\n        }), ye(we(t1), \"handleDayClick\", function(e1, r1) {\n            t1.props.onDayClick && t1.props.onDayClick(e1, r1, t1.props.orderInDisplay);\n        }), ye(we(t1), \"handleDayMouseEnter\", function(e1) {\n            t1.props.onDayMouseEnter && t1.props.onDayMouseEnter(e1);\n        }), ye(we(t1), \"handleMouseLeave\", function() {\n            t1.props.onMouseLeave && t1.props.onMouseLeave();\n        }), ye(we(t1), \"isRangeStartMonth\", function(e1) {\n            var r1 = t1.props, n1 = r1.day, o1 = r1.startDate, a1 = r1.endDate;\n            return !(!o1 || !a1) && Qe(setMonth(n1, e1), o1);\n        }), ye(we(t1), \"isRangeStartQuarter\", function(e1) {\n            var r1 = t1.props, n1 = r1.day, o1 = r1.startDate, a1 = r1.endDate;\n            return !(!o1 || !a1) && He(setQuarter(n1, e1), o1);\n        }), ye(we(t1), \"isRangeEndMonth\", function(e1) {\n            var r1 = t1.props, n1 = r1.day, o1 = r1.startDate, a1 = r1.endDate;\n            return !(!o1 || !a1) && Qe(setMonth(n1, e1), a1);\n        }), ye(we(t1), \"isRangeEndQuarter\", function(e1) {\n            var r1 = t1.props, n1 = r1.day, o1 = r1.startDate, a1 = r1.endDate;\n            return !(!o1 || !a1) && He(setQuarter(n1, e1), a1);\n        }), ye(we(t1), \"isInSelectingRangeMonth\", function(e1) {\n            var r1, n1 = t1.props, o1 = n1.day, a1 = n1.selectsStart, s1 = n1.selectsEnd, i1 = n1.selectsRange, p1 = n1.startDate, c1 = n1.endDate, l1 = null !== (r1 = t1.props.selectingDate) && void 0 !== r1 ? r1 : t1.props.preSelection;\n            return !(!(a1 || s1 || i1) || !l1) && (a1 && c1 ? rt(l1, c1, e1, o1) : (s1 && p1 || !(!i1 || !p1 || c1)) && rt(p1, l1, e1, o1));\n        }), ye(we(t1), \"isSelectingMonthRangeStart\", function(e1) {\n            var r1;\n            if (!t1.isInSelectingRangeMonth(e1)) return false;\n            var n1 = t1.props, o1 = n1.day, a1 = n1.startDate, s1 = n1.selectsStart, i1 = setMonth(o1, e1), p1 = null !== (r1 = t1.props.selectingDate) && void 0 !== r1 ? r1 : t1.props.preSelection;\n            return Qe(i1, s1 ? p1 : a1);\n        }), ye(we(t1), \"isSelectingMonthRangeEnd\", function(e1) {\n            var r1;\n            if (!t1.isInSelectingRangeMonth(e1)) return false;\n            var n1 = t1.props, o1 = n1.day, a1 = n1.endDate, s1 = n1.selectsEnd, i1 = n1.selectsRange, p1 = setMonth(o1, e1), c1 = null !== (r1 = t1.props.selectingDate) && void 0 !== r1 ? r1 : t1.props.preSelection;\n            return Qe(p1, s1 || i1 ? c1 : a1);\n        }), ye(we(t1), \"isInSelectingRangeQuarter\", function(e1) {\n            var r1, n1 = t1.props, o1 = n1.day, a1 = n1.selectsStart, s1 = n1.selectsEnd, i1 = n1.selectsRange, p1 = n1.startDate, c1 = n1.endDate, l1 = null !== (r1 = t1.props.selectingDate) && void 0 !== r1 ? r1 : t1.props.preSelection;\n            return !(!(a1 || s1 || i1) || !l1) && (a1 && c1 ? st(l1, c1, e1, o1) : (s1 && p1 || !(!i1 || !p1 || c1)) && st(p1, l1, e1, o1));\n        }), ye(we(t1), \"isWeekInMonth\", function(e1) {\n            var r1 = t1.props.day, n1 = addDays(e1, 6);\n            return Qe(e1, r1) || Qe(n1, r1);\n        }), ye(we(t1), \"isCurrentMonth\", function(e1, t1) {\n            return getYear(e1) === getYear(Ye()) && t1 === getMonth(Ye());\n        }), ye(we(t1), \"isCurrentQuarter\", function(e1, t1) {\n            return getYear(e1) === getYear(Ye()) && t1 === getQuarter(Ye());\n        }), ye(we(t1), \"isSelectedMonth\", function(e1, t1, r1) {\n            return getMonth(r1) === t1 && getYear(e1) === getYear(r1);\n        }), ye(we(t1), \"isSelectedQuarter\", function(e1, t1, r1) {\n            return getQuarter(e1) === t1 && getYear(e1) === getYear(r1);\n        }), ye(we(t1), \"renderWeeks\", function() {\n            for(var r1 = [], n1 = t1.props.fixedHeight, o1 = 0, a1 = false, s1 = Le(Fe(t1.props.day), t1.props.locale, t1.props.calendarStartDay); r1.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(It, {\n                ariaLabelPrefix: t1.props.weekAriaLabelPrefix,\n                chooseDayAriaLabelPrefix: t1.props.chooseDayAriaLabelPrefix,\n                disabledDayAriaLabelPrefix: t1.props.disabledDayAriaLabelPrefix,\n                key: o1,\n                day: s1,\n                month: getMonth(t1.props.day),\n                onDayClick: t1.handleDayClick,\n                onDayMouseEnter: t1.handleDayMouseEnter,\n                onWeekSelect: t1.props.onWeekSelect,\n                formatWeekNumber: t1.props.formatWeekNumber,\n                locale: t1.props.locale,\n                minDate: t1.props.minDate,\n                maxDate: t1.props.maxDate,\n                excludeDates: t1.props.excludeDates,\n                excludeDateIntervals: t1.props.excludeDateIntervals,\n                includeDates: t1.props.includeDates,\n                includeDateIntervals: t1.props.includeDateIntervals,\n                inline: t1.props.inline,\n                shouldFocusDayInline: t1.props.shouldFocusDayInline,\n                highlightDates: t1.props.highlightDates,\n                holidays: t1.props.holidays,\n                selectingDate: t1.props.selectingDate,\n                filterDate: t1.props.filterDate,\n                preSelection: t1.props.preSelection,\n                selected: t1.props.selected,\n                selectsStart: t1.props.selectsStart,\n                selectsEnd: t1.props.selectsEnd,\n                selectsRange: t1.props.selectsRange,\n                selectsDisabledDaysInRange: t1.props.selectsDisabledDaysInRange,\n                showWeekNumber: t1.props.showWeekNumbers,\n                showWeekPicker: t1.props.showWeekPicker,\n                startDate: t1.props.startDate,\n                endDate: t1.props.endDate,\n                dayClassName: t1.props.dayClassName,\n                setOpen: t1.props.setOpen,\n                shouldCloseOnSelect: t1.props.shouldCloseOnSelect,\n                disabledKeyboardNavigation: t1.props.disabledKeyboardNavigation,\n                renderDayContents: t1.props.renderDayContents,\n                handleOnKeyDown: t1.props.handleOnKeyDown,\n                isInputFocused: t1.props.isInputFocused,\n                containerRef: t1.props.containerRef,\n                calendarStartDay: t1.props.calendarStartDay,\n                monthShowsDuplicateDaysEnd: t1.props.monthShowsDuplicateDaysEnd,\n                monthShowsDuplicateDaysStart: t1.props.monthShowsDuplicateDaysStart\n            })), !a1;){\n                o1++, s1 = addWeeks(s1, 1);\n                var i1 = n1 && o1 >= 6, p1 = !n1 && !t1.isWeekInMonth(s1);\n                if (i1 || p1) {\n                    if (!t1.props.peekNextMonth) break;\n                    a1 = true;\n                }\n            }\n            return r1;\n        }), ye(we(t1), \"onMonthClick\", function(e1, r1) {\n            t1.handleDayClick(Fe(setMonth(t1.props.day, r1)), e1);\n        }), ye(we(t1), \"onMonthMouseEnter\", function(e1) {\n            t1.handleDayMouseEnter(Fe(setMonth(t1.props.day, e1)));\n        }), ye(we(t1), \"handleMonthNavigation\", function(e1, r1) {\n            t1.isDisabled(r1) || t1.isExcluded(r1) || (t1.props.setPreSelection(r1), t1.MONTH_REFS[e1].current && t1.MONTH_REFS[e1].current.focus());\n        }), ye(we(t1), \"onMonthKeyDown\", function(e1, r1) {\n            var n1 = t1.props, o1 = n1.selected, a1 = n1.preSelection, s1 = n1.disabledKeyboardNavigation, i1 = n1.showTwoColumnMonthYearPicker, p1 = n1.showFourColumnMonthYearPicker, c1 = n1.setPreSelection, d1 = e1.key;\n            if (\"Tab\" !== d1 && e1.preventDefault(), !s1) {\n                var u1 = At(p1, i1), h1 = Ft[u1].verticalNavigationOffset, m1 = Ft[u1].grid;\n                switch(d1){\n                    case \"Enter\":\n                        t1.onMonthClick(e1, r1), c1(o1);\n                        break;\n                    case \"ArrowRight\":\n                        t1.handleMonthNavigation(11 === r1 ? 0 : r1 + 1, addMonths(a1, 1));\n                        break;\n                    case \"ArrowLeft\":\n                        t1.handleMonthNavigation(0 === r1 ? 11 : r1 - 1, subMonths(a1, 1));\n                        break;\n                    case \"ArrowUp\":\n                        t1.handleMonthNavigation(m1[0].includes(r1) ? r1 + 12 - h1 : r1 - h1, subMonths(a1, h1));\n                        break;\n                    case \"ArrowDown\":\n                        t1.handleMonthNavigation(m1[m1.length - 1].includes(r1) ? r1 - 12 + h1 : r1 + h1, addMonths(a1, h1));\n                }\n            }\n        }), ye(we(t1), \"onQuarterClick\", function(e1, r1) {\n            t1.handleDayClick(We(setQuarter(t1.props.day, r1)), e1);\n        }), ye(we(t1), \"onQuarterMouseEnter\", function(e1) {\n            t1.handleDayMouseEnter(We(setQuarter(t1.props.day, e1)));\n        }), ye(we(t1), \"handleQuarterNavigation\", function(e1, r1) {\n            t1.isDisabled(r1) || t1.isExcluded(r1) || (t1.props.setPreSelection(r1), t1.QUARTER_REFS[e1 - 1].current && t1.QUARTER_REFS[e1 - 1].current.focus());\n        }), ye(we(t1), \"onQuarterKeyDown\", function(e1, r1) {\n            var n1 = e1.key;\n            if (!t1.props.disabledKeyboardNavigation) switch(n1){\n                case \"Enter\":\n                    t1.onQuarterClick(e1, r1), t1.props.setPreSelection(t1.props.selected);\n                    break;\n                case \"ArrowRight\":\n                    t1.handleQuarterNavigation(4 === r1 ? 1 : r1 + 1, addQuarters(t1.props.preSelection, 1));\n                    break;\n                case \"ArrowLeft\":\n                    t1.handleQuarterNavigation(1 === r1 ? 4 : r1 - 1, subQuarters(t1.props.preSelection, 1));\n            }\n        }), ye(we(t1), \"getMonthClassNames\", function(e1) {\n            var n1 = t1.props, o1 = n1.day, a1 = n1.startDate, s1 = n1.endDate, i1 = n1.selected, p1 = n1.minDate, c1 = n1.maxDate, l1 = n1.preSelection, d1 = n1.monthClassName, u1 = n1.excludeDates, h1 = n1.includeDates, m1 = d1 ? d1(setMonth(o1, e1)) : void 0, f1 = setMonth(o1, e1);\n            return r(\"react-datepicker__month-text\", \"react-datepicker__month-\".concat(e1), m1, {\n                \"react-datepicker__month-text--disabled\": (p1 || c1 || u1 || h1) && tt(f1, t1.props),\n                \"react-datepicker__month-text--selected\": t1.isSelectedMonth(o1, e1, i1),\n                \"react-datepicker__month-text--keyboard-selected\": !t1.props.disabledKeyboardNavigation && getMonth(l1) === e1,\n                \"react-datepicker__month-text--in-selecting-range\": t1.isInSelectingRangeMonth(e1),\n                \"react-datepicker__month-text--in-range\": rt(a1, s1, e1, o1),\n                \"react-datepicker__month-text--range-start\": t1.isRangeStartMonth(e1),\n                \"react-datepicker__month-text--range-end\": t1.isRangeEndMonth(e1),\n                \"react-datepicker__month-text--selecting-range-start\": t1.isSelectingMonthRangeStart(e1),\n                \"react-datepicker__month-text--selecting-range-end\": t1.isSelectingMonthRangeEnd(e1),\n                \"react-datepicker__month-text--today\": t1.isCurrentMonth(o1, e1)\n            });\n        }), ye(we(t1), \"getTabIndex\", function(e1) {\n            var r1 = getMonth(t1.props.preSelection);\n            return t1.props.disabledKeyboardNavigation || e1 !== r1 ? \"-1\" : \"0\";\n        }), ye(we(t1), \"getQuarterTabIndex\", function(e1) {\n            var r1 = getQuarter(t1.props.preSelection);\n            return t1.props.disabledKeyboardNavigation || e1 !== r1 ? \"-1\" : \"0\";\n        }), ye(we(t1), \"getAriaLabel\", function(e1) {\n            var r1 = t1.props, n1 = r1.chooseDayAriaLabelPrefix, o1 = void 0 === n1 ? \"Choose\" : n1, a1 = r1.disabledDayAriaLabelPrefix, s1 = void 0 === a1 ? \"Not available\" : a1, i1 = r1.day, p1 = setMonth(i1, e1), c1 = t1.isDisabled(p1) || t1.isExcluded(p1) ? s1 : o1;\n            return \"\".concat(c1, \" \").concat(Ie(p1, \"MMMM yyyy\"));\n        }), ye(we(t1), \"getQuarterClassNames\", function(e1) {\n            var n1 = t1.props, o1 = n1.day, a1 = n1.startDate, s1 = n1.endDate, i1 = n1.selected, p1 = n1.minDate, c1 = n1.maxDate, l1 = n1.preSelection, d1 = n1.disabledKeyboardNavigation;\n            return r(\"react-datepicker__quarter-text\", \"react-datepicker__quarter-\".concat(e1), {\n                \"react-datepicker__quarter-text--disabled\": (p1 || c1) && nt(setQuarter(o1, e1), t1.props),\n                \"react-datepicker__quarter-text--selected\": t1.isSelectedQuarter(o1, e1, i1),\n                \"react-datepicker__quarter-text--keyboard-selected\": !d1 && getQuarter(l1) === e1,\n                \"react-datepicker__quarter-text--in-selecting-range\": t1.isInSelectingRangeQuarter(e1),\n                \"react-datepicker__quarter-text--in-range\": st(a1, s1, e1, o1),\n                \"react-datepicker__quarter-text--range-start\": t1.isRangeStartQuarter(e1),\n                \"react-datepicker__quarter-text--range-end\": t1.isRangeEndQuarter(e1)\n            });\n        }), ye(we(t1), \"getMonthContent\", function(e1) {\n            var r1 = t1.props, n1 = r1.showFullMonthYearPicker, o1 = r1.renderMonthContent, a1 = r1.locale, s1 = r1.day, i1 = Xe(e1, a1), p1 = Je(e1, a1);\n            return o1 ? o1(e1, i1, p1, s1) : n1 ? p1 : i1;\n        }), ye(we(t1), \"getQuarterContent\", function(e1) {\n            var r1 = t1.props, n1 = r1.renderQuarterContent, o1 = function(e1, t1) {\n                return Ie(setQuarter(Ye(), e1), \"QQQ\", t1);\n            }(e1, r1.locale);\n            return n1 ? n1(e1, o1) : o1;\n        }), ye(we(t1), \"renderMonths\", function() {\n            var r1 = t1.props, n1 = r1.showTwoColumnMonthYearPicker, o1 = r1.showFourColumnMonthYearPicker, a1 = r1.day, s1 = r1.selected;\n            return Ft[At(o1, n1)].grid.map(function(r1, n1) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker__month-wrapper\",\n                    key: n1\n                }, r1.map(function(r1, n1) {\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                        ref: t1.MONTH_REFS[r1],\n                        key: n1,\n                        onClick: function(e1) {\n                            t1.onMonthClick(e1, r1);\n                        },\n                        onKeyDown: function(e1) {\n                            t1.onMonthKeyDown(e1, r1);\n                        },\n                        onMouseEnter: function() {\n                            return t1.onMonthMouseEnter(r1);\n                        },\n                        tabIndex: t1.getTabIndex(r1),\n                        className: t1.getMonthClassNames(r1),\n                        role: \"option\",\n                        \"aria-label\": t1.getAriaLabel(r1),\n                        \"aria-current\": t1.isCurrentMonth(a1, r1) ? \"date\" : void 0,\n                        \"aria-selected\": t1.isSelectedMonth(a1, r1, s1)\n                    }, t1.getMonthContent(r1));\n                }));\n            });\n        }), ye(we(t1), \"renderQuarters\", function() {\n            var r1 = t1.props, n1 = r1.day, o1 = r1.selected;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"react-datepicker__quarter-wrapper\"\n            }, [\n                1,\n                2,\n                3,\n                4\n            ].map(function(r1, a1) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    key: a1,\n                    ref: t1.QUARTER_REFS[a1],\n                    role: \"option\",\n                    onClick: function(e1) {\n                        t1.onQuarterClick(e1, r1);\n                    },\n                    onKeyDown: function(e1) {\n                        t1.onQuarterKeyDown(e1, r1);\n                    },\n                    onMouseEnter: function() {\n                        return t1.onQuarterMouseEnter(r1);\n                    },\n                    className: t1.getQuarterClassNames(r1),\n                    \"aria-selected\": t1.isSelectedQuarter(n1, r1, o1),\n                    tabIndex: t1.getQuarterTabIndex(r1),\n                    \"aria-current\": t1.isCurrentQuarter(n1, r1) ? \"date\" : void 0\n                }, t1.getQuarterContent(r1));\n            }));\n        }), ye(we(t1), \"getClassNames\", function() {\n            var e1 = t1.props, n1 = e1.selectingDate, o1 = e1.selectsStart, a1 = e1.selectsEnd, s1 = e1.showMonthYearPicker, i1 = e1.showQuarterYearPicker, p1 = e1.showWeekPicker;\n            return r(\"react-datepicker__month\", {\n                \"react-datepicker__month--selecting-range\": n1 && (o1 || a1)\n            }, {\n                \"react-datepicker__monthPicker\": s1\n            }, {\n                \"react-datepicker__quarterPicker\": i1\n            }, {\n                \"react-datepicker__weekPicker\": p1\n            });\n        }), t1;\n    }\n    return fe(o1, [\n        {\n            key: \"render\",\n            value: function() {\n                var t1 = this.props, r1 = t1.showMonthYearPicker, n1 = t1.showQuarterYearPicker, o1 = t1.day, a1 = t1.ariaLabelPrefix, s1 = void 0 === a1 ? \"month \" : a1;\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: this.getClassNames(),\n                    onMouseLeave: this.handleMouseLeave,\n                    \"aria-label\": \"\".concat(s1, \" \").concat(Ie(o1, \"yyyy-MM\")),\n                    role: \"listbox\"\n                }, r1 ? this.renderMonths() : n1 ? this.renderQuarters() : this.renderWeeks());\n            }\n        }\n    ]), o1;\n}(), Kt = function(t1) {\n    De(n1, (react__WEBPACK_IMPORTED_MODULE_1___default().Component));\n    var r1 = be(n1);\n    function n1() {\n        var t1;\n        he(this, n1);\n        for(var o1 = arguments.length, a1 = new Array(o1), i1 = 0; i1 < o1; i1++)a1[i1] = arguments[i1];\n        return ye(we(t1 = r1.call.apply(r1, [\n            this\n        ].concat(a1))), \"state\", {\n            height: null\n        }), ye(we(t1), \"scrollToTheSelectedTime\", function() {\n            requestAnimationFrame(function() {\n                t1.list && (t1.list.scrollTop = t1.centerLi && n1.calcCenterPosition(t1.props.monthRef ? t1.props.monthRef.clientHeight - t1.header.clientHeight : t1.list.clientHeight, t1.centerLi));\n            });\n        }), ye(we(t1), \"handleClick\", function(e1) {\n            (t1.props.minTime || t1.props.maxTime) && lt(e1, t1.props) || (t1.props.excludeTimes || t1.props.includeTimes || t1.props.filterTime) && ct(e1, t1.props) || t1.props.onChange(e1);\n        }), ye(we(t1), \"isSelectedTime\", function(e1) {\n            return t1.props.selected && (r1 = t1.props.selected, n1 = e1, bt(r1).getTime() === bt(n1).getTime());\n            var r1, n1;\n        }), ye(we(t1), \"isDisabledTime\", function(e1) {\n            return (t1.props.minTime || t1.props.maxTime) && lt(e1, t1.props) || (t1.props.excludeTimes || t1.props.includeTimes || t1.props.filterTime) && ct(e1, t1.props);\n        }), ye(we(t1), \"liClasses\", function(e1) {\n            var r1 = [\n                \"react-datepicker__time-list-item\",\n                t1.props.timeClassName ? t1.props.timeClassName(e1) : void 0\n            ];\n            return t1.isSelectedTime(e1) && r1.push(\"react-datepicker__time-list-item--selected\"), t1.isDisabledTime(e1) && r1.push(\"react-datepicker__time-list-item--disabled\"), t1.props.injectTimes && (60 * getHours(e1) + getMinutes(e1)) % t1.props.intervals != 0 && r1.push(\"react-datepicker__time-list-item--injected\"), r1.join(\" \");\n        }), ye(we(t1), \"handleOnKeyDown\", function(e1, r1) {\n            \" \" === e1.key && (e1.preventDefault(), e1.key = \"Enter\"), \"ArrowUp\" !== e1.key && \"ArrowLeft\" !== e1.key || !e1.target.previousSibling || (e1.preventDefault(), e1.target.previousSibling.focus()), \"ArrowDown\" !== e1.key && \"ArrowRight\" !== e1.key || !e1.target.nextSibling || (e1.preventDefault(), e1.target.nextSibling.focus()), \"Enter\" === e1.key && t1.handleClick(r1), t1.props.handleOnKeyDown(e1);\n        }), ye(we(t1), \"renderTimes\", function() {\n            for(var r1 = [], n1 = t1.props.format ? t1.props.format : \"p\", o1 = t1.props.intervals, a1 = t1.props.selected || t1.props.openToDate || Ye(), i1 = startOfDay(a1), p1 = t1.props.injectTimes && t1.props.injectTimes.sort(function(e1, t1) {\n                return e1 - t1;\n            }), c1 = 60 * function(e1) {\n                var t1 = new Date(e1.getFullYear(), e1.getMonth(), e1.getDate()), r1 = new Date(e1.getFullYear(), e1.getMonth(), e1.getDate(), 24);\n                return Math.round((+r1 - +t1) / 36e5);\n            }(a1), l1 = c1 / o1, d1 = 0; d1 < l1; d1++){\n                var u1 = addMinutes(i1, d1 * o1);\n                if (r1.push(u1), p1) {\n                    var h1 = gt(i1, u1, d1, o1, p1);\n                    r1 = r1.concat(h1);\n                }\n            }\n            var m1 = r1.reduce(function(e1, t1) {\n                return t1.getTime() <= a1.getTime() ? t1 : e1;\n            }, r1[0]);\n            return r1.map(function(r1, o1) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"li\", {\n                    key: o1,\n                    onClick: t1.handleClick.bind(we(t1), r1),\n                    className: t1.liClasses(r1),\n                    ref: function(e1) {\n                        r1 === m1 && (t1.centerLi = e1);\n                    },\n                    onKeyDown: function(e1) {\n                        t1.handleOnKeyDown(e1, r1);\n                    },\n                    tabIndex: r1 === m1 ? 0 : -1,\n                    role: \"option\",\n                    \"aria-selected\": t1.isSelectedTime(r1) ? \"true\" : void 0,\n                    \"aria-disabled\": t1.isDisabledTime(r1) ? \"true\" : void 0\n                }, Ie(r1, n1, t1.props.locale));\n            });\n        }), t1;\n    }\n    return fe(n1, [\n        {\n            key: \"componentDidMount\",\n            value: function() {\n                this.scrollToTheSelectedTime(), this.props.monthRef && this.header && this.setState({\n                    height: this.props.monthRef.clientHeight - this.header.clientHeight\n                });\n            }\n        },\n        {\n            key: \"render\",\n            value: function() {\n                var t1 = this, r1 = this.state.height;\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker__time-container \".concat(this.props.todayButton ? \"react-datepicker__time-container--with-today-button\" : \"\")\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker__header react-datepicker__header--time \".concat(this.props.showTimeSelectOnly ? \"react-datepicker__header--time--only\" : \"\"),\n                    ref: function(e1) {\n                        t1.header = e1;\n                    }\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker-time__header\"\n                }, this.props.timeCaption)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker__time\"\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker__time-box\"\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"ul\", {\n                    className: \"react-datepicker__time-list\",\n                    ref: function(e1) {\n                        t1.list = e1;\n                    },\n                    style: r1 ? {\n                        height: r1\n                    } : {},\n                    role: \"listbox\",\n                    \"aria-label\": this.props.timeCaption\n                }, this.renderTimes()))));\n            }\n        }\n    ], [\n        {\n            key: \"defaultProps\",\n            get: function() {\n                return {\n                    intervals: 30,\n                    onTimeChange: function() {},\n                    todayButton: null,\n                    timeCaption: \"Time\"\n                };\n            }\n        }\n    ]), n1;\n}();\nye(Kt, \"calcCenterPosition\", function(e1, t1) {\n    return t1.offsetTop - (e1 / 2 - t1.clientHeight / 2);\n});\nvar Bt = function(t1) {\n    De(o1, (react__WEBPACK_IMPORTED_MODULE_1___default().Component));\n    var n1 = be(o1);\n    function o1(t1) {\n        var a1;\n        return he(this, o1), ye(we(a1 = n1.call(this, t1)), \"YEAR_REFS\", Se(Array(a1.props.yearItemNumber)).map(function() {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createRef();\n        })), ye(we(a1), \"isDisabled\", function(e1) {\n            return Ze(e1, a1.props);\n        }), ye(we(a1), \"isExcluded\", function(e1) {\n            return et(e1, a1.props);\n        }), ye(we(a1), \"selectingDate\", function() {\n            var e1;\n            return null !== (e1 = a1.props.selectingDate) && void 0 !== e1 ? e1 : a1.props.preSelection;\n        }), ye(we(a1), \"updateFocusOnPaginate\", function(e1) {\n            var t1 = (function() {\n                this.YEAR_REFS[e1].current.focus();\n            }).bind(we(a1));\n            window.requestAnimationFrame(t1);\n        }), ye(we(a1), \"handleYearClick\", function(e1, t1) {\n            a1.props.onDayClick && a1.props.onDayClick(e1, t1);\n        }), ye(we(a1), \"handleYearNavigation\", function(e1, t1) {\n            var r1 = a1.props, n1 = r1.date, o1 = r1.yearItemNumber, s1 = wt(n1, o1).startPeriod;\n            a1.isDisabled(t1) || a1.isExcluded(t1) || (a1.props.setPreSelection(t1), e1 - s1 == -1 ? a1.updateFocusOnPaginate(o1 - 1) : e1 - s1 === o1 ? a1.updateFocusOnPaginate(0) : a1.YEAR_REFS[e1 - s1].current.focus());\n        }), ye(we(a1), \"isSameDay\", function(e1, t1) {\n            return je(e1, t1);\n        }), ye(we(a1), \"isCurrentYear\", function(e1) {\n            return e1 === getYear(Ye());\n        }), ye(we(a1), \"isRangeStart\", function(e1) {\n            return a1.props.startDate && a1.props.endDate && Be(setYear(Ye(), e1), a1.props.startDate);\n        }), ye(we(a1), \"isRangeEnd\", function(e1) {\n            return a1.props.startDate && a1.props.endDate && Be(setYear(Ye(), e1), a1.props.endDate);\n        }), ye(we(a1), \"isInRange\", function(e1) {\n            return ot(e1, a1.props.startDate, a1.props.endDate);\n        }), ye(we(a1), \"isInSelectingRange\", function(e1) {\n            var t1 = a1.props, r1 = t1.selectsStart, n1 = t1.selectsEnd, o1 = t1.selectsRange, s1 = t1.startDate, i1 = t1.endDate;\n            return !(!(r1 || n1 || o1) || !a1.selectingDate()) && (r1 && i1 ? ot(e1, a1.selectingDate(), i1) : (n1 && s1 || !(!o1 || !s1 || i1)) && ot(e1, s1, a1.selectingDate()));\n        }), ye(we(a1), \"isSelectingRangeStart\", function(e1) {\n            if (!a1.isInSelectingRange(e1)) return false;\n            var t1 = a1.props, r1 = t1.startDate, n1 = t1.selectsStart, o1 = setYear(Ye(), e1);\n            return Be(o1, n1 ? a1.selectingDate() : r1);\n        }), ye(we(a1), \"isSelectingRangeEnd\", function(e1) {\n            if (!a1.isInSelectingRange(e1)) return false;\n            var t1 = a1.props, r1 = t1.endDate, n1 = t1.selectsEnd, o1 = t1.selectsRange, s1 = setYear(Ye(), e1);\n            return Be(s1, n1 || o1 ? a1.selectingDate() : r1);\n        }), ye(we(a1), \"isKeyboardSelected\", function(e1) {\n            var t1 = Ae(setYear(a1.props.date, e1));\n            return !a1.props.disabledKeyboardNavigation && !a1.props.inline && !je(t1, Ae(a1.props.selected)) && je(t1, Ae(a1.props.preSelection));\n        }), ye(we(a1), \"onYearClick\", function(e1, t1) {\n            var r1 = a1.props.date;\n            a1.handleYearClick(Ae(setYear(r1, t1)), e1);\n        }), ye(we(a1), \"onYearKeyDown\", function(e1, t1) {\n            var r1 = e1.key;\n            if (!a1.props.disabledKeyboardNavigation) switch(r1){\n                case \"Enter\":\n                    a1.onYearClick(e1, t1), a1.props.setPreSelection(a1.props.selected);\n                    break;\n                case \"ArrowRight\":\n                    a1.handleYearNavigation(t1 + 1, addYears(a1.props.preSelection, 1));\n                    break;\n                case \"ArrowLeft\":\n                    a1.handleYearNavigation(t1 - 1, subYears(a1.props.preSelection, 1));\n            }\n        }), ye(we(a1), \"getYearClassNames\", function(e1) {\n            var t1 = a1.props, n1 = t1.minDate, o1 = t1.maxDate, s1 = t1.selected, i1 = t1.excludeDates, p1 = t1.includeDates, c1 = t1.filterDate;\n            return r(\"react-datepicker__year-text\", {\n                \"react-datepicker__year-text--selected\": e1 === getYear(s1),\n                \"react-datepicker__year-text--disabled\": (n1 || o1 || i1 || p1 || c1) && at(e1, a1.props),\n                \"react-datepicker__year-text--keyboard-selected\": a1.isKeyboardSelected(e1),\n                \"react-datepicker__year-text--range-start\": a1.isRangeStart(e1),\n                \"react-datepicker__year-text--range-end\": a1.isRangeEnd(e1),\n                \"react-datepicker__year-text--in-range\": a1.isInRange(e1),\n                \"react-datepicker__year-text--in-selecting-range\": a1.isInSelectingRange(e1),\n                \"react-datepicker__year-text--selecting-range-start\": a1.isSelectingRangeStart(e1),\n                \"react-datepicker__year-text--selecting-range-end\": a1.isSelectingRangeEnd(e1),\n                \"react-datepicker__year-text--today\": a1.isCurrentYear(e1)\n            });\n        }), ye(we(a1), \"getYearTabIndex\", function(e1) {\n            return a1.props.disabledKeyboardNavigation ? \"-1\" : e1 === getYear(a1.props.preSelection) ? \"0\" : \"-1\";\n        }), ye(we(a1), \"getYearContainerClassNames\", function() {\n            var e1 = a1.props, t1 = e1.selectingDate, n1 = e1.selectsStart, o1 = e1.selectsEnd, s1 = e1.selectsRange;\n            return r(\"react-datepicker__year\", {\n                \"react-datepicker__year--selecting-range\": t1 && (n1 || o1 || s1)\n            });\n        }), ye(we(a1), \"getYearContent\", function(e1) {\n            return a1.props.renderYearContent ? a1.props.renderYearContent(e1) : e1;\n        }), a1;\n    }\n    return fe(o1, [\n        {\n            key: \"render\",\n            value: function() {\n                for(var t1 = this, r1 = [], n1 = this.props, o1 = n1.date, a1 = n1.yearItemNumber, s1 = n1.onYearMouseEnter, i1 = n1.onYearMouseLeave, p1 = wt(o1, a1), c1 = p1.startPeriod, l1 = p1.endPeriod, d1 = function(n1) {\n                    r1.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                        ref: t1.YEAR_REFS[n1 - c1],\n                        onClick: function(e1) {\n                            t1.onYearClick(e1, n1);\n                        },\n                        onKeyDown: function(e1) {\n                            t1.onYearKeyDown(e1, n1);\n                        },\n                        tabIndex: t1.getYearTabIndex(n1),\n                        className: t1.getYearClassNames(n1),\n                        onMouseEnter: function(e1) {\n                            return s1(e1, n1);\n                        },\n                        onMouseLeave: function(e1) {\n                            return i1(e1, n1);\n                        },\n                        key: n1,\n                        \"aria-current\": t1.isCurrentYear(n1) ? \"date\" : void 0\n                    }, t1.getYearContent(n1)));\n                }, u1 = c1; u1 <= l1; u1++)d1(u1);\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: this.getYearContainerClassNames()\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker__year-wrapper\",\n                    onMouseLeave: this.props.clearSelectingDate\n                }, r1));\n            }\n        }\n    ]), o1;\n}(), Qt = function(t1) {\n    De(n1, (react__WEBPACK_IMPORTED_MODULE_1___default().Component));\n    var r1 = be(n1);\n    function n1(t1) {\n        var o1;\n        return he(this, n1), ye(we(o1 = r1.call(this, t1)), \"onTimeChange\", function(e1) {\n            o1.setState({\n                time: e1\n            });\n            var t1 = o1.props.date, r1 = t1 instanceof Date && !isNaN(t1) ? t1 : new Date;\n            r1.setHours(e1.split(\":\")[0]), r1.setMinutes(e1.split(\":\")[1]), o1.props.onChange(r1);\n        }), ye(we(o1), \"renderTimeInput\", function() {\n            var t1 = o1.state.time, r1 = o1.props, n1 = r1.date, a1 = r1.timeString, s1 = r1.customTimeInput;\n            return s1 ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().cloneElement(s1, {\n                date: n1,\n                value: t1,\n                onChange: o1.onTimeChange\n            }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"input\", {\n                type: \"time\",\n                className: \"react-datepicker-time__input\",\n                placeholder: \"Time\",\n                name: \"time-input\",\n                required: true,\n                value: t1,\n                onChange: function(e1) {\n                    o1.onTimeChange(e1.target.value || a1);\n                }\n            });\n        }), o1.state = {\n            time: o1.props.timeString\n        }, o1;\n    }\n    return fe(n1, [\n        {\n            key: \"render\",\n            value: function() {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker__input-time-container\"\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker-time__caption\"\n                }, this.props.timeInputLabel), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker-time__input-container\"\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker-time__input\"\n                }, this.renderTimeInput())));\n            }\n        }\n    ], [\n        {\n            key: \"getDerivedStateFromProps\",\n            value: function(e1, t1) {\n                return e1.timeString !== t1.time ? {\n                    time: e1.timeString\n                } : null;\n            }\n        }\n    ]), n1;\n}();\nfunction Ht(t1) {\n    var r1 = t1.className, n1 = t1.children, o1 = t1.showPopperArrow, a1 = t1.arrowProps, s1 = void 0 === a1 ? {} : a1;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: r1\n    }, o1 && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", ve({\n        className: \"react-datepicker__triangle\"\n    }, s1)), n1);\n}\nvar jt = [\n    \"react-datepicker__year-select\",\n    \"react-datepicker__month-select\",\n    \"react-datepicker__month-year-select\"\n], Vt = function(t1) {\n    De(o1, (react__WEBPACK_IMPORTED_MODULE_1___default().Component));\n    var n1 = be(o1);\n    function o1(t1) {\n        var a1;\n        return he(this, o1), ye(we(a1 = n1.call(this, t1)), \"handleClickOutside\", function(e1) {\n            a1.props.onClickOutside(e1);\n        }), ye(we(a1), \"setClickOutsideRef\", function() {\n            return a1.containerRef.current;\n        }), ye(we(a1), \"handleDropdownFocus\", function(e1) {\n            (function() {\n                var e1 = ((arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).className || \"\").split(/\\s+/);\n                return jt.some(function(t1) {\n                    return e1.indexOf(t1) >= 0;\n                });\n            })(e1.target) && a1.props.onDropdownFocus();\n        }), ye(we(a1), \"getDateInView\", function() {\n            var e1 = a1.props, t1 = e1.preSelection, r1 = e1.selected, n1 = e1.openToDate, o1 = ft(a1.props), s1 = yt(a1.props), i1 = Ye(), p1 = n1 || r1 || t1;\n            return p1 || (o1 && isBefore(i1, o1) ? o1 : s1 && isAfter(i1, s1) ? s1 : i1);\n        }), ye(we(a1), \"increaseMonth\", function() {\n            a1.setState(function(e1) {\n                var t1 = e1.date;\n                return {\n                    date: addMonths(t1, 1)\n                };\n            }, function() {\n                return a1.handleMonthChange(a1.state.date);\n            });\n        }), ye(we(a1), \"decreaseMonth\", function() {\n            a1.setState(function(e1) {\n                var t1 = e1.date;\n                return {\n                    date: subMonths(t1, 1)\n                };\n            }, function() {\n                return a1.handleMonthChange(a1.state.date);\n            });\n        }), ye(we(a1), \"handleDayClick\", function(e1, t1, r1) {\n            a1.props.onSelect(e1, t1, r1), a1.props.setPreSelection && a1.props.setPreSelection(e1);\n        }), ye(we(a1), \"handleDayMouseEnter\", function(e1) {\n            a1.setState({\n                selectingDate: e1\n            }), a1.props.onDayMouseEnter && a1.props.onDayMouseEnter(e1);\n        }), ye(we(a1), \"handleMonthMouseLeave\", function() {\n            a1.setState({\n                selectingDate: null\n            }), a1.props.onMonthMouseLeave && a1.props.onMonthMouseLeave();\n        }), ye(we(a1), \"handleYearMouseEnter\", function(e1, t1) {\n            a1.setState({\n                selectingDate: setYear(Ye(), t1)\n            }), a1.props.onYearMouseEnter && a1.props.onYearMouseEnter(e1, t1);\n        }), ye(we(a1), \"handleYearMouseLeave\", function(e1, t1) {\n            a1.props.onYearMouseLeave && a1.props.onYearMouseLeave(e1, t1);\n        }), ye(we(a1), \"handleYearChange\", function(e1) {\n            a1.props.onYearChange && (a1.props.onYearChange(e1), a1.setState({\n                isRenderAriaLiveMessage: true\n            })), a1.props.adjustDateOnChange && (a1.props.onSelect && a1.props.onSelect(e1), a1.props.setOpen && a1.props.setOpen(true)), a1.props.setPreSelection && a1.props.setPreSelection(e1);\n        }), ye(we(a1), \"handleMonthChange\", function(e1) {\n            a1.handleCustomMonthChange(e1), a1.props.adjustDateOnChange && (a1.props.onSelect && a1.props.onSelect(e1), a1.props.setOpen && a1.props.setOpen(true)), a1.props.setPreSelection && a1.props.setPreSelection(e1);\n        }), ye(we(a1), \"handleCustomMonthChange\", function(e1) {\n            a1.props.onMonthChange && (a1.props.onMonthChange(e1), a1.setState({\n                isRenderAriaLiveMessage: true\n            }));\n        }), ye(we(a1), \"handleMonthYearChange\", function(e1) {\n            a1.handleYearChange(e1), a1.handleMonthChange(e1);\n        }), ye(we(a1), \"changeYear\", function(e1) {\n            a1.setState(function(t1) {\n                var r1 = t1.date;\n                return {\n                    date: setYear(r1, e1)\n                };\n            }, function() {\n                return a1.handleYearChange(a1.state.date);\n            });\n        }), ye(we(a1), \"changeMonth\", function(e1) {\n            a1.setState(function(t1) {\n                var r1 = t1.date;\n                return {\n                    date: setMonth(r1, e1)\n                };\n            }, function() {\n                return a1.handleMonthChange(a1.state.date);\n            });\n        }), ye(we(a1), \"changeMonthYear\", function(e1) {\n            a1.setState(function(t1) {\n                var r1 = t1.date;\n                return {\n                    date: setYear(setMonth(r1, getMonth(e1)), getYear(e1))\n                };\n            }, function() {\n                return a1.handleMonthYearChange(a1.state.date);\n            });\n        }), ye(we(a1), \"header\", function() {\n            var t1 = Le(arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : a1.state.date, a1.props.locale, a1.props.calendarStartDay), n1 = [];\n            return a1.props.showWeekNumbers && n1.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                key: \"W\",\n                className: \"react-datepicker__day-name\"\n            }, a1.props.weekLabel || \"#\")), n1.concat([\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6\n            ].map(function(n1) {\n                var o1 = addDays(t1, n1), s1 = a1.formatWeekday(o1, a1.props.locale), i1 = a1.props.weekDayClassName ? a1.props.weekDayClassName(o1) : void 0;\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    key: n1,\n                    className: r(\"react-datepicker__day-name\", i1)\n                }, s1);\n            }));\n        }), ye(we(a1), \"formatWeekday\", function(e1, t1) {\n            return a1.props.formatWeekDay ? function(e1, t1, r1) {\n                return t1(Ie(e1, \"EEEE\", r1));\n            }(e1, a1.props.formatWeekDay, t1) : a1.props.useWeekdaysShort ? function(e1, t1) {\n                return Ie(e1, \"EEE\", t1);\n            }(e1, t1) : function(e1, t1) {\n                return Ie(e1, \"EEEEEE\", t1);\n            }(e1, t1);\n        }), ye(we(a1), \"decreaseYear\", function() {\n            a1.setState(function(e1) {\n                var t1 = e1.date;\n                return {\n                    date: subYears(t1, a1.props.showYearPicker ? a1.props.yearItemNumber : 1)\n                };\n            }, function() {\n                return a1.handleYearChange(a1.state.date);\n            });\n        }), ye(we(a1), \"clearSelectingDate\", function() {\n            a1.setState({\n                selectingDate: null\n            });\n        }), ye(we(a1), \"renderPreviousButton\", function() {\n            if (!a1.props.renderCustomHeader) {\n                var t1;\n                switch(true){\n                    case a1.props.showMonthYearPicker:\n                        t1 = ht(a1.state.date, a1.props);\n                        break;\n                    case a1.props.showYearPicker:\n                        t1 = function(e1) {\n                            var t1 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r1 = t1.minDate, n1 = t1.yearItemNumber, o1 = void 0 === n1 ? Ne : n1, a1 = wt(Ae(subYears(e1, o1)), o1).endPeriod, s1 = r1 && getYear(r1);\n                            return s1 && s1 > a1 || false;\n                        }(a1.state.date, a1.props);\n                        break;\n                    default:\n                        t1 = dt(a1.state.date, a1.props);\n                }\n                if ((a1.props.forceShowMonthNavigation || a1.props.showDisabledMonthNavigation || !t1) && !a1.props.showTimeSelectOnly) {\n                    var r1 = [\n                        \"react-datepicker__navigation\",\n                        \"react-datepicker__navigation--previous\"\n                    ], n1 = a1.decreaseMonth;\n                    (a1.props.showMonthYearPicker || a1.props.showQuarterYearPicker || a1.props.showYearPicker) && (n1 = a1.decreaseYear), t1 && a1.props.showDisabledMonthNavigation && (r1.push(\"react-datepicker__navigation--previous--disabled\"), n1 = null);\n                    var o1 = a1.props.showMonthYearPicker || a1.props.showQuarterYearPicker || a1.props.showYearPicker, s1 = a1.props, i1 = s1.previousMonthButtonLabel, p1 = s1.previousYearButtonLabel, c1 = a1.props, l1 = c1.previousMonthAriaLabel, d1 = void 0 === l1 ? \"string\" == typeof i1 ? i1 : \"Previous Month\" : l1, u1 = c1.previousYearAriaLabel, h1 = void 0 === u1 ? \"string\" == typeof p1 ? p1 : \"Previous Year\" : u1;\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"button\", {\n                        type: \"button\",\n                        className: r1.join(\" \"),\n                        onClick: n1,\n                        onKeyDown: a1.props.handleOnKeyDown,\n                        \"aria-label\": o1 ? h1 : d1\n                    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                        className: [\n                            \"react-datepicker__navigation-icon\",\n                            \"react-datepicker__navigation-icon--previous\"\n                        ].join(\" \")\n                    }, o1 ? a1.props.previousYearButtonLabel : a1.props.previousMonthButtonLabel));\n                }\n            }\n        }), ye(we(a1), \"increaseYear\", function() {\n            a1.setState(function(e1) {\n                var t1 = e1.date;\n                return {\n                    date: addYears(t1, a1.props.showYearPicker ? a1.props.yearItemNumber : 1)\n                };\n            }, function() {\n                return a1.handleYearChange(a1.state.date);\n            });\n        }), ye(we(a1), \"renderNextButton\", function() {\n            if (!a1.props.renderCustomHeader) {\n                var t1;\n                switch(true){\n                    case a1.props.showMonthYearPicker:\n                        t1 = mt(a1.state.date, a1.props);\n                        break;\n                    case a1.props.showYearPicker:\n                        t1 = function(e1) {\n                            var t1 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r1 = t1.maxDate, n1 = t1.yearItemNumber, o1 = void 0 === n1 ? Ne : n1, a1 = wt(addYears(e1, o1), o1).startPeriod, s1 = r1 && getYear(r1);\n                            return s1 && s1 < a1 || false;\n                        }(a1.state.date, a1.props);\n                        break;\n                    default:\n                        t1 = ut(a1.state.date, a1.props);\n                }\n                if ((a1.props.forceShowMonthNavigation || a1.props.showDisabledMonthNavigation || !t1) && !a1.props.showTimeSelectOnly) {\n                    var r1 = [\n                        \"react-datepicker__navigation\",\n                        \"react-datepicker__navigation--next\"\n                    ];\n                    a1.props.showTimeSelect && r1.push(\"react-datepicker__navigation--next--with-time\"), a1.props.todayButton && r1.push(\"react-datepicker__navigation--next--with-today-button\");\n                    var n1 = a1.increaseMonth;\n                    (a1.props.showMonthYearPicker || a1.props.showQuarterYearPicker || a1.props.showYearPicker) && (n1 = a1.increaseYear), t1 && a1.props.showDisabledMonthNavigation && (r1.push(\"react-datepicker__navigation--next--disabled\"), n1 = null);\n                    var o1 = a1.props.showMonthYearPicker || a1.props.showQuarterYearPicker || a1.props.showYearPicker, s1 = a1.props, i1 = s1.nextMonthButtonLabel, p1 = s1.nextYearButtonLabel, c1 = a1.props, l1 = c1.nextMonthAriaLabel, d1 = void 0 === l1 ? \"string\" == typeof i1 ? i1 : \"Next Month\" : l1, h1 = c1.nextYearAriaLabel, m1 = void 0 === h1 ? \"string\" == typeof p1 ? p1 : \"Next Year\" : h1;\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"button\", {\n                        type: \"button\",\n                        className: r1.join(\" \"),\n                        onClick: n1,\n                        onKeyDown: a1.props.handleOnKeyDown,\n                        \"aria-label\": o1 ? m1 : d1\n                    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                        className: [\n                            \"react-datepicker__navigation-icon\",\n                            \"react-datepicker__navigation-icon--next\"\n                        ].join(\" \")\n                    }, o1 ? a1.props.nextYearButtonLabel : a1.props.nextMonthButtonLabel));\n                }\n            }\n        }), ye(we(a1), \"renderCurrentMonth\", function() {\n            var t1 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : a1.state.date, r1 = [\n                \"react-datepicker__current-month\"\n            ];\n            return a1.props.showYearDropdown && r1.push(\"react-datepicker__current-month--hasYearDropdown\"), a1.props.showMonthDropdown && r1.push(\"react-datepicker__current-month--hasMonthDropdown\"), a1.props.showMonthYearDropdown && r1.push(\"react-datepicker__current-month--hasMonthYearDropdown\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: r1.join(\" \")\n            }, Ie(t1, a1.props.dateFormat, a1.props.locale));\n        }), ye(we(a1), \"renderYearDropdown\", function() {\n            var t1 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n            if (a1.props.showYearDropdown && !t1) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_t, {\n                adjustDateOnChange: a1.props.adjustDateOnChange,\n                date: a1.state.date,\n                onSelect: a1.props.onSelect,\n                setOpen: a1.props.setOpen,\n                dropdownMode: a1.props.dropdownMode,\n                onChange: a1.changeYear,\n                minDate: a1.props.minDate,\n                maxDate: a1.props.maxDate,\n                year: getYear(a1.state.date),\n                scrollableYearDropdown: a1.props.scrollableYearDropdown,\n                yearDropdownItemNumber: a1.props.yearDropdownItemNumber\n            });\n        }), ye(we(a1), \"renderMonthDropdown\", function() {\n            var t1 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n            if (a1.props.showMonthDropdown && !t1) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Pt, {\n                dropdownMode: a1.props.dropdownMode,\n                locale: a1.props.locale,\n                onChange: a1.changeMonth,\n                month: getMonth(a1.state.date),\n                useShortMonthInDropdown: a1.props.useShortMonthInDropdown\n            });\n        }), ye(we(a1), \"renderMonthYearDropdown\", function() {\n            var t1 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n            if (a1.props.showMonthYearDropdown && !t1) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(xt, {\n                dropdownMode: a1.props.dropdownMode,\n                locale: a1.props.locale,\n                dateFormat: a1.props.dateFormat,\n                onChange: a1.changeMonthYear,\n                minDate: a1.props.minDate,\n                maxDate: a1.props.maxDate,\n                date: a1.state.date,\n                scrollableMonthYearDropdown: a1.props.scrollableMonthYearDropdown\n            });\n        }), ye(we(a1), \"handleTodayButtonClick\", function(e1) {\n            a1.props.onSelect(Ke(), e1), a1.props.setPreSelection && a1.props.setPreSelection(Ke());\n        }), ye(we(a1), \"renderTodayButton\", function() {\n            if (a1.props.todayButton && !a1.props.showTimeSelectOnly) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"react-datepicker__today-button\",\n                onClick: function(e1) {\n                    return a1.handleTodayButtonClick(e1);\n                }\n            }, a1.props.todayButton);\n        }), ye(we(a1), \"renderDefaultHeader\", function(t1) {\n            var r1 = t1.monthDate, n1 = t1.i;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"react-datepicker__header \".concat(a1.props.showTimeSelect ? \"react-datepicker__header--has-time-select\" : \"\")\n            }, a1.renderCurrentMonth(r1), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"react-datepicker__header__dropdown react-datepicker__header__dropdown--\".concat(a1.props.dropdownMode),\n                onFocus: a1.handleDropdownFocus\n            }, a1.renderMonthDropdown(0 !== n1), a1.renderMonthYearDropdown(0 !== n1), a1.renderYearDropdown(0 !== n1)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"react-datepicker__day-names\"\n            }, a1.header(r1)));\n        }), ye(we(a1), \"renderCustomHeader\", function() {\n            var t1 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r1 = t1.monthDate, n1 = t1.i;\n            if (a1.props.showTimeSelect && !a1.state.monthContainer || a1.props.showTimeSelectOnly) return null;\n            var o1 = dt(a1.state.date, a1.props), s1 = ut(a1.state.date, a1.props), i1 = ht(a1.state.date, a1.props), p1 = mt(a1.state.date, a1.props), c1 = !a1.props.showMonthYearPicker && !a1.props.showQuarterYearPicker && !a1.props.showYearPicker;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"react-datepicker__header react-datepicker__header--custom\",\n                onFocus: a1.props.onDropdownFocus\n            }, a1.props.renderCustomHeader(de(de({}, a1.state), {}, {\n                customHeaderCount: n1,\n                monthDate: r1,\n                changeMonth: a1.changeMonth,\n                changeYear: a1.changeYear,\n                decreaseMonth: a1.decreaseMonth,\n                increaseMonth: a1.increaseMonth,\n                decreaseYear: a1.decreaseYear,\n                increaseYear: a1.increaseYear,\n                prevMonthButtonDisabled: o1,\n                nextMonthButtonDisabled: s1,\n                prevYearButtonDisabled: i1,\n                nextYearButtonDisabled: p1\n            })), c1 && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"react-datepicker__day-names\"\n            }, a1.header(r1)));\n        }), ye(we(a1), \"renderYearHeader\", function() {\n            var t1 = a1.state.date, r1 = a1.props, n1 = r1.showYearPicker, o1 = wt(t1, r1.yearItemNumber), s1 = o1.startPeriod, i1 = o1.endPeriod;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"react-datepicker__header react-datepicker-year-header\"\n            }, n1 ? \"\".concat(s1, \" - \").concat(i1) : getYear(t1));\n        }), ye(we(a1), \"renderHeader\", function(e1) {\n            switch(true){\n                case void 0 !== a1.props.renderCustomHeader:\n                    return a1.renderCustomHeader(e1);\n                case a1.props.showMonthYearPicker || a1.props.showQuarterYearPicker || a1.props.showYearPicker:\n                    return a1.renderYearHeader(e1);\n                default:\n                    return a1.renderDefaultHeader(e1);\n            }\n        }), ye(we(a1), \"renderMonths\", function() {\n            var t1;\n            if (!a1.props.showTimeSelectOnly && !a1.props.showYearPicker) {\n                for(var r1 = [], n1 = a1.props.showPreviousMonths ? a1.props.monthsShown - 1 : 0, o1 = subMonths(a1.state.date, n1), s1 = null !== (t1 = a1.props.monthSelectedIn) && void 0 !== t1 ? t1 : n1, i1 = 0; i1 < a1.props.monthsShown; ++i1){\n                    var p1 = addMonths(o1, i1 - s1 + n1), c1 = \"month-\".concat(i1), d1 = i1 < a1.props.monthsShown - 1, u1 = i1 > 0;\n                    r1.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                        key: c1,\n                        ref: function(e1) {\n                            a1.monthContainer = e1;\n                        },\n                        className: \"react-datepicker__month-container\"\n                    }, a1.renderHeader({\n                        monthDate: p1,\n                        i: i1\n                    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Wt, {\n                        chooseDayAriaLabelPrefix: a1.props.chooseDayAriaLabelPrefix,\n                        disabledDayAriaLabelPrefix: a1.props.disabledDayAriaLabelPrefix,\n                        weekAriaLabelPrefix: a1.props.weekAriaLabelPrefix,\n                        ariaLabelPrefix: a1.props.monthAriaLabelPrefix,\n                        onChange: a1.changeMonthYear,\n                        day: p1,\n                        dayClassName: a1.props.dayClassName,\n                        calendarStartDay: a1.props.calendarStartDay,\n                        monthClassName: a1.props.monthClassName,\n                        onDayClick: a1.handleDayClick,\n                        handleOnKeyDown: a1.props.handleOnDayKeyDown,\n                        onDayMouseEnter: a1.handleDayMouseEnter,\n                        onMouseLeave: a1.handleMonthMouseLeave,\n                        onWeekSelect: a1.props.onWeekSelect,\n                        orderInDisplay: i1,\n                        formatWeekNumber: a1.props.formatWeekNumber,\n                        locale: a1.props.locale,\n                        minDate: a1.props.minDate,\n                        maxDate: a1.props.maxDate,\n                        excludeDates: a1.props.excludeDates,\n                        excludeDateIntervals: a1.props.excludeDateIntervals,\n                        highlightDates: a1.props.highlightDates,\n                        holidays: a1.props.holidays,\n                        selectingDate: a1.state.selectingDate,\n                        includeDates: a1.props.includeDates,\n                        includeDateIntervals: a1.props.includeDateIntervals,\n                        inline: a1.props.inline,\n                        shouldFocusDayInline: a1.props.shouldFocusDayInline,\n                        fixedHeight: a1.props.fixedHeight,\n                        filterDate: a1.props.filterDate,\n                        preSelection: a1.props.preSelection,\n                        setPreSelection: a1.props.setPreSelection,\n                        selected: a1.props.selected,\n                        selectsStart: a1.props.selectsStart,\n                        selectsEnd: a1.props.selectsEnd,\n                        selectsRange: a1.props.selectsRange,\n                        selectsDisabledDaysInRange: a1.props.selectsDisabledDaysInRange,\n                        showWeekNumbers: a1.props.showWeekNumbers,\n                        startDate: a1.props.startDate,\n                        endDate: a1.props.endDate,\n                        peekNextMonth: a1.props.peekNextMonth,\n                        setOpen: a1.props.setOpen,\n                        shouldCloseOnSelect: a1.props.shouldCloseOnSelect,\n                        renderDayContents: a1.props.renderDayContents,\n                        renderMonthContent: a1.props.renderMonthContent,\n                        renderQuarterContent: a1.props.renderQuarterContent,\n                        renderYearContent: a1.props.renderYearContent,\n                        disabledKeyboardNavigation: a1.props.disabledKeyboardNavigation,\n                        showMonthYearPicker: a1.props.showMonthYearPicker,\n                        showFullMonthYearPicker: a1.props.showFullMonthYearPicker,\n                        showTwoColumnMonthYearPicker: a1.props.showTwoColumnMonthYearPicker,\n                        showFourColumnMonthYearPicker: a1.props.showFourColumnMonthYearPicker,\n                        showYearPicker: a1.props.showYearPicker,\n                        showQuarterYearPicker: a1.props.showQuarterYearPicker,\n                        showWeekPicker: a1.props.showWeekPicker,\n                        isInputFocused: a1.props.isInputFocused,\n                        containerRef: a1.containerRef,\n                        monthShowsDuplicateDaysEnd: d1,\n                        monthShowsDuplicateDaysStart: u1\n                    })));\n                }\n                return r1;\n            }\n        }), ye(we(a1), \"renderYears\", function() {\n            if (!a1.props.showTimeSelectOnly) return a1.props.showYearPicker ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"react-datepicker__year--container\"\n            }, a1.renderHeader(), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Bt, ve({\n                onDayClick: a1.handleDayClick,\n                selectingDate: a1.state.selectingDate,\n                clearSelectingDate: a1.clearSelectingDate,\n                date: a1.state.date\n            }, a1.props, {\n                onYearMouseEnter: a1.handleYearMouseEnter,\n                onYearMouseLeave: a1.handleYearMouseLeave\n            }))) : void 0;\n        }), ye(we(a1), \"renderTimeSection\", function() {\n            if (a1.props.showTimeSelect && (a1.state.monthContainer || a1.props.showTimeSelectOnly)) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Kt, {\n                selected: a1.props.selected,\n                openToDate: a1.props.openToDate,\n                onChange: a1.props.onTimeChange,\n                timeClassName: a1.props.timeClassName,\n                format: a1.props.timeFormat,\n                includeTimes: a1.props.includeTimes,\n                intervals: a1.props.timeIntervals,\n                minTime: a1.props.minTime,\n                maxTime: a1.props.maxTime,\n                excludeTimes: a1.props.excludeTimes,\n                filterTime: a1.props.filterTime,\n                timeCaption: a1.props.timeCaption,\n                todayButton: a1.props.todayButton,\n                showMonthDropdown: a1.props.showMonthDropdown,\n                showMonthYearDropdown: a1.props.showMonthYearDropdown,\n                showYearDropdown: a1.props.showYearDropdown,\n                withPortal: a1.props.withPortal,\n                monthRef: a1.state.monthContainer,\n                injectTimes: a1.props.injectTimes,\n                locale: a1.props.locale,\n                handleOnKeyDown: a1.props.handleOnKeyDown,\n                showTimeSelectOnly: a1.props.showTimeSelectOnly\n            });\n        }), ye(we(a1), \"renderInputTimeSection\", function() {\n            var t1 = new Date(a1.props.selected), r1 = Te(t1) && Boolean(a1.props.selected) ? \"\".concat(kt(t1.getHours()), \":\").concat(kt(t1.getMinutes())) : \"\";\n            if (a1.props.showTimeInput) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Qt, {\n                date: t1,\n                timeString: r1,\n                timeInputLabel: a1.props.timeInputLabel,\n                onChange: a1.props.onTimeChange,\n                customTimeInput: a1.props.customTimeInput\n            });\n        }), ye(we(a1), \"renderAriaLiveRegion\", function() {\n            var t1, r1 = wt(a1.state.date, a1.props.yearItemNumber), n1 = r1.startPeriod, o1 = r1.endPeriod;\n            return t1 = a1.props.showYearPicker ? \"\".concat(n1, \" - \").concat(o1) : a1.props.showMonthYearPicker || a1.props.showQuarterYearPicker ? getYear(a1.state.date) : \"\".concat(Je(getMonth(a1.state.date), a1.props.locale), \" \").concat(getYear(a1.state.date)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                role: \"alert\",\n                \"aria-live\": \"polite\",\n                className: \"react-datepicker__aria-live\"\n            }, a1.state.isRenderAriaLiveMessage && t1);\n        }), ye(we(a1), \"renderChildren\", function() {\n            if (a1.props.children) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"react-datepicker__children-container\"\n            }, a1.props.children);\n        }), a1.containerRef = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createRef(), a1.state = {\n            date: a1.getDateInView(),\n            selectingDate: null,\n            monthContainer: null,\n            isRenderAriaLiveMessage: false\n        }, a1;\n    }\n    return fe(o1, [\n        {\n            key: \"componentDidMount\",\n            value: function() {\n                var e1 = this;\n                this.props.showTimeSelect && (this.assignMonthContainer = void e1.setState({\n                    monthContainer: e1.monthContainer\n                }));\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function(e1) {\n                var t1 = this;\n                if (!this.props.preSelection || je(this.props.preSelection, e1.preSelection) && this.props.monthSelectedIn === e1.monthSelectedIn) this.props.openToDate && !je(this.props.openToDate, e1.openToDate) && this.setState({\n                    date: this.props.openToDate\n                });\n                else {\n                    var r1 = !Qe(this.state.date, this.props.preSelection);\n                    this.setState({\n                        date: this.props.preSelection\n                    }, function() {\n                        return r1 && t1.handleCustomMonthChange(t1.state.date);\n                    });\n                }\n            }\n        },\n        {\n            key: \"render\",\n            value: function() {\n                var t1 = this.props.container || Ht;\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    style: {\n                        display: \"contents\"\n                    },\n                    ref: this.containerRef\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(t1, {\n                    className: r(\"react-datepicker\", this.props.className, {\n                        \"react-datepicker--time-only\": this.props.showTimeSelectOnly\n                    }),\n                    showPopperArrow: this.props.showPopperArrow,\n                    arrowProps: this.props.arrowProps\n                }, this.renderAriaLiveRegion(), this.renderPreviousButton(), this.renderNextButton(), this.renderMonths(), this.renderYears(), this.renderTodayButton(), this.renderTimeSection(), this.renderInputTimeSection(), this.renderChildren()));\n            }\n        }\n    ], [\n        {\n            key: \"defaultProps\",\n            get: function() {\n                return {\n                    onDropdownFocus: function() {},\n                    monthsShown: 1,\n                    forceShowMonthNavigation: false,\n                    timeCaption: \"Time\",\n                    previousYearButtonLabel: \"Previous Year\",\n                    nextYearButtonLabel: \"Next Year\",\n                    previousMonthButtonLabel: \"Previous Month\",\n                    nextMonthButtonLabel: \"Next Month\",\n                    customTimeInput: null,\n                    yearItemNumber: Ne\n                };\n            }\n        }\n    ]), o1;\n}(), qt = function(t1) {\n    var r1 = t1.icon, n1 = t1.className, o1 = void 0 === n1 ? \"\" : n1, a1 = t1.onClick, s1 = \"react-datepicker__calendar-icon\";\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().isValidElement(r1) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().cloneElement(r1, {\n        className: \"\".concat(r1.props.className || \"\", \" \").concat(s1, \" \").concat(o1),\n        onClick: function(e1) {\n            \"function\" == typeof r1.props.onClick && r1.props.onClick(e1), \"function\" == typeof a1 && a1(e1);\n        }\n    }) : \"string\" == typeof r1 ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"i\", {\n        className: \"\".concat(s1, \" \").concat(r1, \" \").concat(o1),\n        \"aria-hidden\": \"true\",\n        onClick: a1\n    }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"svg\", {\n        className: \"\".concat(s1, \" \").concat(o1),\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 448 512\",\n        onClick: a1\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"path\", {\n        d: \"M96 32V64H48C21.5 64 0 85.5 0 112v48H448V112c0-26.5-21.5-48-48-48H352V32c0-17.7-14.3-32-32-32s-32 14.3-32 32V64H160V32c0-17.7-14.3-32-32-32S96 14.3 96 32zM448 192H0V464c0 26.5 21.5 48 48 48H400c26.5 0 48-21.5 48-48V192z\"\n    }));\n}, Ut = function(t1) {\n    De(n1, (react__WEBPACK_IMPORTED_MODULE_1___default().Component));\n    var r1 = be(n1);\n    function n1(e1) {\n        var t1;\n        return he(this, n1), (t1 = r1.call(this, e1)).el = document.createElement(\"div\"), t1;\n    }\n    return fe(n1, [\n        {\n            key: \"componentDidMount\",\n            value: function() {\n                this.portalRoot = (this.props.portalHost || document).getElementById(this.props.portalId), this.portalRoot || (this.portalRoot = document.createElement(\"div\"), this.portalRoot.setAttribute(\"id\", this.props.portalId), (this.props.portalHost || document.body).appendChild(this.portalRoot)), this.portalRoot.appendChild(this.el);\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function() {\n                this.portalRoot.removeChild(this.el);\n            }\n        },\n        {\n            key: \"render\",\n            value: function() {\n                return /*#__PURE__*/ react_dom__WEBPACK_IMPORTED_MODULE_2___default().createPortal(this.props.children, this.el);\n            }\n        }\n    ]), n1;\n}(), zt = function(e1) {\n    return !e1.disabled && -1 !== e1.tabIndex;\n}, $t = function(t1) {\n    De(n1, (react__WEBPACK_IMPORTED_MODULE_1___default().Component));\n    var r1 = be(n1);\n    function n1(t1) {\n        var o1;\n        return he(this, n1), ye(we(o1 = r1.call(this, t1)), \"getTabChildren\", function() {\n            return Array.prototype.slice.call(o1.tabLoopRef.current.querySelectorAll(\"[tabindex], a, button, input, select, textarea\"), 1, -1).filter(zt);\n        }), ye(we(o1), \"handleFocusStart\", function() {\n            var e1 = o1.getTabChildren();\n            e1 && e1.length > 1 && e1[e1.length - 1].focus();\n        }), ye(we(o1), \"handleFocusEnd\", function() {\n            var e1 = o1.getTabChildren();\n            e1 && e1.length > 1 && e1[0].focus();\n        }), o1.tabLoopRef = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createRef(), o1;\n    }\n    return fe(n1, [\n        {\n            key: \"render\",\n            value: function() {\n                return this.props.enableTabLoop ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker__tab-loop\",\n                    ref: this.tabLoopRef\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker__tab-loop__start\",\n                    tabIndex: \"0\",\n                    onFocus: this.handleFocusStart\n                }), this.props.children, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker__tab-loop__end\",\n                    tabIndex: \"0\",\n                    onFocus: this.handleFocusEnd\n                })) : this.props.children;\n            }\n        }\n    ], [\n        {\n            key: \"defaultProps\",\n            get: function() {\n                return {\n                    enableTabLoop: true\n                };\n            }\n        }\n    ]), n1;\n}(), Gt = function(t1) {\n    De(o1, (react__WEBPACK_IMPORTED_MODULE_1___default().Component));\n    var n1 = be(o1);\n    function o1() {\n        return he(this, o1), n1.apply(this, arguments);\n    }\n    return fe(o1, [\n        {\n            key: \"render\",\n            value: function() {\n                var t1, n1 = this.props, o1 = n1.className, a1 = n1.wrapperClassName, s1 = n1.hidePopper, i1 = n1.popperComponent, p1 = n1.popperModifiers, c1 = n1.popperPlacement, l1 = n1.popperProps, d1 = n1.targetComponent, u1 = n1.enableTabLoop, h1 = n1.popperOnKeyDown, m1 = n1.portalId, f1 = n1.portalHost;\n                if (!s1) {\n                    var y1 = r(\"react-datepicker-popper\", o1);\n                    t1 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Popper, ve({\n                        modifiers: p1,\n                        placement: c1\n                    }, l1), function(t1) {\n                        var r1 = t1.ref, n1 = t1.style, o1 = t1.placement, a1 = t1.arrowProps;\n                        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement($t, {\n                            enableTabLoop: u1\n                        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                            ref: r1,\n                            style: n1,\n                            className: y1,\n                            \"data-placement\": o1,\n                            onKeyDown: h1\n                        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().cloneElement(i1, {\n                            arrowProps: a1\n                        })));\n                    });\n                }\n                this.props.popperContainer && (t1 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(this.props.popperContainer, {}, t1)), m1 && !s1 && (t1 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Ut, {\n                    portalId: m1,\n                    portalHost: f1\n                }, t1));\n                var v1 = r(\"react-datepicker-wrapper\", a1);\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Manager, {\n                    className: \"react-datepicker-manager\"\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Reference, null, function(t1) {\n                    var r1 = t1.ref;\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                        ref: r1,\n                        className: v1\n                    }, d1);\n                }), t1);\n            }\n        }\n    ], [\n        {\n            key: \"defaultProps\",\n            get: function() {\n                return {\n                    hidePopper: true,\n                    popperModifiers: [],\n                    popperProps: {},\n                    popperPlacement: \"bottom-start\"\n                };\n            }\n        }\n    ]), o1;\n}(), Jt = \"react-datepicker-ignore-onclickoutside\", Xt = onClickOutsideHOC(Vt);\nvar Zt = \"Date input not valid.\", er = function(t1) {\n    De(s1, (react__WEBPACK_IMPORTED_MODULE_1___default().Component));\n    var a1 = be(s1);\n    function s1(t1) {\n        var i1;\n        return he(this, s1), ye(we(i1 = a1.call(this, t1)), \"getPreSelection\", function() {\n            return i1.props.openToDate ? i1.props.openToDate : i1.props.selectsEnd && i1.props.startDate ? i1.props.startDate : i1.props.selectsStart && i1.props.endDate ? i1.props.endDate : Ye();\n        }), ye(we(i1), \"modifyHolidays\", function() {\n            var e1;\n            return null === (e1 = i1.props.holidays) || void 0 === e1 ? void 0 : e1.reduce(function(e1, t1) {\n                var r1 = new Date(t1.date);\n                return isValid(r1) ? [].concat(Se(e1), [\n                    de(de({}, t1), {}, {\n                        date: r1\n                    })\n                ]) : e1;\n            }, []);\n        }), ye(we(i1), \"calcInitialState\", function() {\n            var e1, t1 = i1.getPreSelection(), r1 = ft(i1.props), n1 = yt(i1.props), o1 = r1 && isBefore(t1, startOfDay(r1)) ? r1 : n1 && isAfter(t1, endOfDay(n1)) ? n1 : t1;\n            return {\n                open: i1.props.startOpen || false,\n                preventFocus: false,\n                preSelection: null !== (e1 = i1.props.selectsRange ? i1.props.startDate : i1.props.selected) && void 0 !== e1 ? e1 : o1,\n                highlightDates: vt(i1.props.highlightDates),\n                focused: false,\n                shouldFocusDayInline: false,\n                isRenderAriaLiveMessage: false\n            };\n        }), ye(we(i1), \"clearPreventFocusTimeout\", function() {\n            i1.preventFocusTimeout && clearTimeout(i1.preventFocusTimeout);\n        }), ye(we(i1), \"setFocus\", function() {\n            i1.input && i1.input.focus && i1.input.focus({\n                preventScroll: true\n            });\n        }), ye(we(i1), \"setBlur\", function() {\n            i1.input && i1.input.blur && i1.input.blur(), i1.cancelFocusInput();\n        }), ye(we(i1), \"setOpen\", function(e1) {\n            var t1 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n            i1.setState({\n                open: e1,\n                preSelection: e1 && i1.state.open ? i1.state.preSelection : i1.calcInitialState().preSelection,\n                lastPreSelectChange: rr\n            }, function() {\n                e1 || i1.setState(function(e1) {\n                    return {\n                        focused: !!t1 && e1.focused\n                    };\n                }, function() {\n                    !t1 && i1.setBlur(), i1.setState({\n                        inputValue: null\n                    });\n                });\n            });\n        }), ye(we(i1), \"inputOk\", function() {\n            return isDate(i1.state.preSelection);\n        }), ye(we(i1), \"isCalendarOpen\", function() {\n            return void 0 === i1.props.open ? i1.state.open && !i1.props.disabled && !i1.props.readOnly : i1.props.open;\n        }), ye(we(i1), \"handleFocus\", function(e1) {\n            i1.state.preventFocus || (i1.props.onFocus(e1), i1.props.preventOpenOnFocus || i1.props.readOnly || i1.setOpen(true)), i1.setState({\n                focused: true\n            });\n        }), ye(we(i1), \"sendFocusBackToInput\", function() {\n            i1.preventFocusTimeout && i1.clearPreventFocusTimeout(), i1.setState({\n                preventFocus: true\n            }, function() {\n                i1.preventFocusTimeout = setTimeout(function() {\n                    i1.setFocus(), i1.setState({\n                        preventFocus: false\n                    });\n                });\n            });\n        }), ye(we(i1), \"cancelFocusInput\", function() {\n            clearTimeout(i1.inputFocusTimeout), i1.inputFocusTimeout = null;\n        }), ye(we(i1), \"deferFocusInput\", function() {\n            i1.cancelFocusInput(), i1.inputFocusTimeout = setTimeout(function() {\n                return i1.setFocus();\n            }, 1);\n        }), ye(we(i1), \"handleDropdownFocus\", function() {\n            i1.cancelFocusInput();\n        }), ye(we(i1), \"handleBlur\", function(e1) {\n            (!i1.state.open || i1.props.withPortal || i1.props.showTimeInput) && i1.props.onBlur(e1), i1.setState({\n                focused: false\n            });\n        }), ye(we(i1), \"handleCalendarClickOutside\", function(e1) {\n            i1.props.inline || i1.setOpen(false), i1.props.onClickOutside(e1), i1.props.withPortal && e1.preventDefault();\n        }), ye(we(i1), \"handleChange\", function() {\n            for(var e1 = arguments.length, t1 = new Array(e1), r1 = 0; r1 < e1; r1++)t1[r1] = arguments[r1];\n            var n1 = t1[0];\n            if (!i1.props.onChangeRaw || (i1.props.onChangeRaw.apply(we(i1), t1), \"function\" == typeof n1.isDefaultPrevented && !n1.isDefaultPrevented())) {\n                i1.setState({\n                    inputValue: n1.target.value,\n                    lastPreSelectChange: tr\n                });\n                var o1, a1, s1, p1, c1, l1, d1, u1, h1 = (o1 = n1.target.value, a1 = i1.props.dateFormat, s1 = i1.props.locale, p1 = i1.props.strictParsing, c1 = i1.props.minDate, l1 = null, d1 = Ge(s1) || Ge($e()), u1 = true, Array.isArray(a1) ? (a1.forEach(function(e1) {\n                    var t1 = parse(o1, e1, new Date, {\n                        locale: d1\n                    });\n                    p1 && (u1 = Te(t1, c1) && o1 === Ie(t1, e1, s1)), Te(t1, c1) && u1 && (l1 = t1);\n                }), l1) : (l1 = parse(o1, a1, new Date, {\n                    locale: d1\n                }), p1 ? u1 = Te(l1) && o1 === Ie(l1, a1, s1) : Te(l1) || (a1 = a1.match(xe).map(function(e1) {\n                    var t1 = e1[0];\n                    return \"p\" === t1 || \"P\" === t1 ? d1 ? (0, Ee[t1])(e1, d1.formatLong) : t1 : e1;\n                }).join(\"\"), o1.length > 0 && (l1 = parse(o1, a1.slice(0, o1.length), new Date)), Te(l1) || (l1 = new Date(o1))), Te(l1) && u1 ? l1 : null));\n                i1.props.showTimeSelectOnly && i1.props.selected && h1 && !je(h1, i1.props.selected) && (h1 = set(i1.props.selected, {\n                    hours: getHours(h1),\n                    minutes: getMinutes(h1),\n                    seconds: getSeconds(h1)\n                })), !h1 && n1.target.value || (i1.props.showWeekPicker && (h1 = Le(h1, i1.props.locale, i1.props.calendarStartDay)), i1.setSelected(h1, n1, true));\n            }\n        }), ye(we(i1), \"handleSelect\", function(e1, t1, r1) {\n            if (i1.props.shouldCloseOnSelect && !i1.props.showTimeSelect && i1.sendFocusBackToInput(), i1.props.onChangeRaw && i1.props.onChangeRaw(t1), i1.props.showWeekPicker && (e1 = Le(e1, i1.props.locale, i1.props.calendarStartDay)), i1.setSelected(e1, t1, false, r1), i1.props.showDateSelect && i1.setState({\n                isRenderAriaLiveMessage: true\n            }), !i1.props.shouldCloseOnSelect || i1.props.showTimeSelect) i1.setPreSelection(e1);\n            else if (!i1.props.inline) {\n                i1.props.selectsRange || i1.setOpen(false);\n                var n1 = i1.props, o1 = n1.startDate, a1 = n1.endDate;\n                !o1 || a1 || isBefore(e1, o1) || i1.setOpen(false);\n            }\n        }), ye(we(i1), \"setSelected\", function(e1, t1, r1, n1) {\n            var o1 = e1;\n            if (i1.props.showYearPicker) {\n                if (null !== o1 && at(getYear(o1), i1.props)) return;\n            } else if (i1.props.showMonthYearPicker) {\n                if (null !== o1 && tt(o1, i1.props)) return;\n            } else if (null !== o1 && Ze(o1, i1.props)) return;\n            var a1 = i1.props, s1 = a1.onChange, p1 = a1.selectsRange, c1 = a1.startDate, l1 = a1.endDate;\n            if (!Ve(i1.props.selected, o1) || i1.props.allowSameDay || p1) if (null !== o1 && (!i1.props.selected || r1 && (i1.props.showTimeSelect || i1.props.showTimeSelectOnly || i1.props.showTimeInput) || (o1 = Re(o1, {\n                hour: getHours(i1.props.selected),\n                minute: getMinutes(i1.props.selected),\n                second: getSeconds(i1.props.selected)\n            })), i1.props.inline || i1.setState({\n                preSelection: o1\n            }), i1.props.focusSelectedMonth || i1.setState({\n                monthSelectedIn: n1\n            })), p1) {\n                var d1 = c1 && !l1, u1 = c1 && l1;\n                !c1 && !l1 ? s1([\n                    o1,\n                    null\n                ], t1) : d1 && (isBefore(o1, c1) ? s1([\n                    o1,\n                    null\n                ], t1) : s1([\n                    c1,\n                    o1\n                ], t1)), u1 && s1([\n                    o1,\n                    null\n                ], t1);\n            } else s1(o1, t1);\n            r1 || (i1.props.onSelect(o1, t1), i1.setState({\n                inputValue: null\n            }));\n        }), ye(we(i1), \"setPreSelection\", function(e1) {\n            var t1 = void 0 !== i1.props.minDate, r1 = void 0 !== i1.props.maxDate, n1 = true;\n            if (e1) {\n                i1.props.showWeekPicker && (e1 = Le(e1, i1.props.locale, i1.props.calendarStartDay));\n                var o1 = startOfDay(e1);\n                if (t1 && r1) n1 = qe(e1, i1.props.minDate, i1.props.maxDate);\n                else if (t1) {\n                    var a1 = startOfDay(i1.props.minDate);\n                    n1 = isAfter(e1, a1) || Ve(o1, a1);\n                } else if (r1) {\n                    var s1 = endOfDay(i1.props.maxDate);\n                    n1 = isBefore(e1, s1) || Ve(o1, s1);\n                }\n            }\n            n1 && i1.setState({\n                preSelection: e1\n            });\n        }), ye(we(i1), \"toggleCalendar\", function() {\n            i1.setOpen(!i1.state.open);\n        }), ye(we(i1), \"handleTimeChange\", function(e1) {\n            var t1 = i1.props.selected ? i1.props.selected : i1.getPreSelection(), r1 = i1.props.selected ? e1 : Re(t1, {\n                hour: getHours(e1),\n                minute: getMinutes(e1)\n            });\n            i1.setState({\n                preSelection: r1\n            }), i1.props.onChange(r1), i1.props.shouldCloseOnSelect && (i1.sendFocusBackToInput(), i1.setOpen(false)), i1.props.showTimeInput && i1.setOpen(true), (i1.props.showTimeSelectOnly || i1.props.showTimeSelect) && i1.setState({\n                isRenderAriaLiveMessage: true\n            }), i1.setState({\n                inputValue: null\n            });\n        }), ye(we(i1), \"onInputClick\", function() {\n            i1.props.disabled || i1.props.readOnly || i1.setOpen(true), i1.props.onInputClick();\n        }), ye(we(i1), \"onInputKeyDown\", function(e1) {\n            i1.props.onKeyDown(e1);\n            var t1 = e1.key;\n            if (i1.state.open || i1.props.inline || i1.props.preventOpenOnFocus) {\n                if (i1.state.open) {\n                    if (\"ArrowDown\" === t1 || \"ArrowUp\" === t1) {\n                        e1.preventDefault();\n                        var r1 = i1.props.showWeekPicker && i1.props.showWeekNumbers ? '.react-datepicker__week-number[tabindex=\"0\"]' : '.react-datepicker__day[tabindex=\"0\"]', n1 = i1.calendar.componentNode && i1.calendar.componentNode.querySelector(r1);\n                        return void (n1 && n1.focus({\n                            preventScroll: true\n                        }));\n                    }\n                    var o1 = Ye(i1.state.preSelection);\n                    \"Enter\" === t1 ? (e1.preventDefault(), i1.inputOk() && i1.state.lastPreSelectChange === rr ? (i1.handleSelect(o1, e1), !i1.props.shouldCloseOnSelect && i1.setPreSelection(o1)) : i1.setOpen(false)) : \"Escape\" === t1 ? (e1.preventDefault(), i1.sendFocusBackToInput(), i1.setOpen(false)) : \"Tab\" === t1 && i1.setOpen(false), i1.inputOk() || i1.props.onInputError({\n                        code: 1,\n                        msg: Zt\n                    });\n                }\n            } else \"ArrowDown\" !== t1 && \"ArrowUp\" !== t1 && \"Enter\" !== t1 || i1.onInputClick();\n        }), ye(we(i1), \"onPortalKeyDown\", function(e1) {\n            \"Escape\" === e1.key && (e1.preventDefault(), i1.setState({\n                preventFocus: true\n            }, function() {\n                i1.setOpen(false), setTimeout(function() {\n                    i1.setFocus(), i1.setState({\n                        preventFocus: false\n                    });\n                });\n            }));\n        }), ye(we(i1), \"onDayKeyDown\", function(e1) {\n            i1.props.onKeyDown(e1);\n            var t1 = e1.key, r1 = Ye(i1.state.preSelection);\n            if (\"Enter\" === t1) e1.preventDefault(), i1.handleSelect(r1, e1), !i1.props.shouldCloseOnSelect && i1.setPreSelection(r1);\n            else if (\"Escape\" === t1) e1.preventDefault(), i1.setOpen(false), i1.inputOk() || i1.props.onInputError({\n                code: 1,\n                msg: Zt\n            });\n            else if (!i1.props.disabledKeyboardNavigation) {\n                var n1;\n                switch(t1){\n                    case \"ArrowLeft\":\n                        n1 = i1.props.showWeekPicker ? subWeeks(r1, 1) : subDays(r1, 1);\n                        break;\n                    case \"ArrowRight\":\n                        n1 = i1.props.showWeekPicker ? addWeeks(r1, 1) : addDays(r1, 1);\n                        break;\n                    case \"ArrowUp\":\n                        n1 = subWeeks(r1, 1);\n                        break;\n                    case \"ArrowDown\":\n                        n1 = addWeeks(r1, 1);\n                        break;\n                    case \"PageUp\":\n                        n1 = subMonths(r1, 1);\n                        break;\n                    case \"PageDown\":\n                        n1 = addMonths(r1, 1);\n                        break;\n                    case \"Home\":\n                        n1 = subYears(r1, 1);\n                        break;\n                    case \"End\":\n                        n1 = addYears(r1, 1);\n                        break;\n                    default:\n                        n1 = null;\n                }\n                if (!n1) return void (i1.props.onInputError && i1.props.onInputError({\n                    code: 1,\n                    msg: Zt\n                }));\n                if (e1.preventDefault(), i1.setState({\n                    lastPreSelectChange: rr\n                }), i1.props.adjustDateOnChange && i1.setSelected(n1), i1.setPreSelection(n1), i1.props.inline) {\n                    var o1 = getMonth(r1), a1 = getMonth(n1), s1 = getYear(r1), d1 = getYear(n1);\n                    o1 !== a1 || s1 !== d1 ? i1.setState({\n                        shouldFocusDayInline: true\n                    }) : i1.setState({\n                        shouldFocusDayInline: false\n                    });\n                }\n            }\n        }), ye(we(i1), \"onPopperKeyDown\", function(e1) {\n            \"Escape\" === e1.key && (e1.preventDefault(), i1.sendFocusBackToInput());\n        }), ye(we(i1), \"onClearClick\", function(e1) {\n            e1 && e1.preventDefault && e1.preventDefault(), i1.sendFocusBackToInput(), i1.props.selectsRange ? i1.props.onChange([\n                null,\n                null\n            ], e1) : i1.props.onChange(null, e1), i1.setState({\n                inputValue: null\n            });\n        }), ye(we(i1), \"clear\", function() {\n            i1.onClearClick();\n        }), ye(we(i1), \"onScroll\", function(e1) {\n            \"boolean\" == typeof i1.props.closeOnScroll && i1.props.closeOnScroll ? e1.target !== document && e1.target !== document.documentElement && e1.target !== document.body || i1.setOpen(false) : \"function\" == typeof i1.props.closeOnScroll && i1.props.closeOnScroll(e1) && i1.setOpen(false);\n        }), ye(we(i1), \"renderCalendar\", function() {\n            return i1.props.inline || i1.isCalendarOpen() ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Xt, {\n                ref: function(e1) {\n                    i1.calendar = e1;\n                },\n                locale: i1.props.locale,\n                calendarStartDay: i1.props.calendarStartDay,\n                chooseDayAriaLabelPrefix: i1.props.chooseDayAriaLabelPrefix,\n                disabledDayAriaLabelPrefix: i1.props.disabledDayAriaLabelPrefix,\n                weekAriaLabelPrefix: i1.props.weekAriaLabelPrefix,\n                monthAriaLabelPrefix: i1.props.monthAriaLabelPrefix,\n                adjustDateOnChange: i1.props.adjustDateOnChange,\n                setOpen: i1.setOpen,\n                shouldCloseOnSelect: i1.props.shouldCloseOnSelect,\n                dateFormat: i1.props.dateFormatCalendar,\n                useWeekdaysShort: i1.props.useWeekdaysShort,\n                formatWeekDay: i1.props.formatWeekDay,\n                dropdownMode: i1.props.dropdownMode,\n                selected: i1.props.selected,\n                preSelection: i1.state.preSelection,\n                onSelect: i1.handleSelect,\n                onWeekSelect: i1.props.onWeekSelect,\n                openToDate: i1.props.openToDate,\n                minDate: i1.props.minDate,\n                maxDate: i1.props.maxDate,\n                selectsStart: i1.props.selectsStart,\n                selectsEnd: i1.props.selectsEnd,\n                selectsRange: i1.props.selectsRange,\n                startDate: i1.props.startDate,\n                endDate: i1.props.endDate,\n                excludeDates: i1.props.excludeDates,\n                excludeDateIntervals: i1.props.excludeDateIntervals,\n                filterDate: i1.props.filterDate,\n                onClickOutside: i1.handleCalendarClickOutside,\n                formatWeekNumber: i1.props.formatWeekNumber,\n                highlightDates: i1.state.highlightDates,\n                holidays: Dt(i1.modifyHolidays()),\n                includeDates: i1.props.includeDates,\n                includeDateIntervals: i1.props.includeDateIntervals,\n                includeTimes: i1.props.includeTimes,\n                injectTimes: i1.props.injectTimes,\n                inline: i1.props.inline,\n                shouldFocusDayInline: i1.state.shouldFocusDayInline,\n                peekNextMonth: i1.props.peekNextMonth,\n                showMonthDropdown: i1.props.showMonthDropdown,\n                showPreviousMonths: i1.props.showPreviousMonths,\n                useShortMonthInDropdown: i1.props.useShortMonthInDropdown,\n                showMonthYearDropdown: i1.props.showMonthYearDropdown,\n                showWeekNumbers: i1.props.showWeekNumbers,\n                showYearDropdown: i1.props.showYearDropdown,\n                withPortal: i1.props.withPortal,\n                forceShowMonthNavigation: i1.props.forceShowMonthNavigation,\n                showDisabledMonthNavigation: i1.props.showDisabledMonthNavigation,\n                scrollableYearDropdown: i1.props.scrollableYearDropdown,\n                scrollableMonthYearDropdown: i1.props.scrollableMonthYearDropdown,\n                todayButton: i1.props.todayButton,\n                weekLabel: i1.props.weekLabel,\n                outsideClickIgnoreClass: Jt,\n                fixedHeight: i1.props.fixedHeight,\n                monthsShown: i1.props.monthsShown,\n                monthSelectedIn: i1.state.monthSelectedIn,\n                onDropdownFocus: i1.handleDropdownFocus,\n                onMonthChange: i1.props.onMonthChange,\n                onYearChange: i1.props.onYearChange,\n                dayClassName: i1.props.dayClassName,\n                weekDayClassName: i1.props.weekDayClassName,\n                monthClassName: i1.props.monthClassName,\n                timeClassName: i1.props.timeClassName,\n                showDateSelect: i1.props.showDateSelect,\n                showTimeSelect: i1.props.showTimeSelect,\n                showTimeSelectOnly: i1.props.showTimeSelectOnly,\n                onTimeChange: i1.handleTimeChange,\n                timeFormat: i1.props.timeFormat,\n                timeIntervals: i1.props.timeIntervals,\n                minTime: i1.props.minTime,\n                maxTime: i1.props.maxTime,\n                excludeTimes: i1.props.excludeTimes,\n                filterTime: i1.props.filterTime,\n                timeCaption: i1.props.timeCaption,\n                className: i1.props.calendarClassName,\n                container: i1.props.calendarContainer,\n                yearItemNumber: i1.props.yearItemNumber,\n                yearDropdownItemNumber: i1.props.yearDropdownItemNumber,\n                previousMonthAriaLabel: i1.props.previousMonthAriaLabel,\n                previousMonthButtonLabel: i1.props.previousMonthButtonLabel,\n                nextMonthAriaLabel: i1.props.nextMonthAriaLabel,\n                nextMonthButtonLabel: i1.props.nextMonthButtonLabel,\n                previousYearAriaLabel: i1.props.previousYearAriaLabel,\n                previousYearButtonLabel: i1.props.previousYearButtonLabel,\n                nextYearAriaLabel: i1.props.nextYearAriaLabel,\n                nextYearButtonLabel: i1.props.nextYearButtonLabel,\n                timeInputLabel: i1.props.timeInputLabel,\n                disabledKeyboardNavigation: i1.props.disabledKeyboardNavigation,\n                renderCustomHeader: i1.props.renderCustomHeader,\n                popperProps: i1.props.popperProps,\n                renderDayContents: i1.props.renderDayContents,\n                renderMonthContent: i1.props.renderMonthContent,\n                renderQuarterContent: i1.props.renderQuarterContent,\n                renderYearContent: i1.props.renderYearContent,\n                onDayMouseEnter: i1.props.onDayMouseEnter,\n                onMonthMouseLeave: i1.props.onMonthMouseLeave,\n                onYearMouseEnter: i1.props.onYearMouseEnter,\n                onYearMouseLeave: i1.props.onYearMouseLeave,\n                selectsDisabledDaysInRange: i1.props.selectsDisabledDaysInRange,\n                showTimeInput: i1.props.showTimeInput,\n                showMonthYearPicker: i1.props.showMonthYearPicker,\n                showFullMonthYearPicker: i1.props.showFullMonthYearPicker,\n                showTwoColumnMonthYearPicker: i1.props.showTwoColumnMonthYearPicker,\n                showFourColumnMonthYearPicker: i1.props.showFourColumnMonthYearPicker,\n                showYearPicker: i1.props.showYearPicker,\n                showQuarterYearPicker: i1.props.showQuarterYearPicker,\n                showWeekPicker: i1.props.showWeekPicker,\n                showPopperArrow: i1.props.showPopperArrow,\n                excludeScrollbar: i1.props.excludeScrollbar,\n                handleOnKeyDown: i1.props.onKeyDown,\n                handleOnDayKeyDown: i1.onDayKeyDown,\n                isInputFocused: i1.state.focused,\n                customTimeInput: i1.props.customTimeInput,\n                setPreSelection: i1.setPreSelection\n            }, i1.props.children) : null;\n        }), ye(we(i1), \"renderAriaLiveRegion\", function() {\n            var t1, r1 = i1.props, n1 = r1.dateFormat, o1 = r1.locale, a1 = i1.props.showTimeInput || i1.props.showTimeSelect ? \"PPPPp\" : \"PPPP\";\n            return t1 = i1.props.selectsRange ? \"Selected start date: \".concat(Oe(i1.props.startDate, {\n                dateFormat: a1,\n                locale: o1\n            }), \". \").concat(i1.props.endDate ? \"End date: \" + Oe(i1.props.endDate, {\n                dateFormat: a1,\n                locale: o1\n            }) : \"\") : i1.props.showTimeSelectOnly ? \"Selected time: \".concat(Oe(i1.props.selected, {\n                dateFormat: n1,\n                locale: o1\n            })) : i1.props.showYearPicker ? \"Selected year: \".concat(Oe(i1.props.selected, {\n                dateFormat: \"yyyy\",\n                locale: o1\n            })) : i1.props.showMonthYearPicker ? \"Selected month: \".concat(Oe(i1.props.selected, {\n                dateFormat: \"MMMM yyyy\",\n                locale: o1\n            })) : i1.props.showQuarterYearPicker ? \"Selected quarter: \".concat(Oe(i1.props.selected, {\n                dateFormat: \"yyyy, QQQ\",\n                locale: o1\n            })) : \"Selected date: \".concat(Oe(i1.props.selected, {\n                dateFormat: a1,\n                locale: o1\n            })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                role: \"alert\",\n                \"aria-live\": \"polite\",\n                className: \"react-datepicker__aria-live\"\n            }, t1);\n        }), ye(we(i1), \"renderDateInput\", function() {\n            var t1, n1 = r(i1.props.className, ye({}, Jt, i1.state.open)), o1 = i1.props.customInput || /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"input\", {\n                type: \"text\"\n            }), a1 = i1.props.customInputRef || \"ref\", s1 = \"string\" == typeof i1.props.value ? i1.props.value : \"string\" == typeof i1.state.inputValue ? i1.state.inputValue : i1.props.selectsRange ? function(e1, t1, r1) {\n                if (!e1) return \"\";\n                var n1 = Oe(e1, r1), o1 = t1 ? Oe(t1, r1) : \"\";\n                return \"\".concat(n1, \" - \").concat(o1);\n            }(i1.props.startDate, i1.props.endDate, i1.props) : Oe(i1.props.selected, i1.props);\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().cloneElement(o1, (ye(ye(ye(ye(ye(ye(ye(ye(ye(ye(t1 = {}, a1, function(e1) {\n                i1.input = e1;\n            }), \"value\", s1), \"onBlur\", i1.handleBlur), \"onChange\", i1.handleChange), \"onClick\", i1.onInputClick), \"onFocus\", i1.handleFocus), \"onKeyDown\", i1.onInputKeyDown), \"id\", i1.props.id), \"name\", i1.props.name), \"form\", i1.props.form), ye(ye(ye(ye(ye(ye(ye(ye(ye(ye(t1, \"autoFocus\", i1.props.autoFocus), \"placeholder\", i1.props.placeholderText), \"disabled\", i1.props.disabled), \"autoComplete\", i1.props.autoComplete), \"className\", r(o1.props.className, n1)), \"title\", i1.props.title), \"readOnly\", i1.props.readOnly), \"required\", i1.props.required), \"tabIndex\", i1.props.tabIndex), \"aria-describedby\", i1.props.ariaDescribedBy), ye(ye(ye(t1, \"aria-invalid\", i1.props.ariaInvalid), \"aria-labelledby\", i1.props.ariaLabelledBy), \"aria-required\", i1.props.ariaRequired)));\n        }), ye(we(i1), \"renderClearButton\", function() {\n            var t1 = i1.props, n1 = t1.isClearable, o1 = t1.disabled, a1 = t1.selected, s1 = t1.startDate, p1 = t1.endDate, c1 = t1.clearButtonTitle, l1 = t1.clearButtonClassName, d1 = void 0 === l1 ? \"\" : l1, u1 = t1.ariaLabelClose, h1 = void 0 === u1 ? \"Close\" : u1;\n            return !n1 || null == a1 && null == s1 && null == p1 ? null : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"button\", {\n                type: \"button\",\n                className: r(\"react-datepicker__close-icon\", d1, {\n                    \"react-datepicker__close-icon--disabled\": o1\n                }),\n                disabled: o1,\n                \"aria-label\": h1,\n                onClick: i1.onClearClick,\n                title: c1,\n                tabIndex: -1\n            });\n        }), i1.state = i1.calcInitialState(), i1.preventFocusTimeout = null, i1;\n    }\n    return fe(s1, [\n        {\n            key: \"componentDidMount\",\n            value: function() {\n                window.addEventListener(\"scroll\", this.onScroll, true);\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function(e1, t1) {\n                var r1, n1;\n                e1.inline && (r1 = e1.selected, n1 = this.props.selected, r1 && n1 ? getMonth(r1) !== getMonth(n1) || getYear(r1) !== getYear(n1) : r1 !== n1) && this.setPreSelection(this.props.selected), void 0 !== this.state.monthSelectedIn && e1.monthsShown !== this.props.monthsShown && this.setState({\n                    monthSelectedIn: 0\n                }), e1.highlightDates !== this.props.highlightDates && this.setState({\n                    highlightDates: vt(this.props.highlightDates)\n                }), t1.focused || Ve(e1.selected, this.props.selected) || this.setState({\n                    inputValue: null\n                }), t1.open !== this.state.open && (false === t1.open && true === this.state.open && this.props.onCalendarOpen(), true === t1.open && false === this.state.open && this.props.onCalendarClose());\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function() {\n                this.clearPreventFocusTimeout(), window.removeEventListener(\"scroll\", this.onScroll, true);\n            }\n        },\n        {\n            key: \"renderInputContainer\",\n            value: function() {\n                var t1 = this.props, r1 = t1.showIcon, n1 = t1.icon, o1 = t1.calendarIconClassname, a1 = t1.toggleCalendarOnIconClick, s1 = this.state.open;\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                    className: \"react-datepicker__input-container\".concat(r1 ? \" react-datepicker__view-calendar-icon\" : \"\")\n                }, r1 && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(qt, ve({\n                    icon: n1,\n                    className: \"\".concat(o1, \" \").concat(s1 && \"react-datepicker-ignore-onclickoutside\")\n                }, a1 ? {\n                    onClick: this.toggleCalendar\n                } : null)), this.state.isRenderAriaLiveMessage && this.renderAriaLiveRegion(), this.renderDateInput(), this.renderClearButton());\n            }\n        },\n        {\n            key: \"render\",\n            value: function() {\n                var t1 = this.renderCalendar();\n                if (this.props.inline) return t1;\n                if (this.props.withPortal) {\n                    var r1 = this.state.open ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement($t, {\n                        enableTabLoop: this.props.enableTabLoop\n                    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                        className: \"react-datepicker__portal\",\n                        tabIndex: -1,\n                        onKeyDown: this.onPortalKeyDown\n                    }, t1)) : null;\n                    return this.state.open && this.props.portalId && (r1 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Ut, {\n                        portalId: this.props.portalId,\n                        portalHost: this.props.portalHost\n                    }, r1)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", null, this.renderInputContainer(), r1);\n                }\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Gt, {\n                    className: this.props.popperClassName,\n                    wrapperClassName: this.props.wrapperClassName,\n                    hidePopper: !this.isCalendarOpen(),\n                    portalId: this.props.portalId,\n                    portalHost: this.props.portalHost,\n                    popperModifiers: this.props.popperModifiers,\n                    targetComponent: this.renderInputContainer(),\n                    popperContainer: this.props.popperContainer,\n                    popperComponent: t1,\n                    popperPlacement: this.props.popperPlacement,\n                    popperProps: this.props.popperProps,\n                    popperOnKeyDown: this.onPopperKeyDown,\n                    enableTabLoop: this.props.enableTabLoop\n                });\n            }\n        }\n    ], [\n        {\n            key: \"defaultProps\",\n            get: function() {\n                return {\n                    allowSameDay: false,\n                    dateFormat: \"MM/dd/yyyy\",\n                    dateFormatCalendar: \"LLLL yyyy\",\n                    onChange: function() {},\n                    disabled: false,\n                    disabledKeyboardNavigation: false,\n                    dropdownMode: \"scroll\",\n                    onFocus: function() {},\n                    onBlur: function() {},\n                    onKeyDown: function() {},\n                    onInputClick: function() {},\n                    onSelect: function() {},\n                    onClickOutside: function() {},\n                    onMonthChange: function() {},\n                    onCalendarOpen: function() {},\n                    onCalendarClose: function() {},\n                    preventOpenOnFocus: false,\n                    onYearChange: function() {},\n                    onInputError: function() {},\n                    monthsShown: 1,\n                    readOnly: false,\n                    withPortal: false,\n                    selectsDisabledDaysInRange: false,\n                    shouldCloseOnSelect: true,\n                    showTimeSelect: false,\n                    showTimeInput: false,\n                    showPreviousMonths: false,\n                    showMonthYearPicker: false,\n                    showFullMonthYearPicker: false,\n                    showTwoColumnMonthYearPicker: false,\n                    showFourColumnMonthYearPicker: false,\n                    showYearPicker: false,\n                    showQuarterYearPicker: false,\n                    showWeekPicker: false,\n                    strictParsing: false,\n                    timeIntervals: 30,\n                    timeCaption: \"Time\",\n                    previousMonthAriaLabel: \"Previous Month\",\n                    previousMonthButtonLabel: \"Previous Month\",\n                    nextMonthAriaLabel: \"Next Month\",\n                    nextMonthButtonLabel: \"Next Month\",\n                    previousYearAriaLabel: \"Previous Year\",\n                    previousYearButtonLabel: \"Previous Year\",\n                    nextYearAriaLabel: \"Next Year\",\n                    nextYearButtonLabel: \"Next Year\",\n                    timeInputLabel: \"Time\",\n                    enableTabLoop: true,\n                    yearItemNumber: Ne,\n                    focusSelectedMonth: false,\n                    showPopperArrow: true,\n                    excludeScrollbar: true,\n                    customTimeInput: null,\n                    calendarStartDay: void 0,\n                    toggleCalendarOnIconClick: false\n                };\n            }\n        }\n    ]), s1;\n}(), tr = \"input\", rr = \"navigate\";\nfunction styleInject(css1, ref1) {\n    if (ref1 === void 0) ref1 = {};\n    var insertAt1 = ref1.insertAt;\n    if (!css1 || typeof document === \"undefined\") {\n        return;\n    }\n    var head1 = document.head || document.getElementsByTagName(\"head\")[0];\n    var style1 = document.createElement(\"style\");\n    style1.type = \"text/css\";\n    if (insertAt1 === \"top\") {\n        if (head1.firstChild) {\n            head1.insertBefore(style1, head1.firstChild);\n        } else {\n            head1.appendChild(style1);\n        }\n    } else {\n        head1.appendChild(style1);\n    }\n    if (style1.styleSheet) {\n        style1.styleSheet.cssText = css1;\n    } else {\n        style1.appendChild(document.createTextNode(css1));\n    }\n}\nvar css_248z$1 = '@charset \"UTF-8\";.react-datepicker__month-read-view--down-arrow,.react-datepicker__month-year-read-view--down-arrow,.react-datepicker__navigation-icon:before,.react-datepicker__year-read-view--down-arrow{border-color:#ccc;border-style:solid;border-width:3px 3px 0 0;content:\"\";display:block;height:9px;position:absolute;top:6px;width:9px}.react-datepicker-popper[data-placement^=bottom] .react-datepicker__triangle,.react-datepicker-popper[data-placement^=top] .react-datepicker__triangle{margin-left:-4px;position:absolute;width:0}.react-datepicker-popper[data-placement^=bottom] .react-datepicker__triangle:after,.react-datepicker-popper[data-placement^=bottom] .react-datepicker__triangle:before,.react-datepicker-popper[data-placement^=top] .react-datepicker__triangle:after,.react-datepicker-popper[data-placement^=top] .react-datepicker__triangle:before{border:8px solid transparent;box-sizing:content-box;content:\"\";height:0;left:-8px;position:absolute;width:1px;z-index:-1}.react-datepicker-popper[data-placement^=bottom] .react-datepicker__triangle:before,.react-datepicker-popper[data-placement^=top] .react-datepicker__triangle:before{border-bottom-color:#aeaeae}.react-datepicker-popper[data-placement^=bottom] .react-datepicker__triangle{margin-top:-8px;top:0}.react-datepicker-popper[data-placement^=bottom] .react-datepicker__triangle:after,.react-datepicker-popper[data-placement^=bottom] .react-datepicker__triangle:before{border-bottom-color:#f0f0f0;border-top:none}.react-datepicker-popper[data-placement^=bottom] .react-datepicker__triangle:after{top:0}.react-datepicker-popper[data-placement^=bottom] .react-datepicker__triangle:before{border-bottom-color:#aeaeae;top:-1px}.react-datepicker-popper[data-placement^=top] .react-datepicker__triangle{bottom:0;margin-bottom:-8px}.react-datepicker-popper[data-placement^=top] .react-datepicker__triangle:after,.react-datepicker-popper[data-placement^=top] .react-datepicker__triangle:before{border-bottom:none;border-top-color:#fff}.react-datepicker-popper[data-placement^=top] .react-datepicker__triangle:after{bottom:0}.react-datepicker-popper[data-placement^=top] .react-datepicker__triangle:before{border-top-color:#aeaeae;bottom:-1px}.react-datepicker-wrapper{border:0;display:inline-block;padding:0}.react-datepicker{background-color:#fff;border:1px solid #aeaeae;border-radius:.3rem;color:#000;display:inline-block;font-family:Helvetica Neue,helvetica,arial,sans-serif;font-size:.8rem;position:relative}.react-datepicker--time-only .react-datepicker__triangle{left:35px}.react-datepicker--time-only .react-datepicker__time-container{border-left:0}.react-datepicker--time-only .react-datepicker__time,.react-datepicker--time-only .react-datepicker__time-box{border-bottom-left-radius:.3rem;border-bottom-right-radius:.3rem}.react-datepicker__triangle{left:50px;position:absolute}.react-datepicker-popper{z-index:1}.react-datepicker-popper[data-placement^=bottom]{padding-top:10px}.react-datepicker-popper[data-placement=bottom-end] .react-datepicker__triangle,.react-datepicker-popper[data-placement=top-end] .react-datepicker__triangle{left:auto;right:50px}.react-datepicker-popper[data-placement^=top]{padding-bottom:10px}.react-datepicker-popper[data-placement^=right]{padding-left:8px}.react-datepicker-popper[data-placement^=right] .react-datepicker__triangle{left:auto;right:42px}.react-datepicker-popper[data-placement^=left]{padding-right:8px}.react-datepicker-popper[data-placement^=left] .react-datepicker__triangle{left:42px;right:auto}.react-datepicker__header{background-color:#f0f0f0;border-bottom:1px solid #aeaeae;border-top-left-radius:.3rem;padding:8px 0;position:relative;text-align:center}.react-datepicker__header--time{padding-bottom:8px;padding-left:5px;padding-right:5px}.react-datepicker__header--time:not(.react-datepicker__header--time--only){border-top-left-radius:0}.react-datepicker__header:not(.react-datepicker__header--has-time-select){border-top-right-radius:.3rem}.react-datepicker__month-dropdown-container--scroll,.react-datepicker__month-dropdown-container--select,.react-datepicker__month-year-dropdown-container--scroll,.react-datepicker__month-year-dropdown-container--select,.react-datepicker__year-dropdown-container--scroll,.react-datepicker__year-dropdown-container--select{display:inline-block;margin:0 15px}.react-datepicker-time__header,.react-datepicker-year-header,.react-datepicker__current-month{color:#000;font-size:.944rem;font-weight:700;margin-top:0}.react-datepicker-time__header{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.react-datepicker__navigation{align-items:center;background:none;border:none;cursor:pointer;display:flex;height:32px;justify-content:center;overflow:hidden;padding:0;position:absolute;text-align:center;text-indent:-999em;top:2px;width:32px;z-index:1}.react-datepicker__navigation--previous{left:2px}.react-datepicker__navigation--next{right:2px}.react-datepicker__navigation--next--with-time:not(.react-datepicker__navigation--next--with-today-button){right:85px}.react-datepicker__navigation--years{display:block;margin-left:auto;margin-right:auto;position:relative;top:0}.react-datepicker__navigation--years-previous{top:4px}.react-datepicker__navigation--years-upcoming{top:-4px}.react-datepicker__navigation:hover :before{border-color:#a6a6a6}.react-datepicker__navigation-icon{font-size:20px;position:relative;top:-1px;width:0}.react-datepicker__navigation-icon--next{left:-2px}.react-datepicker__navigation-icon--next:before{left:-7px;transform:rotate(45deg)}.react-datepicker__navigation-icon--previous{right:-2px}.react-datepicker__navigation-icon--previous:before{right:-7px;transform:rotate(225deg)}.react-datepicker__month-container{float:left}.react-datepicker__year{margin:.4rem;text-align:center}.react-datepicker__year-wrapper{display:flex;flex-wrap:wrap;max-width:180px}.react-datepicker__year .react-datepicker__year-text{display:inline-block;margin:2px;width:4rem}.react-datepicker__month{margin:.4rem;text-align:center}.react-datepicker__month .react-datepicker__month-text,.react-datepicker__month .react-datepicker__quarter-text{display:inline-block;margin:2px;width:4rem}.react-datepicker__input-time-container{clear:both;float:left;margin:5px 0 10px 15px;text-align:left;width:100%}.react-datepicker__input-time-container .react-datepicker-time__caption,.react-datepicker__input-time-container .react-datepicker-time__input-container{display:inline-block}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input{display:inline-block;margin-left:10px}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input input{width:auto}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input input[type=time]::-webkit-inner-spin-button,.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input input[type=time]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input input[type=time]{-moz-appearance:textfield}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__delimiter{display:inline-block;margin-left:5px}.react-datepicker__time-container{border-left:1px solid #aeaeae;float:right;width:85px}.react-datepicker__time-container--with-today-button{border:1px solid #aeaeae;border-radius:.3rem;display:inline;position:absolute;right:-87px;top:0}.react-datepicker__time-container .react-datepicker__time{background:#fff;border-bottom-right-radius:.3rem;position:relative}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box{border-bottom-right-radius:.3rem;margin:0 auto;overflow-x:hidden;text-align:center;width:85px}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list{box-sizing:content-box;height:calc(195px + .85rem);list-style:none;margin:0;overflow-y:scroll;padding-left:0;padding-right:0;width:100%}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item{height:30px;padding:5px 10px;white-space:nowrap}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item:hover{background-color:#f0f0f0;cursor:pointer}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--selected{background-color:#216ba5;color:#fff;font-weight:700}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--selected:hover{background-color:#216ba5}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--disabled{color:#ccc}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--disabled:hover{background-color:transparent;cursor:default}.react-datepicker__week-number{color:#ccc;display:inline-block;line-height:1.7rem;margin:.166rem;text-align:center;width:1.7rem}.react-datepicker__week-number.react-datepicker__week-number--clickable{cursor:pointer}.react-datepicker__week-number.react-datepicker__week-number--clickable:not(.react-datepicker__week-number--selected,.react-datepicker__week-number--keyboard-selected):hover{background-color:#f0f0f0;border-radius:.3rem}.react-datepicker__week-number--selected{background-color:#216ba5;border-radius:.3rem;color:#fff}.react-datepicker__week-number--selected:hover{background-color:#1d5d90}.react-datepicker__week-number--keyboard-selected{background-color:#2a87d0;border-radius:.3rem;color:#fff}.react-datepicker__week-number--keyboard-selected:hover{background-color:#1d5d90}.react-datepicker__day-names{margin-bottom:-8px;white-space:nowrap}.react-datepicker__week{white-space:nowrap}.react-datepicker__day,.react-datepicker__day-name,.react-datepicker__time-name{color:#000;display:inline-block;line-height:1.7rem;margin:.166rem;text-align:center;width:1.7rem}.react-datepicker__day,.react-datepicker__month-text,.react-datepicker__quarter-text,.react-datepicker__year-text{cursor:pointer}.react-datepicker__day:hover,.react-datepicker__month-text:hover,.react-datepicker__quarter-text:hover,.react-datepicker__year-text:hover{background-color:#f0f0f0;border-radius:.3rem}.react-datepicker__day--today,.react-datepicker__month-text--today,.react-datepicker__quarter-text--today,.react-datepicker__year-text--today{font-weight:700}.react-datepicker__day--highlighted,.react-datepicker__month-text--highlighted,.react-datepicker__quarter-text--highlighted,.react-datepicker__year-text--highlighted{background-color:#3dcc4a;border-radius:.3rem;color:#fff}.react-datepicker__day--highlighted:hover,.react-datepicker__month-text--highlighted:hover,.react-datepicker__quarter-text--highlighted:hover,.react-datepicker__year-text--highlighted:hover{background-color:#32be3f}.react-datepicker__day--highlighted-custom-1,.react-datepicker__month-text--highlighted-custom-1,.react-datepicker__quarter-text--highlighted-custom-1,.react-datepicker__year-text--highlighted-custom-1{color:#f0f}.react-datepicker__day--highlighted-custom-2,.react-datepicker__month-text--highlighted-custom-2,.react-datepicker__quarter-text--highlighted-custom-2,.react-datepicker__year-text--highlighted-custom-2{color:green}.react-datepicker__day--holidays,.react-datepicker__month-text--holidays,.react-datepicker__quarter-text--holidays,.react-datepicker__year-text--holidays{background-color:#ff6803;border-radius:.3rem;color:#fff;position:relative}.react-datepicker__day--holidays .holiday-overlay,.react-datepicker__month-text--holidays .holiday-overlay,.react-datepicker__quarter-text--holidays .holiday-overlay,.react-datepicker__year-text--holidays .holiday-overlay{background-color:#333;border-radius:4px;bottom:100%;color:#fff;left:50%;opacity:0;padding:4px;position:absolute;transform:translateX(-50%);transition:visibility 0s,opacity .3s ease-in-out;visibility:hidden;white-space:nowrap}.react-datepicker__day--holidays:hover,.react-datepicker__month-text--holidays:hover,.react-datepicker__quarter-text--holidays:hover,.react-datepicker__year-text--holidays:hover{background-color:#cf5300}.react-datepicker__day--holidays:hover .holiday-overlay,.react-datepicker__month-text--holidays:hover .holiday-overlay,.react-datepicker__quarter-text--holidays:hover .holiday-overlay,.react-datepicker__year-text--holidays:hover .holiday-overlay{opacity:1;visibility:visible}.react-datepicker__day--in-range,.react-datepicker__day--in-selecting-range,.react-datepicker__day--selected,.react-datepicker__month-text--in-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__month-text--selected,.react-datepicker__quarter-text--in-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__quarter-text--selected,.react-datepicker__year-text--in-range,.react-datepicker__year-text--in-selecting-range,.react-datepicker__year-text--selected{background-color:#216ba5;border-radius:.3rem;color:#fff}.react-datepicker__day--in-range:hover,.react-datepicker__day--in-selecting-range:hover,.react-datepicker__day--selected:hover,.react-datepicker__month-text--in-range:hover,.react-datepicker__month-text--in-selecting-range:hover,.react-datepicker__month-text--selected:hover,.react-datepicker__quarter-text--in-range:hover,.react-datepicker__quarter-text--in-selecting-range:hover,.react-datepicker__quarter-text--selected:hover,.react-datepicker__year-text--in-range:hover,.react-datepicker__year-text--in-selecting-range:hover,.react-datepicker__year-text--selected:hover{background-color:#1d5d90}.react-datepicker__day--keyboard-selected,.react-datepicker__month-text--keyboard-selected,.react-datepicker__quarter-text--keyboard-selected,.react-datepicker__year-text--keyboard-selected{background-color:#bad9f1;border-radius:.3rem;color:#000}.react-datepicker__day--keyboard-selected:hover,.react-datepicker__month-text--keyboard-selected:hover,.react-datepicker__quarter-text--keyboard-selected:hover,.react-datepicker__year-text--keyboard-selected:hover{background-color:#1d5d90}.react-datepicker__day--in-selecting-range:not(.react-datepicker__day--in-range,.react-datepicker__month-text--in-range,.react-datepicker__quarter-text--in-range,.react-datepicker__year-text--in-range),.react-datepicker__month-text--in-selecting-range:not(.react-datepicker__day--in-range,.react-datepicker__month-text--in-range,.react-datepicker__quarter-text--in-range,.react-datepicker__year-text--in-range),.react-datepicker__quarter-text--in-selecting-range:not(.react-datepicker__day--in-range,.react-datepicker__month-text--in-range,.react-datepicker__quarter-text--in-range,.react-datepicker__year-text--in-range),.react-datepicker__year-text--in-selecting-range:not(.react-datepicker__day--in-range,.react-datepicker__month-text--in-range,.react-datepicker__quarter-text--in-range,.react-datepicker__year-text--in-range){background-color:rgba(33,107,165,.5)}.react-datepicker__month--selecting-range .react-datepicker__day--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range),.react-datepicker__month--selecting-range .react-datepicker__month-text--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range),.react-datepicker__month--selecting-range .react-datepicker__quarter-text--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range),.react-datepicker__month--selecting-range .react-datepicker__year-text--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range),.react-datepicker__year--selecting-range .react-datepicker__day--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range),.react-datepicker__year--selecting-range .react-datepicker__month-text--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range),.react-datepicker__year--selecting-range .react-datepicker__quarter-text--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range),.react-datepicker__year--selecting-range .react-datepicker__year-text--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range){background-color:#f0f0f0;color:#000}.react-datepicker__day--disabled,.react-datepicker__month-text--disabled,.react-datepicker__quarter-text--disabled,.react-datepicker__year-text--disabled{color:#ccc;cursor:default}.react-datepicker__day--disabled:hover,.react-datepicker__month-text--disabled:hover,.react-datepicker__quarter-text--disabled:hover,.react-datepicker__year-text--disabled:hover{background-color:transparent}.react-datepicker__input-container{display:inline-block;position:relative;width:100%}.react-datepicker__input-container .react-datepicker__calendar-icon{box-sizing:content-box;padding:.5rem;position:absolute}.react-datepicker__view-calendar-icon input{padding:6px 10px 5px 25px}.react-datepicker__month-read-view,.react-datepicker__month-year-read-view,.react-datepicker__year-read-view{border:1px solid transparent;border-radius:.3rem;position:relative}.react-datepicker__month-read-view:hover,.react-datepicker__month-year-read-view:hover,.react-datepicker__year-read-view:hover{cursor:pointer}.react-datepicker__month-read-view:hover .react-datepicker__month-read-view--down-arrow,.react-datepicker__month-read-view:hover .react-datepicker__year-read-view--down-arrow,.react-datepicker__month-year-read-view:hover .react-datepicker__month-read-view--down-arrow,.react-datepicker__month-year-read-view:hover .react-datepicker__year-read-view--down-arrow,.react-datepicker__year-read-view:hover .react-datepicker__month-read-view--down-arrow,.react-datepicker__year-read-view:hover .react-datepicker__year-read-view--down-arrow{border-top-color:#b3b3b3}.react-datepicker__month-read-view--down-arrow,.react-datepicker__month-year-read-view--down-arrow,.react-datepicker__year-read-view--down-arrow{right:-16px;top:0;transform:rotate(135deg)}.react-datepicker__month-dropdown,.react-datepicker__month-year-dropdown,.react-datepicker__year-dropdown{background-color:#f0f0f0;border:1px solid #aeaeae;border-radius:.3rem;left:25%;position:absolute;text-align:center;top:30px;width:50%;z-index:1}.react-datepicker__month-dropdown:hover,.react-datepicker__month-year-dropdown:hover,.react-datepicker__year-dropdown:hover{cursor:pointer}.react-datepicker__month-dropdown--scrollable,.react-datepicker__month-year-dropdown--scrollable,.react-datepicker__year-dropdown--scrollable{height:150px;overflow-y:scroll}.react-datepicker__month-option,.react-datepicker__month-year-option,.react-datepicker__year-option{display:block;line-height:20px;margin-left:auto;margin-right:auto;width:100%}.react-datepicker__month-option:first-of-type,.react-datepicker__month-year-option:first-of-type,.react-datepicker__year-option:first-of-type{border-top-left-radius:.3rem;border-top-right-radius:.3rem}.react-datepicker__month-option:last-of-type,.react-datepicker__month-year-option:last-of-type,.react-datepicker__year-option:last-of-type{border-bottom-left-radius:.3rem;border-bottom-right-radius:.3rem;-webkit-user-select:none;-moz-user-select:none;user-select:none}.react-datepicker__month-option:hover,.react-datepicker__month-year-option:hover,.react-datepicker__year-option:hover{background-color:#ccc}.react-datepicker__month-option:hover .react-datepicker__navigation--years-upcoming,.react-datepicker__month-year-option:hover .react-datepicker__navigation--years-upcoming,.react-datepicker__year-option:hover .react-datepicker__navigation--years-upcoming{border-bottom-color:#b3b3b3}.react-datepicker__month-option:hover .react-datepicker__navigation--years-previous,.react-datepicker__month-year-option:hover .react-datepicker__navigation--years-previous,.react-datepicker__year-option:hover .react-datepicker__navigation--years-previous{border-top-color:#b3b3b3}.react-datepicker__month-option--selected,.react-datepicker__month-year-option--selected,.react-datepicker__year-option--selected{left:15px;position:absolute}.react-datepicker__close-icon{background-color:transparent;border:0;cursor:pointer;display:table-cell;height:100%;outline:0;padding:0 6px 0 0;position:absolute;right:0;top:0;vertical-align:middle}.react-datepicker__close-icon:after{background-color:#216ba5;border-radius:50%;color:#fff;content:\"\\xd7\";cursor:pointer;display:table-cell;font-size:12px;height:16px;line-height:1;padding:2px;text-align:center;vertical-align:middle;width:16px}.react-datepicker__close-icon--disabled{cursor:default}.react-datepicker__close-icon--disabled:after{background-color:#ccc;cursor:default}.react-datepicker__today-button{background:#f0f0f0;border-top:1px solid #aeaeae;clear:left;cursor:pointer;font-weight:700;padding:5px 0;text-align:center}.react-datepicker__portal{align-items:center;background-color:rgba(0,0,0,.8);display:flex;height:100vh;justify-content:center;left:0;position:fixed;top:0;width:100vw;z-index:2147483647}.react-datepicker__portal .react-datepicker__day,.react-datepicker__portal .react-datepicker__day-name,.react-datepicker__portal .react-datepicker__time-name{line-height:3rem;width:3rem}@media (max-height:550px),(max-width:400px){.react-datepicker__portal .react-datepicker__day,.react-datepicker__portal .react-datepicker__day-name,.react-datepicker__portal .react-datepicker__time-name{line-height:2rem;width:2rem}}.react-datepicker__portal .react-datepicker-time__header,.react-datepicker__portal .react-datepicker__current-month{font-size:1.44rem}.react-datepicker__children-container{height:auto;margin:.4rem;padding-left:.2rem;padding-right:.2rem;width:13.8rem}.react-datepicker__aria-live{border:0;clip-path:circle(0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}.react-datepicker__calendar-icon{height:1em;vertical-align:-.125em;width:1em}';\nstyleInject(css_248z$1, {\n    \"insertAt\": \"top\"\n});\nconst DatePicker = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((_a1, ref1)=>{\n    var { label: label1, name: name1, error: error1, required: required1, disabled: disabled1, className: className1, id: id1, helpText: helpText1, placeholder: placeholder1 = \"Select date...\", dateFormat: dateFormat1 = \"MM/dd/yyyy\", showTimeSelect: showTimeSelect1 = false, minDate: minDate1, maxDate: maxDate1, register: register1, onChange: onChange1, value: value1 } = _a1, rest1 = __rest(_a1, [\n        \"label\",\n        \"name\",\n        \"error\",\n        \"required\",\n        \"disabled\",\n        \"className\",\n        \"id\",\n        \"helpText\",\n        \"placeholder\",\n        \"dateFormat\",\n        \"showTimeSelect\",\n        \"minDate\",\n        \"maxDate\",\n        \"register\",\n        \"onChange\",\n        \"value\"\n    ]);\n    const datePickerId1 = id1 || name1;\n    const hasError1 = !!error1;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: cn(\"formax-datepicker-wrapper\", className1),\n        children: [\n            label1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"label\", {\n                htmlFor: datePickerId1,\n                className: cn(\"formax-label\", {\n                    required: required1\n                }),\n                children: label1\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: \"relative\",\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(er, Object.assign({\n                        id: datePickerId1,\n                        name: name1,\n                        selected: value1,\n                        onChange: onChange1 || (()=>{}),\n                        dateFormat: dateFormat1,\n                        showTimeSelect: showTimeSelect1,\n                        minDate: minDate1,\n                        maxDate: maxDate1,\n                        disabled: disabled1,\n                        placeholderText: placeholder1,\n                        className: cn(\"formax-field pr-10\", {\n                            \"error\": hasError1\n                        }),\n                        wrapperClassName: \"w-full\"\n                    }, rest1)),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        className: \"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\",\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Calendar, {\n                            className: \"h-4 w-4 text-gray-400\"\n                        })\n                    })\n                ]\n            }),\n            error1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                id: `${datePickerId1}-error`,\n                className: \"formax-error\",\n                children: error1\n            }),\n            helpText1 && !error1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                id: `${datePickerId1}-help`,\n                className: \"formax-help\",\n                children: helpText1\n            })\n        ]\n    });\n});\nDatePicker.displayName = \"DatePicker\";\nconst FormError = ({ message: message1, errors: errors1, className: className1 })=>{\n    if (!message1 && (!errors1 || errors1.length === 0)) {\n        return null;\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        className: cn(\"bg-red-50 border border-red-200 rounded-md p-4\", className1),\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n            className: \"flex\",\n            children: [\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                    className: \"flex-shrink-0\",\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(AlertCircle, {\n                        className: \"h-5 w-5 text-red-400\"\n                    })\n                }),\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                    className: \"ml-3\",\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h3\", {\n                            className: \"text-sm font-medium text-red-800\",\n                            children: message1 || \"There were errors with your submission\"\n                        }),\n                        errors1 && errors1.length > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                            className: \"mt-2 text-sm text-red-700\",\n                            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ul\", {\n                                className: \"list-disc pl-5 space-y-1\",\n                                children: errors1.map((error1, index1)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"li\", {\n                                        children: error1\n                                    }, index1))\n                            })\n                        })\n                    ]\n                })\n            ]\n        })\n    });\n};\nFormError.displayName = \"FormError\";\nconst FormProvider = ({ children, formMethods, className })=>{\n    // If React Hook Form methods are provided, wrap with FormProvider\n    if (formMethods && formMethods.formState) {\n        try {\n            // Dynamic import for React Hook Form to avoid requiring it as a dependency\n            const { FormProvider: RHFFormProvider } = eval(\"require\")(\"react-hook-form\");\n            return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RHFFormProvider, Object.assign({}, formMethods, {\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                    className: cn(\"formax-form-provider\", className),\n                    children: children\n                })\n            }));\n        } catch (error) {\n            console.warn(\"React Hook Form not found. Using basic wrapper.\");\n        }\n    }\n    // Otherwise, just provide a wrapper div\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        className: cn(\"formax-form-provider\", className),\n        children: children\n    });\n};\nconst MultiStepForm = ({ steps: steps1, onSubmit: onSubmit1, showProgress: showProgress1 = true, allowSkipSteps: allowSkipSteps1 = false, className: className1 })=>{\n    var _a1;\n    const [currentStep1, setCurrentStep1] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [completedSteps1, setCompletedSteps1] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Set());\n    const [loading1, setLoading1] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const isFirstStep1 = currentStep1 === 0;\n    const isLastStep1 = currentStep1 === steps1.length - 1;\n    allowSkipSteps1 || completedSteps1.has(currentStep1);\n    const handleNext1 = ()=>__awaiter(void 0, void 0, void 0, function*() {\n            const step1 = steps1[currentStep1];\n            if (step1.validation) {\n                setLoading1(true);\n                try {\n                    const isValid1 = yield step1.validation();\n                    if (!isValid1) {\n                        setLoading1(false);\n                        return;\n                    }\n                } catch (error1) {\n                    setLoading1(false);\n                    return;\n                }\n            }\n            setCompletedSteps1((prev1)=>new Set([\n                    ...prev1,\n                    currentStep1\n                ]));\n            if (isLastStep1) {\n                yield onSubmit1({});\n            } else {\n                setCurrentStep1((prev1)=>prev1 + 1);\n            }\n            setLoading1(false);\n        });\n    const handlePrevious1 = ()=>{\n        if (!isFirstStep1) {\n            setCurrentStep1((prev1)=>prev1 - 1);\n        }\n    };\n    const handleStepClick1 = (stepIndex1)=>{\n        if (allowSkipSteps1 || stepIndex1 <= currentStep1 || completedSteps1.has(stepIndex1 - 1)) {\n            setCurrentStep1(stepIndex1);\n        }\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: cn(\"formax-multistep-form\", className1),\n        children: [\n            showProgress1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: \"mb-8\",\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                    className: \"flex items-center justify-between\",\n                    children: steps1.map((step1, index1)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                            className: \"flex-1 relative\",\n                            children: [\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                                    className: \"flex items-center\",\n                                    children: [\n                                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                                            type: \"button\",\n                                            onClick: ()=>handleStepClick1(index1),\n                                            disabled: !allowSkipSteps1 && index1 > currentStep1 && !completedSteps1.has(index1 - 1),\n                                            className: cn(\"w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium transition-colors\", {\n                                                \"bg-formax-600 text-white\": index1 === currentStep1,\n                                                \"bg-green-500 text-white\": completedSteps1.has(index1),\n                                                \"bg-gray-200 text-gray-500\": index1 > currentStep1 && !completedSteps1.has(index1),\n                                                \"bg-gray-300 text-gray-700\": index1 < currentStep1 && !completedSteps1.has(index1),\n                                                \"cursor-pointer hover:bg-formax-700\": allowSkipSteps1 || index1 <= currentStep1 || completedSteps1.has(index1 - 1),\n                                                \"cursor-not-allowed\": !allowSkipSteps1 && index1 > currentStep1 && !completedSteps1.has(index1 - 1)\n                                            }),\n                                            children: completedSteps1.has(index1) ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Check, {\n                                                className: \"w-4 h-4\"\n                                            }) : index1 + 1\n                                        }),\n                                        index1 < steps1.length - 1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                            className: cn(\"flex-1 h-0.5 mx-4\", {\n                                                \"bg-green-500\": completedSteps1.has(index1),\n                                                \"bg-formax-600\": index1 < currentStep1,\n                                                \"bg-gray-200\": index1 >= currentStep1\n                                            })\n                                        })\n                                    ]\n                                }),\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                                    className: \"mt-2\",\n                                    children: [\n                                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                                            className: cn(\"text-sm font-medium\", {\n                                                \"text-formax-600\": index1 === currentStep1,\n                                                \"text-green-600\": completedSteps1.has(index1),\n                                                \"text-gray-500\": index1 !== currentStep1 && !completedSteps1.has(index1)\n                                            }),\n                                            children: step1.title\n                                        }),\n                                        step1.description && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                                            className: \"text-xs text-gray-500 mt-1\",\n                                            children: step1.description\n                                        })\n                                    ]\n                                })\n                            ]\n                        }, step1.id))\n                })\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: \"mb-8\",\n                children: (_a1 = steps1[currentStep1]) === null || _a1 === void 0 ? void 0 : _a1.component\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: \"flex justify-between\",\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n                        type: \"button\",\n                        onClick: handlePrevious1,\n                        disabled: isFirstStep1,\n                        className: cn(\"inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-formax-500 focus:ring-offset-2\", {\n                            \"opacity-50 cursor-not-allowed\": isFirstStep1\n                        }),\n                        children: [\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ChevronLeft, {\n                                className: \"w-4 h-4 mr-1\"\n                            }),\n                            \"Previous\"\n                        ]\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                        type: \"button\",\n                        onClick: handleNext1,\n                        disabled: loading1,\n                        className: cn(\"inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-formax-600 border border-transparent rounded-md hover:bg-formax-700 focus:outline-none focus:ring-2 focus:ring-formax-500 focus:ring-offset-2\", {\n                            \"opacity-50 cursor-not-allowed\": loading1\n                        }),\n                        children: loading1 ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                            children: [\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                    className: \"w-4 h-4 mr-2 border-2 border-white border-t-transparent rounded-full animate-spin\"\n                                }),\n                                \"Processing...\"\n                            ]\n                        }) : isLastStep1 ? \"Submit\" : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                            children: [\n                                \"Next\",\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ChevronRight, {\n                                    className: \"w-4 h-4 ml-1\"\n                                })\n                            ]\n                        })\n                    })\n                ]\n            })\n        ]\n    });\n};\nMultiStepForm.displayName = \"MultiStepForm\";\nconst RadioGroup = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(({ label: label1, name: name1, error: error1, required: required1, disabled: disabled1, className: className1, helpText: helpText1, options: options1, direction: direction1 = \"vertical\", register: register1 }, ref1)=>{\n    const hasError1 = !!error1;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"fieldset\", {\n        ref: ref1,\n        className: cn(\"formax-radio-group-wrapper\", className1),\n        disabled: disabled1,\n        children: [\n            label1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"legend\", {\n                className: cn(\"formax-label\", {\n                    required: required1\n                }),\n                children: label1\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: cn(\"mt-2 space-y-2\", {\n                    \"flex flex-wrap gap-4\": direction1 === \"horizontal\",\n                    \"space-y-2\": direction1 === \"vertical\"\n                }),\n                children: options1.map((option1, index1)=>{\n                    const optionId1 = `${name1}-${option1.value}`;\n                    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                        className: \"flex items-center\",\n                        children: [\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", Object.assign({\n                                type: \"radio\",\n                                id: optionId1,\n                                name: name1,\n                                value: option1.value,\n                                disabled: disabled1 || option1.disabled,\n                                \"aria-invalid\": hasError1,\n                                \"aria-describedby\": hasError1 ? `${name1}-error` : helpText1 ? `${name1}-help` : undefined,\n                                className: cn(\"h-4 w-4 text-formax-600 border-gray-300 focus:ring-formax-500 focus:ring-2\", {\n                                    \"border-red-500\": hasError1\n                                })\n                            }, register1 ? register1 : {})),\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"label\", {\n                                htmlFor: optionId1,\n                                className: cn(\"ml-3 block text-sm font-medium text-gray-700\", {\n                                    \"opacity-50 cursor-not-allowed\": disabled1 || option1.disabled\n                                }),\n                                children: option1.label\n                            })\n                        ]\n                    }, option1.value);\n                })\n            }),\n            error1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                id: `${name1}-error`,\n                className: \"formax-error mt-2\",\n                children: error1\n            }),\n            helpText1 && !error1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                id: `${name1}-help`,\n                className: \"formax-help mt-2\",\n                children: helpText1\n            })\n        ]\n    });\n});\nRadioGroup.displayName = \"RadioGroup\";\nconst Select = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((_a1, ref1)=>{\n    var { label: label1, name: name1, error: error1, required: required1, disabled: disabled1, className: className1, id: id1, helpText: helpText1, options: options1, placeholder: placeholder1 = \"Select an option...\", isSearchable: isSearchable1 = false, isMulti: isMulti1 = false, isAsync: isAsync1 = false, loadOptions: loadOptions1, register: register1 } = _a1, rest1 = __rest(_a1, [\n        \"label\",\n        \"name\",\n        \"error\",\n        \"required\",\n        \"disabled\",\n        \"className\",\n        \"id\",\n        \"helpText\",\n        \"options\",\n        \"placeholder\",\n        \"isSearchable\",\n        \"isMulti\",\n        \"isAsync\",\n        \"loadOptions\",\n        \"register\"\n    ]);\n    const selectId1 = id1 || name1;\n    const hasError1 = !!error1;\n    const [isOpen1, setIsOpen1] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [searchTerm1, setSearchTerm1] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [selectedOptions1, setSelectedOptions1] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [asyncOptions1, setAsyncOptions1] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [loading1, setLoading1] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const dropdownRef1 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const availableOptions1 = isAsync1 ? asyncOptions1 : options1;\n    const filteredOptions1 = isSearchable1 ? availableOptions1.filter((option1)=>option1.label.toLowerCase().includes(searchTerm1.toLowerCase())) : availableOptions1;\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleClickOutside1 = (event1)=>{\n            if (dropdownRef1.current && !dropdownRef1.current.contains(event1.target)) {\n                setIsOpen1(false);\n            }\n        };\n        document.addEventListener(\"mousedown\", handleClickOutside1);\n        return ()=>document.removeEventListener(\"mousedown\", handleClickOutside1);\n    }, []);\n    const handleOptionSelect1 = (option1)=>{\n        if (isMulti1) {\n            const isSelected1 = selectedOptions1.find((selected1)=>selected1.value === option1.value);\n            if (isSelected1) {\n                setSelectedOptions1(selectedOptions1.filter((selected1)=>selected1.value !== option1.value));\n            } else {\n                setSelectedOptions1([\n                    ...selectedOptions1,\n                    option1\n                ]);\n            }\n        } else {\n            setSelectedOptions1([\n                option1\n            ]);\n            setIsOpen1(false);\n        }\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: cn(\"formax-select-wrapper\", className1),\n        children: [\n            label1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"label\", {\n                htmlFor: selectId1,\n                className: cn(\"formax-label\", {\n                    required: required1\n                }),\n                children: label1\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: \"relative\",\n                ref: dropdownRef1,\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"select\", Object.assign({\n                        ref: ref1,\n                        id: selectId1,\n                        name: name1,\n                        className: \"sr-only\",\n                        disabled: disabled1,\n                        \"aria-invalid\": hasError1\n                    }, register1 ? register1 : {}, rest1, {\n                        children: selectedOptions1.map((option1)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"option\", {\n                                value: option1.value,\n                                children: option1.label\n                            }, option1.value))\n                    })),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n                        type: \"button\",\n                        disabled: disabled1,\n                        onClick: ()=>setIsOpen1(!isOpen1),\n                        className: cn(\"formax-field text-left flex items-center justify-between\", {\n                            \"error\": hasError1\n                        }),\n                        children: [\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                                className: \"block truncate\",\n                                children: selectedOptions1.length === 0 ? placeholder1 : isMulti1 ? `${selectedOptions1.length} selected` : selectedOptions1[0].label\n                            }),\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ChevronDown, {\n                                className: cn(\"h-4 w-4 transition-transform duration-200\", {\n                                    \"rotate-180\": isOpen1\n                                })\n                            })\n                        ]\n                    }),\n                    isOpen1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        className: \"absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg\",\n                        children: filteredOptions1.map((option1)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                                type: \"button\",\n                                onClick: ()=>handleOptionSelect1(option1),\n                                className: \"w-full text-left px-3 py-2 text-sm hover:bg-gray-100\",\n                                children: option1.label\n                            }, option1.value))\n                    })\n                ]\n            }),\n            error1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                className: \"formax-error\",\n                children: error1\n            }),\n            helpText1 && !error1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                className: \"formax-help\",\n                children: helpText1\n            })\n        ]\n    });\n});\nSelect.displayName = \"Select\";\nconst SubmitButton = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((_a1, ref1)=>{\n    var { children: children1, loading: loading1 = false, loadingText: loadingText1 = \"Loading...\", variant: variant1 = \"primary\", size: size1 = \"md\", fullWidth: fullWidth1 = false, icon: icon1, disabled: disabled1, className: className1 } = _a1, rest1 = __rest(_a1, [\n        \"children\",\n        \"loading\",\n        \"loadingText\",\n        \"variant\",\n        \"size\",\n        \"fullWidth\",\n        \"icon\",\n        \"disabled\",\n        \"className\"\n    ]);\n    const isDisabled1 = disabled1 || loading1;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", Object.assign({\n        ref: ref1,\n        type: \"submit\",\n        disabled: isDisabled1,\n        className: cn(\"formax-btn\", {\n            \"formax-btn-primary\": variant1 === \"primary\",\n            \"formax-btn-secondary\": variant1 === \"secondary\",\n            \"formax-btn-outline\": variant1 === \"outline\",\n            \"formax-btn-sm\": size1 === \"sm\",\n            \"formax-btn-lg\": size1 === \"lg\",\n            \"w-full\": fullWidth1\n        }, className1)\n    }, rest1, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n            className: \"flex items-center justify-center\",\n            children: loading1 ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Loader2, {\n                        className: \"w-4 h-4 mr-2 animate-spin\"\n                    }),\n                    loadingText1\n                ]\n            }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                children: [\n                    icon1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                        className: \"mr-2\",\n                        children: icon1\n                    }),\n                    children1\n                ]\n            })\n        })\n    }));\n});\nSubmitButton.displayName = \"SubmitButton\";\nconst SwitchToggle = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((_a1, ref1)=>{\n    var { label: label1, name: name1, error: error1, required: required1, disabled: disabled1, className: className1, id: id1, helpText: helpText1, onLabel: onLabel1 = \"On\", offLabel: offLabel1 = \"Off\", size: size1 = \"md\", register: register1 } = _a1, rest1 = __rest(_a1, [\n        \"label\",\n        \"name\",\n        \"error\",\n        \"required\",\n        \"disabled\",\n        \"className\",\n        \"id\",\n        \"helpText\",\n        \"onLabel\",\n        \"offLabel\",\n        \"size\",\n        \"register\"\n    ]);\n    const switchId1 = id1 || name1;\n    const hasError1 = !!error1;\n    const sizeClasses1 = {\n        sm: {\n            switch: \"h-5 w-9\",\n            thumb: \"h-4 w-4\",\n            translate: \"translate-x-4\"\n        },\n        md: {\n            switch: \"h-6 w-11\",\n            thumb: \"h-5 w-5\",\n            translate: \"translate-x-5\"\n        },\n        lg: {\n            switch: \"h-7 w-12\",\n            thumb: \"h-6 w-6\",\n            translate: \"translate-x-5\"\n        }\n    };\n    const currentSize1 = sizeClasses1[size1];\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: cn(\"formax-switch-wrapper\", className1),\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: \"flex items-center justify-between\",\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                        className: \"flex-1\",\n                        children: [\n                            label1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"label\", {\n                                htmlFor: switchId1,\n                                className: cn(\"formax-label\", {\n                                    required: required1\n                                }),\n                                children: label1\n                            }),\n                            helpText1 && !error1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                                className: \"formax-help\",\n                                children: helpText1\n                            })\n                        ]\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                        className: \"flex items-center ml-4\",\n                        children: [\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                                className: cn(\"text-sm text-gray-500 mr-3\", {\n                                    \"opacity-50\": disabled1\n                                }),\n                                children: offLabel1\n                            }),\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"label\", {\n                                className: \"relative inline-flex items-center cursor-pointer\",\n                                children: [\n                                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", Object.assign({\n                                        ref: ref1,\n                                        type: \"checkbox\",\n                                        id: switchId1,\n                                        name: name1,\n                                        disabled: disabled1,\n                                        \"aria-invalid\": hasError1,\n                                        \"aria-describedby\": hasError1 ? `${switchId1}-error` : helpText1 ? `${switchId1}-help` : undefined,\n                                        className: \"sr-only peer\"\n                                    }, register1 ? register1 : {}, rest1)),\n                                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                        className: cn(currentSize1.switch, \"bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-formax-300 rounded-full peer\", \"peer-checked:after:translate-x-full peer-checked:after:border-white\", `after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:transition-all`, currentSize1.thumb, \"peer-checked:bg-formax-600\", {\n                                            \"opacity-50 cursor-not-allowed\": disabled1,\n                                            \"bg-red-200 peer-checked:bg-red-500\": hasError1\n                                        })\n                                    })\n                                ]\n                            }),\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                                className: cn(\"text-sm text-gray-500 ml-3\", {\n                                    \"opacity-50\": disabled1\n                                }),\n                                children: onLabel1\n                            })\n                        ]\n                    })\n                ]\n            }),\n            error1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                id: `${switchId1}-error`,\n                className: \"formax-error mt-2\",\n                children: error1\n            })\n        ]\n    });\n});\nSwitchToggle.displayName = \"SwitchToggle\";\nconst Textarea = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((_a1, ref1)=>{\n    var { label: label1, name: name1, error: error1, required: required1, disabled: disabled1, className: className1, id: id1, helpText: helpText1, placeholder: placeholder1, autoResize: autoResize1 = false, minRows: minRows1 = 3, maxRows: maxRows1 = 10, register: register1 } = _a1, rest1 = __rest(_a1, [\n        \"label\",\n        \"name\",\n        \"error\",\n        \"required\",\n        \"disabled\",\n        \"className\",\n        \"id\",\n        \"helpText\",\n        \"placeholder\",\n        \"autoResize\",\n        \"minRows\",\n        \"maxRows\",\n        \"register\"\n    ]);\n    const textareaId1 = id1 || name1;\n    const hasError1 = !!error1;\n    const internalRef1 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const textareaRef1 = ref1 || internalRef1;\n    const adjustHeight1 = ()=>{\n        if (autoResize1 && textareaRef1.current) {\n            const textarea1 = textareaRef1.current;\n            textarea1.style.height = \"auto\";\n            const lineHeight1 = parseInt(getComputedStyle(textarea1).lineHeight);\n            const minHeight1 = lineHeight1 * minRows1;\n            const maxHeight1 = lineHeight1 * maxRows1;\n            const newHeight1 = Math.min(Math.max(textarea1.scrollHeight, minHeight1), maxHeight1);\n            textarea1.style.height = `${newHeight1}px`;\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (autoResize1) {\n            adjustHeight1();\n        }\n    }, [\n        autoResize1\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: cn(\"formax-textarea-wrapper\", className1),\n        children: [\n            label1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"label\", {\n                htmlFor: textareaId1,\n                className: cn(\"formax-label\", {\n                    required: required1\n                }),\n                children: label1\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"textarea\", Object.assign({\n                ref: textareaRef1,\n                id: textareaId1,\n                name: name1,\n                placeholder: placeholder1,\n                disabled: disabled1,\n                rows: autoResize1 ? minRows1 : rest1.rows || 3,\n                \"aria-invalid\": hasError1,\n                \"aria-describedby\": hasError1 ? `${textareaId1}-error` : helpText1 ? `${textareaId1}-help` : undefined,\n                className: cn(\"formax-field resize-none\", {\n                    \"error\": hasError1,\n                    \"resize-y\": !autoResize1\n                }),\n                onInput: autoResize1 ? adjustHeight1 : undefined\n            }, register1 ? register1 : {}, rest1)),\n            error1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                id: `${textareaId1}-error`,\n                className: \"formax-error\",\n                children: error1\n            }),\n            helpText1 && !error1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                id: `${textareaId1}-help`,\n                className: \"formax-help\",\n                children: helpText1\n            })\n        ]\n    });\n});\nTextarea.displayName = \"Textarea\";\nconst TextInput = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((_a1, ref1)=>{\n    var { label: label1, name: name1, error: error1, required: required1, disabled: disabled1, className: className1, id: id1, helpText: helpText1, type: type1 = \"text\", placeholder: placeholder1, leftIcon: leftIcon1, rightIcon: rightIcon1, register: register1 } = _a1, rest1 = __rest(_a1, [\n        \"label\",\n        \"name\",\n        \"error\",\n        \"required\",\n        \"disabled\",\n        \"className\",\n        \"id\",\n        \"helpText\",\n        \"type\",\n        \"placeholder\",\n        \"leftIcon\",\n        \"rightIcon\",\n        \"register\"\n    ]);\n    const inputId1 = id1 || name1;\n    const hasError1 = !!error1;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: cn(\"formax-text-input-wrapper\", className1),\n        children: [\n            label1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"label\", {\n                htmlFor: inputId1,\n                className: cn(\"formax-label\", {\n                    required: required1\n                }),\n                children: label1\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: \"relative\",\n                children: [\n                    leftIcon1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        className: \"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\",\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                            className: \"text-gray-400 sm:text-sm\",\n                            children: leftIcon1\n                        })\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", Object.assign({\n                        ref: ref1,\n                        type: type1,\n                        id: inputId1,\n                        name: name1,\n                        placeholder: placeholder1,\n                        disabled: disabled1,\n                        \"aria-invalid\": hasError1,\n                        \"aria-describedby\": hasError1 ? `${inputId1}-error` : helpText1 ? `${inputId1}-help` : undefined,\n                        className: cn(\"formax-field\", {\n                            \"pl-10\": leftIcon1,\n                            \"pr-10\": rightIcon1,\n                            \"error\": hasError1\n                        })\n                    }, register1 ? register1 : {}, rest1)),\n                    rightIcon1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        className: \"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\",\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                            className: \"text-gray-400 sm:text-sm\",\n                            children: rightIcon1\n                        })\n                    })\n                ]\n            }),\n            error1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                id: `${inputId1}-error`,\n                className: \"formax-error\",\n                children: error1\n            }),\n            helpText1 && !error1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                id: `${inputId1}-help`,\n                className: \"formax-help\",\n                children: helpText1\n            })\n        ]\n    });\n});\nTextInput.displayName = \"TextInput\";\nvar css_248z = '*,:after,:before{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }/*! tailwindcss v3.4.17 | MIT License | https://tailwindcss.com*/*,:after,:before{border:0 solid #e5e7eb;box-sizing:border-box}:after,:before{--tw-content:\"\"}:host,html{-webkit-text-size-adjust:100%;font-feature-settings:normal;-webkit-tap-highlight-color:transparent;font-family:ui-sans-serif,system-ui,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;font-variation-settings:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4}body{line-height:inherit;margin:0}hr{border-top-width:1px;color:inherit;height:0}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-feature-settings:normal;font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-size:1em;font-variation-settings:normal}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{border-collapse:collapse;border-color:inherit;text-indent:0}button,input,optgroup,select,textarea{font-feature-settings:inherit;color:inherit;font-family:inherit;font-size:100%;font-variation-settings:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;margin:0;padding:0}button,select{text-transform:none}button,input:where([type=button]),input:where([type=reset]),input:where([type=submit]){-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dd,dl,figure,h1,h2,h3,h4,h5,h6,hr,p,pre{margin:0}fieldset{margin:0}fieldset,legend{padding:0}menu,ol,ul{list-style:none;margin:0;padding:0}dialog{padding:0}textarea{resize:vertical}input::-moz-placeholder,textarea::-moz-placeholder{color:#9ca3af;opacity:1}input::placeholder,textarea::placeholder{color:#9ca3af;opacity:1}[role=button],button{cursor:pointer}:disabled{cursor:default}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{height:auto;max-width:100%}[hidden]:where(:not([hidden=until-found])){display:none}.formax-field{--tw-border-opacity:1;--tw-bg-opacity:1;--tw-shadow:0 1px 2px 0 rgba(0,0,0,.05);--tw-shadow-colored:0 1px 2px 0 var(--tw-shadow-color);--tw-text-opacity:1;background-color:rgb(255 255 255/var(--tw-bg-opacity,1));border-color:rgb(209 213 219/var(--tw-border-opacity,1));border-radius:.375rem;border-width:1px;box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow);color:rgb(17 24 39/var(--tw-text-opacity,1));display:block;font-size:.875rem;line-height:1.25rem;padding:.5rem .75rem;width:100%}.formax-field::-moz-placeholder{--tw-placeholder-opacity:1;color:rgb(156 163 175/var(--tw-placeholder-opacity,1))}.formax-field::placeholder{--tw-placeholder-opacity:1;color:rgb(156 163 175/var(--tw-placeholder-opacity,1))}.formax-field{transition-duration:.2s;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke;transition-timing-function:cubic-bezier(.4,0,.2,1)}.formax-field:hover{--tw-border-opacity:1;border-color:rgb(156 163 175/var(--tw-border-opacity,1))}.formax-field:focus{--tw-border-opacity:1;--tw-ring-opacity:1;--tw-ring-color:rgb(14 165 233/var(--tw-ring-opacity,1));border-color:rgb(14 165 233/var(--tw-border-opacity,1))}.formax-field:disabled{cursor:not-allowed;opacity:.5}.formax-field.error,.formax-field.error:focus{--tw-border-opacity:1;border-color:rgb(239 68 68/var(--tw-border-opacity,1))}.formax-field.error:focus{--tw-ring-opacity:1;--tw-ring-color:rgb(239 68 68/var(--tw-ring-opacity,1))}.formax-field.\\\\!error,.formax-field.\\\\!error:focus{--tw-border-opacity:1;border-color:rgb(239 68 68/var(--tw-border-opacity,1))}.formax-field.\\\\!error:focus{--tw-ring-opacity:1;--tw-ring-color:rgb(239 68 68/var(--tw-ring-opacity,1))}.formax-label{--tw-text-opacity:1;color:rgb(55 65 81/var(--tw-text-opacity,1));display:block;font-size:.875rem;font-weight:500;line-height:1.25rem;margin-bottom:.25rem}.formax-label.required:after{--tw-text-opacity:1;color:rgb(239 68 68/var(--tw-text-opacity,1));content:\"*\";margin-left:.25rem}.formax-error{color:rgb(220 38 38/var(--tw-text-opacity,1))}.formax-error,.formax-help{--tw-text-opacity:1;font-size:.875rem;line-height:1.25rem;margin-top:.25rem}.formax-help{color:rgb(107 114 128/var(--tw-text-opacity,1))}.formax-btn{align-items:center;border-radius:.375rem;display:inline-flex;font-size:.875rem;font-weight:500;justify-content:center;line-height:1.25rem;padding:.5rem 1rem;transition-duration:.2s;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke;transition-timing-function:cubic-bezier(.4,0,.2,1)}.formax-btn:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);--tw-ring-offset-width:2px;box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 #0000);outline:2px solid transparent;outline-offset:2px}.formax-btn:disabled{cursor:not-allowed;opacity:.5}.formax-btn-primary{--tw-bg-opacity:1;--tw-text-opacity:1;background-color:rgb(2 132 199/var(--tw-bg-opacity,1));color:rgb(255 255 255/var(--tw-text-opacity,1))}.formax-btn-primary:hover{--tw-bg-opacity:1;background-color:rgb(3 105 161/var(--tw-bg-opacity,1))}.formax-btn-primary:focus{--tw-ring-opacity:1;--tw-ring-color:rgb(14 165 233/var(--tw-ring-opacity,1))}.formax-btn-secondary{--tw-bg-opacity:1;--tw-text-opacity:1;background-color:rgb(75 85 99/var(--tw-bg-opacity,1));color:rgb(255 255 255/var(--tw-text-opacity,1))}.formax-btn-secondary:hover{--tw-bg-opacity:1;background-color:rgb(55 65 81/var(--tw-bg-opacity,1))}.formax-btn-secondary:focus{--tw-ring-opacity:1;--tw-ring-color:rgb(107 114 128/var(--tw-ring-opacity,1))}.formax-btn-outline{--tw-border-opacity:1;--tw-bg-opacity:1;--tw-text-opacity:1;background-color:rgb(255 255 255/var(--tw-bg-opacity,1));border-color:rgb(2 132 199/var(--tw-border-opacity,1));border-width:1px;color:rgb(2 132 199/var(--tw-text-opacity,1))}.formax-btn-outline:hover{--tw-bg-opacity:1;background-color:rgb(240 249 255/var(--tw-bg-opacity,1))}.formax-btn-outline:focus{--tw-ring-opacity:1;--tw-ring-color:rgb(14 165 233/var(--tw-ring-opacity,1))}.formax-btn-sm{font-size:.75rem;line-height:1rem;padding:.375rem .75rem}.formax-btn-lg{font-size:1rem;line-height:1.5rem;padding:.75rem 1.5rem}.sr-only{clip:rect(0,0,0,0);border-width:0;height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}.pointer-events-none{pointer-events:none}.absolute{position:absolute}.relative{position:relative}.inset-y-0{bottom:0;top:0}.left-0{left:0}.right-0{right:0}.z-10{z-index:10}.mx-4{margin-left:1rem;margin-right:1rem}.mb-8{margin-bottom:2rem}.ml-1{margin-left:.25rem}.ml-3{margin-left:.75rem}.ml-4{margin-left:1rem}.mr-1{margin-right:.25rem}.mr-2{margin-right:.5rem}.mr-3{margin-right:.75rem}.mt-1{margin-top:.25rem}.mt-2{margin-top:.5rem}.block{display:block}.flex{display:flex}.inline-flex{display:inline-flex}.h-0\\\\.5{height:.125rem}.h-3{height:.75rem}.h-4{height:1rem}.h-5{height:1.25rem}.h-6{height:1.5rem}.h-7{height:1.75rem}.h-8{height:2rem}.w-11{width:2.75rem}.w-12{width:3rem}.w-3{width:.75rem}.w-4{width:1rem}.w-5{width:1.25rem}.w-6{width:1.5rem}.w-8{width:2rem}.w-9{width:2.25rem}.w-full{width:100%}.flex-1{flex:1 1 0%}.flex-shrink-0{flex-shrink:0}.translate-x-4{--tw-translate-x:1rem}.translate-x-4,.translate-x-5{transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.translate-x-5{--tw-translate-x:1.25rem}.rotate-180{--tw-rotate:180deg;transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}@keyframes spin{to{transform:rotate(1turn)}}.animate-spin{animation:spin 1s linear infinite}.cursor-not-allowed{cursor:not-allowed}.cursor-pointer{cursor:pointer}.resize-none{resize:none}.resize-y{resize:vertical}.list-disc{list-style-type:disc}.flex-wrap{flex-wrap:wrap}.items-start{align-items:flex-start}.items-center{align-items:center}.justify-center{justify-content:center}.justify-between{justify-content:space-between}.gap-4{gap:1rem}.space-y-1>:not([hidden])~:not([hidden]){--tw-space-y-reverse:0;margin-bottom:calc(.25rem*var(--tw-space-y-reverse));margin-top:calc(.25rem*(1 - var(--tw-space-y-reverse)))}.space-y-2>:not([hidden])~:not([hidden]){--tw-space-y-reverse:0;margin-bottom:calc(.5rem*var(--tw-space-y-reverse));margin-top:calc(.5rem*(1 - var(--tw-space-y-reverse)))}.truncate{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.rounded{border-radius:.25rem}.rounded-full{border-radius:9999px}.rounded-md{border-radius:.375rem}.border{border-width:1px}.border-2{border-width:2px}.border-gray-300{--tw-border-opacity:1;border-color:rgb(209 213 219/var(--tw-border-opacity,1))}.border-red-200{--tw-border-opacity:1;border-color:rgb(254 202 202/var(--tw-border-opacity,1))}.border-red-500{--tw-border-opacity:1;border-color:rgb(239 68 68/var(--tw-border-opacity,1))}.border-transparent{border-color:transparent}.border-white{--tw-border-opacity:1;border-color:rgb(255 255 255/var(--tw-border-opacity,1))}.border-t-transparent{border-top-color:transparent}.bg-formax-600{--tw-bg-opacity:1;background-color:rgb(2 132 199/var(--tw-bg-opacity,1))}.bg-formax-700{--tw-bg-opacity:1;background-color:rgb(3 105 161/var(--tw-bg-opacity,1))}.bg-gray-200{--tw-bg-opacity:1;background-color:rgb(229 231 235/var(--tw-bg-opacity,1))}.bg-gray-300{--tw-bg-opacity:1;background-color:rgb(209 213 219/var(--tw-bg-opacity,1))}.bg-green-500{--tw-bg-opacity:1;background-color:rgb(34 197 94/var(--tw-bg-opacity,1))}.bg-red-200{--tw-bg-opacity:1;background-color:rgb(254 202 202/var(--tw-bg-opacity,1))}.bg-red-50{--tw-bg-opacity:1;background-color:rgb(254 242 242/var(--tw-bg-opacity,1))}.bg-white{--tw-bg-opacity:1;background-color:rgb(255 255 255/var(--tw-bg-opacity,1))}.p-4{padding:1rem}.px-3{padding-left:.75rem;padding-right:.75rem}.px-4{padding-left:1rem;padding-right:1rem}.py-2{padding-bottom:.5rem;padding-top:.5rem}.pl-10{padding-left:2.5rem}.pl-3{padding-left:.75rem}.pl-5{padding-left:1.25rem}.pr-10{padding-right:2.5rem}.pr-3{padding-right:.75rem}.text-left{text-align:left}.text-sm{font-size:.875rem;line-height:1.25rem}.text-xs{font-size:.75rem;line-height:1rem}.font-medium{font-weight:500}.text-formax-600{--tw-text-opacity:1;color:rgb(2 132 199/var(--tw-text-opacity,1))}.text-gray-400{--tw-text-opacity:1;color:rgb(156 163 175/var(--tw-text-opacity,1))}.text-gray-500{--tw-text-opacity:1;color:rgb(107 114 128/var(--tw-text-opacity,1))}.text-gray-700{--tw-text-opacity:1;color:rgb(55 65 81/var(--tw-text-opacity,1))}.text-green-600{--tw-text-opacity:1;color:rgb(22 163 74/var(--tw-text-opacity,1))}.text-red-400{--tw-text-opacity:1;color:rgb(248 113 113/var(--tw-text-opacity,1))}.text-red-500{--tw-text-opacity:1;color:rgb(239 68 68/var(--tw-text-opacity,1))}.text-red-700{--tw-text-opacity:1;color:rgb(185 28 28/var(--tw-text-opacity,1))}.text-red-800{--tw-text-opacity:1;color:rgb(153 27 27/var(--tw-text-opacity,1))}.text-white{--tw-text-opacity:1;color:rgb(255 255 255/var(--tw-text-opacity,1))}.opacity-0{opacity:0}.opacity-50{opacity:.5}.shadow-lg{--tw-shadow:0 10px 15px -3px rgba(0,0,0,.1),0 4px 6px -4px rgba(0,0,0,.1);--tw-shadow-colored:0 10px 15px -3px var(--tw-shadow-color),0 4px 6px -4px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.outline{outline-style:solid}.filter{filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)}.transition-all{transition-duration:.15s;transition-property:all;transition-timing-function:cubic-bezier(.4,0,.2,1)}.transition-colors{transition-duration:.15s;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke;transition-timing-function:cubic-bezier(.4,0,.2,1)}.transition-opacity{transition-duration:.15s;transition-property:opacity;transition-timing-function:cubic-bezier(.4,0,.2,1)}.transition-transform{transition-duration:.15s;transition-property:transform;transition-timing-function:cubic-bezier(.4,0,.2,1)}.duration-200{transition-duration:.2s}.after\\\\:absolute:after{content:var(--tw-content);position:absolute}.after\\\\:left-\\\\[2px\\\\]:after{content:var(--tw-content);left:2px}.after\\\\:top-\\\\[2px\\\\]:after{content:var(--tw-content);top:2px}.after\\\\:rounded-full:after{border-radius:9999px;content:var(--tw-content)}.after\\\\:border:after{border-width:1px;content:var(--tw-content)}.after\\\\:border-gray-300:after{--tw-border-opacity:1;border-color:rgb(209 213 219/var(--tw-border-opacity,1));content:var(--tw-content)}.after\\\\:bg-white:after{--tw-bg-opacity:1;background-color:rgb(255 255 255/var(--tw-bg-opacity,1));content:var(--tw-content)}.after\\\\:transition-all:after{content:var(--tw-content);transition-duration:.15s;transition-property:all;transition-timing-function:cubic-bezier(.4,0,.2,1)}.after\\\\:content-\\\\[\\\\\\'\\\\\\'\\\\]:after{--tw-content:\"\";content:var(--tw-content)}.hover\\\\:bg-formax-700:hover{--tw-bg-opacity:1;background-color:rgb(3 105 161/var(--tw-bg-opacity,1))}.hover\\\\:bg-gray-100:hover{--tw-bg-opacity:1;background-color:rgb(243 244 246/var(--tw-bg-opacity,1))}.hover\\\\:bg-gray-50:hover{--tw-bg-opacity:1;background-color:rgb(249 250 251/var(--tw-bg-opacity,1))}.focus\\\\:outline-none:focus{outline:2px solid transparent;outline-offset:2px}.focus\\\\:ring-2:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 #0000)}.focus\\\\:ring-formax-500:focus{--tw-ring-opacity:1;--tw-ring-color:rgb(14 165 233/var(--tw-ring-opacity,1))}.focus\\\\:ring-offset-2:focus{--tw-ring-offset-width:2px}.peer:checked~.peer-checked\\\\:border-formax-600{--tw-border-opacity:1;border-color:rgb(2 132 199/var(--tw-border-opacity,1))}.peer:checked~.peer-checked\\\\:bg-formax-600{--tw-bg-opacity:1;background-color:rgb(2 132 199/var(--tw-bg-opacity,1))}.peer:checked~.peer-checked\\\\:bg-red-500{--tw-bg-opacity:1;background-color:rgb(239 68 68/var(--tw-bg-opacity,1))}.peer:checked~.peer-checked\\\\:opacity-100{opacity:1}.peer:checked~.peer-checked\\\\:after\\\\:translate-x-full:after{--tw-translate-x:100%;content:var(--tw-content);transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.peer:checked~.peer-checked\\\\:after\\\\:border-white:after{--tw-border-opacity:1;border-color:rgb(255 255 255/var(--tw-border-opacity,1));content:var(--tw-content)}.peer:focus~.peer-focus\\\\:outline-none{outline:2px solid transparent;outline-offset:2px}.peer:focus~.peer-focus\\\\:ring-2{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color)}.peer:focus~.peer-focus\\\\:ring-2,.peer:focus~.peer-focus\\\\:ring-4{box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 #0000)}.peer:focus~.peer-focus\\\\:ring-4{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(4px + var(--tw-ring-offset-width)) var(--tw-ring-color)}.peer:focus~.peer-focus\\\\:ring-formax-300{--tw-ring-opacity:1;--tw-ring-color:rgb(125 211 252/var(--tw-ring-opacity,1))}.peer:focus~.peer-focus\\\\:ring-formax-500{--tw-ring-opacity:1;--tw-ring-color:rgb(14 165 233/var(--tw-ring-opacity,1))}.peer:focus~.peer-focus\\\\:ring-offset-2{--tw-ring-offset-width:2px}@media (min-width:640px){.sm\\\\:text-sm{font-size:.875rem;line-height:1.25rem}}';\nstyleInject(css_248z, {\n    \"insertAt\": \"top\"\n});\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/formax-ui/dist/index.es.js\n");

/***/ })

};
;